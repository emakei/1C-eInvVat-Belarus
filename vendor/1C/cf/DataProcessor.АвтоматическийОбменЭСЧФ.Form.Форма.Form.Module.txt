#Область УправлениеФормой

&НаКлиенте
Процедура АвтоматическоеУправлениеФлагамиПриИзменении(Элемент)
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПередУдалением(Элемент, Отказ)
	Отказ = Истина
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина
КонецПроцедуры

&НаКлиенте
Процедура УправлениеФормой()

	ДоступенОбмен = ЭСЧФклиентПовтИсп.ДоступнаКомпонентаОбменаИПодписания(Объект.РежимРаботыНаСервере);
	ЕстьПолныеПрава = ( РольДоступна("ПолныеПрава") Или РольДоступна("ИспользованиеЭСЧФПолный") );
	Элементы.ФормаПодменюРежимРаботы.Доступность = ( ЕстьПолныеПрава И ДоступенОбмен );
	
	Элементы.ФормаУстановитьРежимРаботыНаКлиенте.Пометка  = ( Объект.РежимРаботыНаСервере = 0 );
	Элементы.ФормаУстановитьРежимРаботыНаСервере.Пометка  = ( Объект.РежимРаботыНаСервере = 1 );
	
	АвтоФлаги = Объект.АвтоматическоеУправлениеФлагами;
	Элементы.ГруппаЧтоЗагружатьГоризонтальная.ТолькоПросмотр = АвтоФлаги;
	Элементы.ОрганизацииГруппаФлаги.ТолькоПросмотр           = АвтоФлаги;
	Элементы.ОрганизацииГруппаФлаги2.ТолькоПросмотр          = АвтоФлаги;
	Элементы.ОрганизацииГруппаОчередьИтерации.ТолькоПросмотр = АвтоФлаги;
	
	КолОрганизаций = Объект.Организации.Количество();
	
	Элементы.ОрганизацииЗаполнитьДанные.Доступность           = ( Не данные );
	Элементы.ОрганизацииОбновитьДанныеДляЗагрузки.Доступность = ( КолОрганизаций И Не данные );
	Элементы.ОрганизацииСформироватьПакет.Доступность         = ( КолОрганизаций И данные И Не пакет );
	Элементы.ФормаВыполнитьИтерацию.Доступность               = ( КолОрганизаций И пакет И Не загрузка );

КонецПроцедуры //УправлениеФормой

&НаКлиенте
Процедура УстановитьРежимРаботыНаКлиенте(Команда)
	Объект.РежимРаботыНаСервере = 0;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботыНаСервере(Команда)
	Объект.РежимРаботыНаСервере = 1;
	УправлениеФормой();
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОткрытьНастройкуПодсистемы(Команда)
	ПолучитьФорму("ОбщаяФорма.ФормаНастроекЭСЧФ").Открыть()
КонецПроцедуры

#КонецОбласти

#Область РаботаСДанными

&НаКлиенте
Процедура ОтразитьНомераДляОбновленияСтатусов(Команда) Экспорт

	Статус = "отражение необходимости обновления статусов документов";
	ЭСЧФобщий.ОтразитьНомераДляПолученияСтатусовПоУсловиюДатыОтражения();
	ЭСЧФобщий.ОтразитьНомераДляПолученияСтатусовПоУсловиюАннулированияИсходногоИИсправленного();
	Статус = "отражена необходимость обновления статусов документов";

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеДляЗагрузки1(Команда) Экспорт

	данные = Истина;
	Статус = "Обновляются данные для обмена";
	ЭтаФорма.ОбновитьОтображениеДанных();
	//Объект.Итерация = 0;
	ОбновитьДанныеДляЗагрузки();
	Статус = "Данные для обмена заполнены";
	ХодИтерации = ?(организации Или данные, 1, 0) + ?(данные, 1, 0) + ?(пакет, 1, 0) + ?(загрузка, 1, 0);
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПакет1(Команда) Экспорт

	пакет = Истина;
	Статус = "Формирование данных пакета для обмена данными";
	ЭтаФорма.ОбновитьОтображениеДанных();
	СформироватьПакет();
	Статус = "Данные пакета для обмена сформированы";
	ХодИтерации = ?(организации Или данные, 1, 0) + ?(данные, 1, 0) + ?(пакет, 1, 0) + ?(загрузка, 1, 0);
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанные(Команда)

	организации = Истина;
	Статус = "Заполнение/обновление данных организаций";
	Объект.Организации.Очистить();
	ЭтаФорма.ОбновитьОтображениеДанных();
	ЗаполнитьДанныеНаСервере();
	Статус = "Данные организаций заполнены/обновлены";
	ХодИтерации = ?(организации Или данные, 1, 0) + ?(данные, 1, 0) + ?(пакет, 1, 0) + ?(загрузка, 1, 0);
	УправлениеФормой();

КонецПроцедуры

&НаКлиенте
Процедура Запустить(Команда)

	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Запуск автоматического выполнения с интервалом - " + Формат(Объект.Интервал, "ДЛФ=T; ДП='Не указан'");
	Сообщение.Сообщить();
	
	Интервал = Объект.Интервал - Дата("00010101");
	
	ВыполнитьПакетноеЗадание();
	
	ПодключитьОбработчикОжидания("ВыполнитьПакетноеЗадание", Интервал, Истина);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНаСервере( ЭтоОбновление = Ложь ) Экспорт

	Для каждого СтрокаОрганизации Из Объект.Организации Цикл
		СтрокаОрганизации.Загружать = Ложь;
		//СтрокаОрганизации.Граница = СтрокаОрганизации.НоваяГраница;
	КонецЦикла;
	
	ЗапросОрганизаций = Новый Запрос;
	ЗапросОрганизаций.УстановитьПараметр("ДатаВозможностиПолученияДокументов", ТекущаяДатаСеанса() - 24 * 60 * 60);
	ЗапросОрганизаций.Текст = "ВЫБРАТЬ
	|	ПараметрыАвторизацииНаСервере.Организация,
	|	ГраницыНомеровВходящие.Граница КАК НоваяГраница,
	|	ЕСТЬNULL(НомераДляВыгрузки.ДокументовВыгрузить, 0) КАК ДокументовВыгрузить,
	|	ЕСТЬNULL(НомераДляЗагрузки.ДокументовЗагрузить, 0) КАК ДокументовЗагрузить,
	|	ЕСТЬNULL(НомераДляЗагрузки.ДокументовНевозможноЗагрузить, 0) КАК ДокументовНевозможноЗагрузить,
	|	ЕСТЬNULL(СтатусыДляЗагрузки.СтатусыЗагрузить, 0) КАК СтатусыЗагрузитьИсходящих,
	|	ЕСТЬNULL(СтатусыДляЗагрузкиВходящие.СтатусыЗагрузить, 0) КАК СтатусыЗагрузить,
	|	ЕСТЬNULL(НомераДляПодтверждения.ДокументовПодтвердить, 0) КАК ДокументовПодтвердить,
	|	ЕСТЬNULL(НомераДляВыгрузки.ДокументовНевозможноВыгрузить, 0) КАК ДокументовНевозможноВыгрузить
	|ИЗ
	|	РегистрСведений.ПараметрыАвторизацииНаСервере КАК ПараметрыАвторизацииНаСервере
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыНомеровВходящие КАК ГраницыНомеровВходящие
	|		ПО ПараметрыАвторизацииНаСервере.Организация = ГраницыНомеровВходящие.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НомераДляВыгрузки.Организация КАК Организация,
	|			КОЛИЧЕСТВО(НомераДляВыгрузки.Номер) КАК ДокументовВыгрузить,
	|			СУММА(ВЫБОР
	|					КОГДА НомераДляВыгрузки.КоличествоВыгрузок >= НомераДляВыгрузки.КоличествоОбновлений
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ДокументовНевозможноВыгрузить
	|		ИЗ
	|			РегистрСведений.НомераДляВыгрузки КАК НомераДляВыгрузки
	|		ГДЕ
	|			НЕ НомераДляВыгрузки.НетДокумента
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НомераДляВыгрузки.Организация) КАК НомераДляВыгрузки
	|		ПО ПараметрыАвторизацииНаСервере.Организация = НомераДляВыгрузки.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НомераДляЗагрузки.Организация КАК Организация,
	|			КОЛИЧЕСТВО(НомераДляЗагрузки.Номер) КАК ДокументовЗагрузить,
	|			СУММА(ВЫБОР
	|					КОГДА НомераДляЗагрузки.ДатаЗагрузки > &ДатаВозможностиПолученияДокументов
	|						ТОГДА 1
	|					ИНАЧЕ 0
	|				КОНЕЦ) КАК ДокументовНевозможноЗагрузить
	|		ИЗ
	|			РегистрСведений.НомераДляЗагрузки КАК НомераДляЗагрузки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НомераДляЗагрузки.Организация) КАК НомераДляЗагрузки
	|		ПО ПараметрыАвторизацииНаСервере.Организация = НомераДляЗагрузки.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыДляЗагрузки.Организация КАК Организация,
	|			КОЛИЧЕСТВО(СтатусыДляЗагрузки.Номер) КАК СтатусыЗагрузить
	|		ИЗ
	|			РегистрСведений.СтатусыДляЗагрузки КАК СтатусыДляЗагрузки
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтатусыДляЗагрузки.Организация) КАК СтатусыДляЗагрузки
	|		ПО ПараметрыАвторизацииНаСервере.Организация = СтатусыДляЗагрузки.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СтатусыДляЗагрузкиВходящие.Организация КАК Организация,
	|			КОЛИЧЕСТВО(СтатусыДляЗагрузкиВходящие.Номер) КАК СтатусыЗагрузить
	|		ИЗ
	|			РегистрСведений.СтатусыДляЗагрузкиВходящие КАК СтатусыДляЗагрузкиВходящие
	|		
	|		СГРУППИРОВАТЬ ПО
	|			СтатусыДляЗагрузкиВходящие.Организация) КАК СтатусыДляЗагрузкиВходящие
	|		ПО ПараметрыАвторизацииНаСервере.Организация = СтатусыДляЗагрузкиВходящие.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НомераДляПодтверждения.Организация КАК Организация,
	|			КОЛИЧЕСТВО(НомераДляПодтверждения.Номер) КАК ДокументовПодтвердить
	|		ИЗ
	|			РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НомераДляПодтверждения.Организация) КАК НомераДляПодтверждения
	|		ПО ПараметрыАвторизацииНаСервере.Организация = НомераДляПодтверждения.Организация";
	
	ВыборкаОрганизаций = ЗапросОрганизаций.Выполнить().Выбрать();
	Отбор = Новый Структура;
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		Отбор.Вставить("Организация", ВыборкаОрганизаций.Организация);
		СтрокиОрганизации = Объект.Организации.НайтиСтроки(Отбор);
		Если СтрокиОрганизации.Количество() Тогда
			СтрокаОрганизации = СтрокиОрганизации[0];
		ИначеЕсли Не ЭтоОбновление Или Объект.АвтоматическоеУправлениеФлагами Тогда
			СтрокаОрганизации = Объект.Организации.Добавить();
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаОрганизации, ВыборкаОрганизаций);
		СтрокаОрганизации.Загружать = ( Не ЭтоОбновление Или Объект.АвтоматическоеУправлениеФлагами );
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИтерацию(Команда) Экспорт

	загрузка = Истина;
	
	Объект.Итерация = Объект.Итерация + 1;
	
	Статус = "Выполнение итерации обмена данными №" + Объект.Итерация;
	ХодИтерации = ?(организации Или данные, 1, 0) + ?(данные, 1, 0) + ?(пакет, 1, 0) + ?(загрузка, 1, 0);
	ЭтаФорма.ОбновитьОтображениеДанных();
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Начало итерации №" + Объект.Итерация + ": " + ТекущаяДата();
	Сообщение.Сообщить();
	Итерация();
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Окончание итерации №" + Объект.Итерация + ": " + ТекущаяДата();
	Сообщение.Сообщить();
	Если Объект.ПроверятьНеобходимостьОбновленияСтатусов И Объект.Итерация - Объект.ПроверятьНеобходимостьОбновленияСтатусовЧерез > Объект.ПоследняяПроверкаСтатусов Тогда
		ОтразитьНомераДляОбновленияСтатусов(Неопределено);
		Объект.ПоследняяПроверкаСтатусов = Объект.Итерация;
	КонецЕсли;
	Статус = "Итерация обмена данными №" + Объект.Итерация + " выполнена";
	организации = Ложь;
	данные = Ложь;
	пакет = Ложь;
	загрузка = Ложь;
	ХодИтерации = ?(организации Или данные, 1, 0) + ?(данные, 1, 0) + ?(пакет, 1, 0) + ?(загрузка, 1, 0);
	УправлениеФормой();

КонецПроцедуры //ВыполнитьИтерацию

&НаКлиенте
Процедура Итерация()

	Перем ТаблицаОрганизацийЗагрузка;
	
	Если Не Объект.РежимРаботыНаСервере Тогда
		СтрокиОрганизаций = Объект.Организации.НайтиСтроки(Новый Структура("Загружать", Истина));
		//Если СтрокиОрганизаций.Количество() = Объект.Организации.Количество() Тогда
		//	мОрганизации = Неопределено
		//Иначе
		//	мОрганизации = Новый Массив;
		//	Для каждого СтрокаОрганизации Из СтрокиОрганизаций Цикл
		//		мОрганизации.Добавить(СтрокаОрганизации.Организация)
		//	КонецЦикла;
		//КонецЕсли;
		//ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(Объект.КоличествоДокументовВПакете, мОрганизации, ТаблицаОрганизацийЗагрузка, Объект.ПолучитьНомера, Объект.ЗагрузитьДокументы, Объект.ЗагрузитьСтатусы,
		//											Объект.ПодтвердитьДокументы, Объект.ВыгрузитьДокументы, Объект.ЗагрузитьСтатусыИсходящих, Объект.ДобавлятьСобытияВЖурналРегистрации);
		ТаблицаОрганизаций = Новый ТаблицаЗначений;
		ТаблицаОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаОрганизаций.Колонки.Добавить("ПолучитьНомера", Новый ОписаниеТипов("Булево"));
		ТаблицаОрганизаций.Колонки.Добавить("ЗагрузитьДокументы", Новый ОписаниеТипов("Булево"));
		ТаблицаОрганизаций.Колонки.Добавить("ЗагрузитьСтатусы", Новый ОписаниеТипов("Булево"));
		ТаблицаОрганизаций.Колонки.Добавить("ПодтвердитьДокументы", Новый ОписаниеТипов("Булево"));
		ТаблицаОрганизаций.Колонки.Добавить("ВыгрузитьДокументы", Новый ОписаниеТипов("Булево"));
		ТаблицаОрганизаций.Колонки.Добавить("ЗагрузитьСтатусыИсходящих", Новый ОписаниеТипов("Булево"));
		Для каждого цСтрока Из СтрокиОрганизаций Цикл
			НоваяСтрока = ТаблицаОрганизаций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, цСтрока);
		КонецЦикла;
		ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(Объект.КоличествоДокументовВПакете, ТаблицаОрганизаций, ТаблицаОрганизацийЗагрузка, Объект.ПолучитьНомера, Объект.ЗагрузитьДокументы, Объект.ЗагрузитьСтатусы,
													Объект.ПодтвердитьДокументы, Объект.ВыгрузитьДокументы, Объект.ЗагрузитьСтатусыИсходящих, Объект.ДобавлятьСобытияВЖурналРегистрации);
	Иначе
		ЗагрузитьВходящиеДокументыСервер(ТаблицаОрганизацийЗагрузка)
	КонецЕсли;
	
	Если ТаблицаОрганизацийЗагрузка <> Неопределено Тогда
		ОбновитьДанныеВТаблицеОрганизаций(ТаблицаОрганизацийЗагрузка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВходящиеДокументыСервер(ТаблицаОрганизацийЗагрузка = Неопределено) Экспорт

	СтрокиОрганизаций = Объект.Организации.НайтиСтроки(Новый Структура("Загружать", Истина));
	//Если СтрокиОрганизаций.Количество() = Объект.Организации.Количество() Тогда
	//	мОрганизации = Неопределено
	//Иначе
	//	мОрганизации = Новый Массив;
	//	Для каждого СтрокаОрганизации Из СтрокиОрганизаций Цикл
	//		мОрганизации.Добавить(СтрокаОрганизации.Организация)
	//	КонецЦикла;
	//КонецЕсли;
	//
	//ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(Объект.КоличествоДокументовВПакете, мОрганизации, ТаблицаОрганизацийЗагрузка, Объект.ПолучитьНомера, Объект.ЗагрузитьДокументы, Объект.ЗагрузитьСтатусы,
	//											Объект.ПодтвердитьДокументы, Объект.ВыгрузитьДокументы, Объект.ЗагрузитьСтатусыИсходящих, Объект.ДобавлятьСобытияВЖурналРегистрации);
	
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ТаблицаОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОрганизаций.Колонки.Добавить("ПолучитьНомера", Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ЗагрузитьДокументы", Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ЗагрузитьСтатусы", Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ПодтвердитьДокументы", Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ВыгрузитьДокументы", Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизаций.Колонки.Добавить("ЗагрузитьСтатусыИсходящих", Новый ОписаниеТипов("Булево"));
	Для каждого цСтрока Из СтрокиОрганизаций Цикл
		НоваяСтрока = ТаблицаОрганизаций.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, цСтрока);
	КонецЦикла;
	ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(Объект.КоличествоДокументовВПакете, ТаблицаОрганизаций, ТаблицаОрганизацийЗагрузка, Объект.ПолучитьНомера, Объект.ЗагрузитьДокументы, Объект.ЗагрузитьСтатусы,
												Объект.ПодтвердитьДокументы, Объект.ВыгрузитьДокументы, Объект.ЗагрузитьСтатусыИсходящих, Объект.ДобавлятьСобытияВЖурналРегистрации);
	
	Если ТаблицаОрганизацийЗагрузка <> Неопределено Тогда
		ОбновитьДанныеВТаблицеОрганизаций(ТаблицаОрганизацийЗагрузка);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СформироватьПакет() Экспорт

	Объект.Организации.Сортировать("Загружать Убыв, Очередь Убыв");
	
	Очередь = 0;
	
	Для каждого СтрокаОрганизации Из Объект.Организации Цикл
		
		Если Не СтрокаОрганизации.Загружать Тогда
			//Прервать;
			Продолжить;
		КонецЕсли;
		
		// устанавливаем флаги обмена по первой строке пакета
		Если Не Очередь Тогда
			
			Очередь = СтрокаОрганизации.Очередь;//?( СтрокаОрганизации.Очередь <> 1 И СтрокаОрганизации.Очередь < Объект.КоличествоДокументовВПакете, Объект.КоличествоДокументовВПакете, СтрокаОрганизации.Очередь );
			Если Объект.АвтоматическоеУправлениеФлагами Тогда
				Объект.ПолучитьНомера            = СтрокаОрганизации.ПолучитьНомера;
				Объект.ЗагрузитьДокументы        = СтрокаОрганизации.ЗагрузитьДокументы;
				Объект.ЗагрузитьСтатусы          = СтрокаОрганизации.ЗагрузитьСтатусы;
				Объект.ПодтвердитьДокументы      = СтрокаОрганизации.ПодтвердитьДокументы;
				Объект.ВыгрузитьДокументы        = СтрокаОрганизации.ВыгрузитьДокументы;
				Объект.ЗагрузитьСтатусыИсходящих = СтрокаОрганизации.ЗагрузитьСтатусыИсходящих;
			КонецЕсли;
			
		Иначе
			
			// включаем для обмена если нужно загржужать те же данные, что и в очереди, а так же если проходит по условию очереди
			//СтрокаОрганизации.Загружать = ( Не СтрокаОрганизации.ПропуститьИтераций И Окр( Очередь + Очередь * Объект.ПорогДляВключенияВЗагрузку / 100, 0 ) >= СтрокаОрганизации.Очередь );
			СтрокаОрганизации.Загружать = ( Не СтрокаОрганизации.ПропуститьИтераций И ( СтрокаОрганизации.Очередь >= ( Очередь - Объект.ПорогДляВключенияВЗагрузку ) ) );
			
			Если Объект.АвтоматическоеУправлениеФлагами И СтрокаОрганизации.Загружать Тогда
				Объект.ПолучитьНомера            = ( Объект.ПолучитьНомера Или СтрокаОрганизации.ПолучитьНомера );
				Объект.ЗагрузитьДокументы        = ( Объект.ЗагрузитьДокументы Или СтрокаОрганизации.ЗагрузитьДокументы );
				Объект.ЗагрузитьСтатусы          = ( Объект.ЗагрузитьСтатусы Или СтрокаОрганизации.ЗагрузитьСтатусы );
				Объект.ПодтвердитьДокументы      = ( Объект.ПодтвердитьДокументы Или СтрокаОрганизации.ПодтвердитьДокументы );
				Объект.ВыгрузитьДокументы        = ( Объект.ВыгрузитьДокументы Или СтрокаОрганизации.ВыгрузитьДокументы );
				Объект.ЗагрузитьСтатусыИсходящих = ( Объект.ЗагрузитьСтатусыИсходящих Или СтрокаОрганизации.ЗагрузитьСтатусыИсходящих );
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеВТаблицеОрганизаций(ТаблицаОрганизацийЗагрузка) Экспорт

	ТекДата = ТекущаяДата();
	Отбор = Новый Структура;
	
	Для каждого СтрокаЗагрузки Из ТаблицаОрганизацийЗагрузка Цикл
		
		Отбор.Вставить("Организация", СтрокаЗагрузки.Организация);
		СтрокиОрганизаций = Объект.Организации.НайтиСтроки(Отбор);
		Если Не Отбор.Количество() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОрганизации = СтрокиОрганизаций[0];
		СтрокаОрганизации.УспешнаяАвторизация                 = ( СтрокаЗагрузки.УспешнаяАвторизация И СтрокаЗагрузки.УспешноеПодключение );
		Если Не СтрокаОрганизации.УспешнаяАвторизация Тогда
			СтрокаОрганизации.ПропуститьИтераций = Объект.ПовторнаяАвторизацияИПодключениеЧерез;
			СтрокаОрганизации.Загружать = Ложь;
		КонецЕсли;
		СтрокаОрганизации.Граница                             = ТекДата;
		СтрокаОрганизации.ЗагруженоДокументовПоследнее        = СтрокаЗагрузки.ЗагруженоДокументов;
		СтрокаОрганизации.ЗагруженоДокументовВсего            = СтрокаОрганизации.ЗагруженоДокументовВсего + СтрокаОрганизации.ЗагруженоДокументовПоследнее;
		СтрокаОрганизации.ЗагруженоСтатусовПоследнее          = СтрокаЗагрузки.ЗагруженоСтатусов;
		СтрокаОрганизации.ЗагруженоСтатусовВсего              = СтрокаОрганизации.ЗагруженоСтатусовВсего + СтрокаОрганизации.ЗагруженоСтатусовПоследнее;
		СтрокаОрганизации.ЗагруженоНомеровПоследнее           = СтрокаЗагрузки.ЗагруженоНомеров;
		СтрокаОрганизации.ЗагруженоНомеровВсего               = СтрокаОрганизации.ЗагруженоНомеровВсего + СтрокаОрганизации.ЗагруженоНомеровПоследнее;
		СтрокаОрганизации.ПодтвержденоДокументовПоследнее     = СтрокаЗагрузки.ПодтвержденоДокументов;
		СтрокаОрганизации.ПодтвержденоДокументовВсего         = СтрокаОрганизации.ПодтвержденоДокументовВсего + СтрокаОрганизации.ПодтвержденоДокументовПоследнее;
		СтрокаОрганизации.ВыгруженоДокументовПоследнее        = СтрокаЗагрузки.ВыгруженоДокументов;
		СтрокаОрганизации.ВыгруженоДокументовВсего            = СтрокаОрганизации.ВыгруженоДокументовВсего + СтрокаОрганизации.ВыгруженоДокументовПоследнее;
		СтрокаОрганизации.ЗагруженоСтатусовИсходящихПоследнее = СтрокаЗагрузки.ЗагруженоСтатусовИсходящих;
		СтрокаОрганизации.ЗагруженоСтатусовИсходящихВсего     = СтрокаОрганизации.ЗагруженоСтатусовИсходящихВсего + СтрокаОрганизации.ЗагруженоСтатусовИсходящихПоследнее;
		
		// если были ошибки подтверждения, то отразим необходимость повторной загрузки документов
		Если СтрокаЗагрузки.ОшибкиПодтверждения Тогда
			ЭСЧФобщий.ОтразитьНомераДляЗагрузкиПоУсловиюОшибокПриПодтверждении( СтрокаОрганизации.Организация );
		КонецЕсли;
		
	КонецЦикла;
	
	Итоги = "номеров - " + Объект.Организации.Итог("ЗагруженоНомеровВсего") + ", документов - " + Объект.Организации.Итог("ЗагруженоДокументовВсего") + ", статусов - " + Объект.Организации.Итог("ЗагруженоСтатусовВсего")
			+ ", подтверждено - " + Объект.Организации.Итог("ПодтвержденоДокументовВсего") + ", выгружено - " + Объект.Организации.Итог("ВыгруженоДокументовВсего") + ", статусов исх. - " + Объект.Организации.Итог("ЗагруженоСтатусовИсходящихВсего");

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДляЗагрузки() Экспорт

	Если Не организации Тогда
		ЗаполнитьДанныеНаСервере(Истина)
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	ИнтервалПростоя = Объект.ИнтервалПростоя - Дата("00010101");
	
	ИтогоДокументовЗагрузить       = Объект.Организации.Итог("ДокументовЗагрузить") - Объект.Организации.Итог("ДокументовНевозможноЗагрузить");
	ИтогоДокументовПодтвердить     = Объект.Организации.Итог("ДокументовПодтвердить");
	ИтогоДокументовВыгрузить       = Объект.Организации.Итог("ДокументовВыгрузить") - Объект.Организации.Итог("ДокументовНевозможноВыгрузить");
	ИтогоСтатусыЗагрузить          = Объект.Организации.Итог("СтатусыЗагрузить");
	ИтогоСтатусыЗагрузитьИсходящих = Объект.Организации.Итог("СтатусыЗагрузитьИсходящих");
	
	СтрокиАвторизация = Объект.Организации.НайтиСтроки( Новый Структура("УспешнаяАвторизация", Ложь) );
	
	Для каждого СтрокаОрганизации Из Объект.Организации Цикл
		
		СтрокаОрганизации.ПропуститьИтераций = ?(СтрокаОрганизации.ПропуститьИтераций, СтрокаОрганизации.ПропуститьИтераций - 1, 0);
		
		Если СтрокаОрганизации.ПропуститьИтераций Тогда
			ИтогоДокументовЗагрузить       = ИтогоДокументовЗагрузить - СтрокаОрганизации.ДокументовЗагрузить - СтрокаОрганизации.ДокументовНевозможноЗагрузить;
			ИтогоДокументовПодтвердить     = ИтогоДокументовПодтвердить - СтрокаОрганизации.ДокументовПодтвердить;
			ИтогоДокументовВыгрузить       = ИтогоДокументовВыгрузить - СтрокаОрганизации.ДокументовВыгрузить - СтрокаОрганизации.ДокументовЗагрузить - СтрокаОрганизации.ДокументовНевозможноВыгрузить;
			ИтогоСтатусыЗагрузить          = ИтогоСтатусыЗагрузить - СтрокаОрганизации.СтатусыЗагрузить;
			ИтогоСтатусыЗагрузитьИсходящих = ИтогоСтатусыЗагрузитьИсходящих - СтрокаОрганизации.СтатусыЗагрузитьИсходящих;
		КонецЕсли;
		
	КонецЦикла;
	
	ИтогоКоличество = ИтогоДокументовЗагрузить + ИтогоДокументовПодтвердить + ИтогоДокументовВыгрузить + ИтогоСтатусыЗагрузить + ИтогоСтатусыЗагрузитьИсходящих;
	
	Для каждого СтрокаОрганизации Из Объект.Организации Цикл
		
		цДокументовЗагрузить = СтрокаОрганизации.ДокументовЗагрузить - СтрокаОрганизации.ДокументовНевозможноЗагрузить;
		цДокументовВыгрузить = СтрокаОрганизации.ДокументовВыгрузить - СтрокаОрганизации.ДокументовНевозможноВыгрузить;
		// рассчёт очереди на загрузку данных
		Если Не ЗначениеЗаполнено(СтрокаОрганизации.НоваяГраница) И Не СтрокаОрганизации.ПропуститьИтераций Тогда
			СтрокаОрганизации.Очередь = 100;
		ИначеЕсли ИнтервалПростоя И ТекДата - СтрокаОрганизации.Граница >= ИнтервалПростоя Тогда
			СтрокаОрганизации.Очередь = 100;
		ИначеЕсли ИтогоКоличество = 0 Тогда
			СтрокаОрганизации.Очередь = 100;
		Иначе
			ИтогоКоличествоПоСтроке = цДокументовЗагрузить + СтрокаОрганизации.ДокументовПодтвердить + цДокументовВыгрузить + СтрокаОрганизации.СтатусыЗагрузить + СтрокаОрганизации.СтатусыЗагрузитьИсходящих;
			//СтрокаОрганизации.Очередь = ИтогоКоличество - ИтогоКоличествоПоСтроке + 1;
			СтрокаОрганизации.Очередь = Окр( ИтогоКоличествоПоСтроке / ИтогоКоличество * 100, 2 );
		КонецЕсли;
		
		// установка флагов обмена
		СтрокаОрганизации.Загружать = ( Объект.АвтоматическоеУправлениеФлагами И Не СтрокаОрганизации.ПропуститьИтераций Или Не Объект.АвтоматическоеУправлениеФлагами И СтрокаОрганизации.Загружать );
		СтрокаОрганизации.ПолучитьНомера = ( Объект.АвтоматическоеУправлениеФлагами И Не цДокументовЗагрузить И Не СтрокаОрганизации.СтатусыЗагрузить Или Не Объект.АвтоматическоеУправлениеФлагами И Объект.ПолучитьНомера );
		СтрокаОрганизации.ЗагрузитьДокументы = ( Объект.АвтоматическоеУправлениеФлагами И цДокументовЗагрузить Или Не Объект.АвтоматическоеУправлениеФлагами И Объект.ЗагрузитьДокументы );
		СтрокаОрганизации.ЗагрузитьСтатусы = ( Объект.АвтоматическоеУправлениеФлагами И СтрокаОрганизации.СтатусыЗагрузить Или Не Объект.АвтоматическоеУправлениеФлагами И Объект.ЗагрузитьСтатусы );
		СтрокаОрганизации.ПодтвердитьДокументы = ( Объект.АвтоматическоеУправлениеФлагами И СтрокаОрганизации.ДокументовПодтвердить Или Не Объект.АвтоматическоеУправлениеФлагами И Объект.ПодтвердитьДокументы );
		СтрокаОрганизации.ВыгрузитьДокументы = ( Объект.АвтоматическоеУправлениеФлагами И цДокументовВыгрузить Или Не Объект.АвтоматическоеУправлениеФлагами И Объект.ВыгрузитьДокументы );
		СтрокаОрганизации.ЗагрузитьСтатусыИсходящих = ( Объект.АвтоматическоеУправлениеФлагами И СтрокаОрганизации.СтатусыЗагрузитьИсходящих Или Не Объект.АвтоматическоеУправлениеФлагами И Объект.ЗагрузитьСтатусыИсходящих );
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПакетноеЗадание() Экспорт

	Если ЗначениеЗаполнено(Объект.Прекратить) И ТекущаяДата() >= Объект.Прекратить Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Задание остановлено по условию (время:" + Объект.Прекратить + " )";
		Сообщение.Сообщить();
		Статус = "выполнение задания остановлено по условию (время:" + ТекущаяДата() + " )";
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеДляЗагрузки1(Неопределено);
	ЭтаФорма.ОбновитьОтображениеДанных();
	СформироватьПакет1(Неопределено);
	ЭтаФорма.ОбновитьОтображениеДанных();
	ВыполнитьИтерацию(Неопределено);
	ЭтаФорма.ОбновитьОтображениеДанных();
	
	Интервал = Объект.Интервал - Дата("00010101");
	Статус = "следующая итерация <" + Формат(ТекущаяДата() + Интервал, "ДЛФ=DDT; ДП=-") + ">";
	
	ПодключитьОбработчикОжидания("ВыполнитьПакетноеЗадание", Интервал, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Задание остановлено по пользователем (время:" + ТекущаяДата() + " )";
	Сообщение.Сообщить();
	Статус = "Выполнение задания остановлено пользователем";
	ОтключитьОбработчикОжидания("ВыполнитьПакетноеЗадание");
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.КоличествоДокументовВПакете = 100;
	Объект.АвтоматическоеУправлениеФлагами = Истина;
	Объект.РежимРаботыНаСервере = ЭСЧФсервер.РежимРаботыПоУмолчаниюЭСЧФ();
	Если Объект.РежимРаботыНаСервере = 2 Тогда
		Объект.РежимРаботыНаСервере = 0
	КонецЕсли;
	Объект.ПовторнаяАвторизацияИПодключениеЧерез = 5;
	Объект.Интервал = Дата(1,1,1,0,15,0);
	Объект.ИнтервалПростоя = Дата(1,1,1,1,0,0);
	Объект.ПорогДляВключенияВЗагрузку = 20;
	Объект.ПроверятьНеобходимостьОбновленияСтатусов = Истина;
	Объект.ПроверятьНеобходимостьОбновленияСтатусовЧерез = 10;
	Объект.ДобавлятьСобытияВЖурналРегистрации = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	УправлениеФормой()

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	ОтключитьОбработчикОжидания("ВыполнитьПакетноеЗадание");
КонецПроцедуры
