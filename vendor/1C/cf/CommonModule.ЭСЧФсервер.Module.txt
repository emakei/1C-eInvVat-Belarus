
// Производит поиск сертификата в базе по серийному номеру
//
// Параметры:
//  СерийныйНомер  - ДвоичныеДанные - серийный номер сертификата
//  ВладелецСертификата  - СправочникСсылка - владелец сертификата
//
// Возвращаемое значение:
//   СправочникСсылка.СертификатыКриптографии, Неопределено   - найденный сертификат или неопределено, если не найден
//
Функция НайтиСертификат(СерийныйНомер, ВладелецСертификата) Экспорт

    Выборка = Справочники.СертификатыКриптографии.Выбрать(, ВладелецСертификата);
    Пока Выборка.Следующий() Цикл
        ДвоичныеДанные = Выборка.СерийныйНомер.Получить();
        Если ДвоичныеДанные = СерийныйНомер Тогда
            Возврат Выборка.Ссылка    
        КонецЕсли;
    КонецЦикла;
    
    Возврат Неопределено

КонецФункции // НайтиСертификат()

// Устанавливает параметр сеанса "ДоступнаРаботаСВебСервисомЭСЧФ"
//
Процедура УстановитьПараметрыСеансаДляОбменаЭСЧФ() Экспорт

    Если РольДоступна("ПодписаниеИОбменЭСЧФ") Или РольДоступна("ИспользованиеЭСЧФПолный") Тогда
        ПараметрыСеанса.WSurl = СокрЛП(Константы.WSurl.Получить());
    КонецЕсли;
    
    Если РольДоступна("ПодписаниеИОбменЭСЧФ") Или РольДоступна("ИспользованиеЭСЧФ") Или РольДоступна("ИспользованиеЭСЧФПолный") Тогда
        
        XSD = Константы.ПутьКаталогаXSD.Получить();
        Если Не ПустаяСтрока(XSD) И Прав(XSD, 1) <> "\" И Прав(XSD, 1) <> "/" Тогда
            Если Найти(XSD, "\") Тогда
                XSD = XSD + "\"
            Иначе
                XSD = XSD + "/"
            КонецЕсли;
        КонецЕсли;
        ПараметрыСеанса.XSD = XSD;
        
        ПутьКаталогаХраненияВходящихДокументов = Константы.ПутьКаталогаХраненияВходящихДокументов.Получить();
        Если Не ПустаяСтрока(ПутьКаталогаХраненияВходящихДокументов) И Прав(ПутьКаталогаХраненияВходящихДокументов, 1) <> "\" И Прав(ПутьКаталогаХраненияВходящихДокументов, 1) <> "/" Тогда
            Если Найти(ПутьКаталогаХраненияВходящихДокументов, "\") Тогда
                ПутьКаталогаХраненияВходящихДокументов = ПутьКаталогаХраненияВходящихДокументов + "\"
            Иначе
                ПутьКаталогаХраненияВходящихДокументов = ПутьКаталогаХраненияВходящихДокументов + "/"
            КонецЕсли;
        КонецЕсли;
        ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов = ПутьКаталогаХраненияВходящихДокументов;
        
        ПараметрыСеанса.СохранениеДокументов = Константы.СохранениеДокументов.Получить();
        
        РасположениеВходящихФайлов = Константы.РасположениеВходящихФайлов.Получить();
        Если Не РасположениеВходящихФайлов И ПараметрыСеанса.СохранениеДокументов Тогда
            РасположениеВходящихФайлов = 1
        КонецЕсли;
        ПараметрыСеанса.РасположениеВходящихФайлов = РасположениеВходящихФайлов;
        
        ПараметрыСеанса.РежимРаботыПоУмолчаниюЭСЧФ = Константы.РежимРаботыПоУмолчаниюЭСЧФ.Получить()
        
    КонецЕсли;

КонецПроцедуры // УстановитьПараметрСеансаДоступноПодписаниеИОбменЭСЧФ

// Возвращяет номер для нового электронного счета-фактуры по НДС (максимальный номер с начала года + 1)
//
// Параметры:
//  Год  - Число(4,0) - год счета-фактуры
//  Объект  - Строка(9) - УНП субъекта хозяйствования
//  ЛеваяГраница  - Число(10,0) - минимальный номер поиска (включительно)
//  ПраваяГраница  - Число(10,0) - максимальный номер поиска (включительно)
//
// Возвращаемое значение:
//   Число(10,0)   - номер нового электронного счета-фактуры по НДС
//
Функция ПолучитьНомерНовогоЭСЧФ(Год, Объект, ЛеваяГраница = 1, ПраваяГраница = 9999999999) Экспорт

    Если ЛеваяГраница > ПраваяГраница Тогда
        ВызватьИсключение "ПолучитьНомерНовогоЭСЧФ(): неверный диапазон номеров"
    КонецЕсли;
    Запрос = Новый Запрос("ВЫБРАТЬ
    | МАКСИМУМ(Номера.Номер) КАК Номер
    |ИЗ
    | РегистрСведений.НомераЭСЧФ КАК Номера
    |ГДЕ
    | Номера.Год = &Год
    | И Номера.Объект = &Объект
    | И Номера.Номер >= &ЛеваяГраница
    | И Номера.Номер <= &ПраваяГраница");
    Запрос.УстановитьПараметр("Год",           Год);
    Запрос.УстановитьПараметр("Объект",        Объект);
    Запрос.УстановитьПараметр("ЛеваяГраница",  ЛеваяГраница);
    Запрос.УстановитьПараметр("ПраваяГраница", ПраваяГраница);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    Выборка.Следующий();
    Если Выборка.Номер = Null Тогда
        Возврат ЛеваяГраница
    ИначеЕсли Выборка.Номер = ПраваяГраница Тогда
        Возврат ПраваяГраница
    Иначе
        Возврат ( Выборка.Номер + 1 )
    КонецЕсли;

КонецФункции // ПолучитьНомерНовогоЭСЧФ()

// Заполняет результат проверки в соответствующие переменные
//
// Параметры:
//  Период  - Дата - период проверки
//  Субъект1  - Строка(9) - УНП первого субъекта хозяйствования
//  Субъект2  - Строка(9) - УНП второго субъекта хозяйствования
//
// Возвращаемое значение
//  Булево  - результат проверки
//
Функция Взаимозависимы(Период, Субъект1, Субъект2) Экспорт

    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("Период", Период);
    Запрос.УстановитьПараметр("Объект1", Субъект1);
    Запрос.УстановитьПараметр("Объект2", Субъект2);
    Запрос.Текст = "ВЫБРАТЬ
                   |    МАКСИМУМ(ЕСТЬNULL(Взаимозависимые1.Зависит, Взаимозависимые2.Зависит)) КАК Результат
                   |ИЗ
                   |    РегистрСведений.Взаимозависимые.СрезПоследних(
                   |            &Период,
                   |            Объект1 = &Объект1
                   |                И Объект2 = &Объект2) КАК Взаимозависимые1
                   |        ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.Взаимозависимые.СрезПоследних(
                   |                &Период,
                   |                Объект1 = &Объект2
                   |                    И Объект2 = &Объект1) КАК Взаимозависимые2
                   |        ПО (ИСТИНА)";
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        Возврат Ложь
    Иначе
        Выборка = Результат.Выбрать();
        Выборка.Следующий();
        Возврат ( Выборка.Результат <> Null И Выборка.Результат )
    КонецЕсли;

КонецФункции // Взаимозависимы()

// Возвращает результат проверки, входит ли объект в перечень крупных плательщиков
//
// Параметры:
//  Дата  - Дата - дата проверки
//  УНП  - Строка(9) - УНП субъекта хозяйствования
//
// Возвращаемое значение:
//   Булево   - входит ли объект в перечень крупных плательщиков
//
Функция ВходитВПереченьКрупныхПлательщиков(Дата, УНП) Экспорт

    Срез = РегистрыСведений.ПереченьКрупныхПлательщиков.СрезПоследних(Дата, Новый Структура("Объект", УНП));
    Если Не Срез.Количество() Тогда
        Возврат Ложь
    КонецЕсли;
    Возврат Срез[0].ВходитВПеречень

КонецФункции // ВходитВПереченьКрупныхПлательщиков()

// Функция авторизации в хранилище
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для авторизации
//
// Возвращаемое значение:
//  Булево - результат авторизации
//
Функция ПриАвторизацииПоОрганизации(Организация) Экспорт

	Структура = РегистрыСведений.ПараметрыАвторизацииНаСервере.Получить(Новый Структура("Организация", Организация));
	Если Не ЗначениеЗаполнено(Структура.ПарольКЛичномуКлючу) Или Не ( ЗначениеЗаполнено(Структура.ИдентификаторОткрытогоКлюча) Или ЗначениеЗаполнено(Структура.ОбщееИмя) Или ЗначениеЗаполнено(Структура.ИспользоватьУНП) ) Тогда
		врТекстОшибки = "Не найдены параметры авторизации для организации: " + СокрЛП(Организация);
		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, врТекстОшибки);
		Возврат Ложь
	КонецЕсли;
	
	ПараметрыПодключения = "";
	Если ЗначениеЗаполнено(Структура.ИдентификаторОткрытогоКлюча) Тогда
		ПараметрыПодключения = "PUB_KEY_ID=" + Структура.ИдентификаторОткрытогоКлюча;
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ОбщееИмя) Тогда
		ПараметрыПодключения = ПараметрыПодключения + ";COMMON_NAME=" + Структура.ОбщееИмя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ПарольКЛичномуКлючу) Тогда
		ПараметрыПодключения = ПараметрыПодключения + ";PASSWORD_KEY=" + Структура.ПарольКЛичномуКлючу;
	КонецЕсли;
	Если Структура.ИспользоватьУНП Тогда
		ПараметрыПодключения = ПараметрыПодключения + ";UNP=" + СокрЛП(Организация.ИНН);
	КонецЕсли;
	
	EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
	Если EInvVatService = Неопределено Тогда
		Возврат Ложь
	КонецЕсли;
	
	// авторизация на портале
	EInvVatAuthorized = ( EInvVatService.Login(ПараметрыПодключения, ЭСЧФобщий.ФлагиАвторизации()) = 0 );
	Если Не EInvVatAuthorized Тогда
		врТекстОшибки = "Ошибка авторизации: " + EInvVatService.LastError;
		ЗаписьЖурналаРегистрации("EInvVatService.Login", УровеньЖурналаРегистрации.Ошибка,,, врТекстОшибки);
	КонецЕсли;
	
	Возврат EInvVatAuthorized

КонецФункции // ПриАвторизации

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПриЗавершенииАвторизацииНаСервере
//
// Описание:
//  завершение авторизации на стороне сервера 1С
//
//
// Возвращаемое значение:
//  Булево - признак удачной операции
//
Функция ПриЗавершенииАвторизацииНаСервере() Экспорт

    // получим компоненты доступа к порталу
    EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
    Если EInvVatService = Неопределено Тогда
        Возврат Ложь
    КонецЕсли;
    // завершение поключения к сервису
    EInvVatConnected = ( EInvVatService.Disconnect <> 0 );
    Если EInvVatConnected Тогда
        врТекстОшибки = "Ошибка закрытия подключения: " + EInvVatService.LastError;
        ЗаписьЖурналаРегистрации("EInvVatService.Disconnect", УровеньЖурналаРегистрации.Предупреждение,,, врТекстОшибки);
    КонецЕсли;
    // завершение авторизации
    EInvVatAuthorized = ( EInvVatService.Logout <> 0 );
    Если EInvVatAuthorized Тогда
        врТекстОшибки = "Ошибка при завершении авторизованной сессии: " + EInvVatService.LastError;
        ЗаписьЖурналаРегистрации("EInvVatService.Logout", УровеньЖурналаРегистрации.Предупреждение,,, врТекстОшибки);
    КонецЕсли;
    
    Возврат EInvVatConnected И EInvVatAuthorized

КонецФункции //ПриЗавершенииАвторизацииНаСервере

// Процедура подключении к web-сервису
//
// Возвращаемое значение:
//  Булево - признак удачной операции
//
Функция ПриПодключенииКСервисуНеСервере() Экспорт

    // получим компоненты доступа к порталу
    EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
    Если EInvVatService = Неопределено Тогда
        Возврат Ложь
    КонецЕсли;
    // пытаемся подключиться к сервису
    EInvVatConnected = ( EInvVatService.Connect(ПараметрыСеанса.WSurl) = 0 );
    Если Не EInvVatConnected Тогда
        врТекстОшибки = "Ошибка подключения: " + EInvVatService.LastError;
        ЗаписьЖурналаРегистрации("EInvVatService.Connect", УровеньЖурналаРегистрации.Предупреждение,,, врТекстОшибки);
    КонецЕсли;
    
    Возврат EInvVatConnected;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьВремяИзUtc
//
// Описание:
//  преобразует строку UTC во внутреннее представление
//
//
// Параметры (название, тип, дифференцированное значение)
//  ДатаСтр - Строка - строка UTC
//
// Возвращаемое значение:
//
Функция ПолучитьВремяИзUtc(ДатаСтр) Экспорт

    // дата из строки
    Дата = Лев(ДатаСтр, 10);
    Год = Число(Лев(Дата, 4));
    Месяц = Число(Сред(Дата, 6, 2));
    День = Число(Прав(Дата, 2));
    // время из строки
    Время = Сред(ДатаСтр, 12, 8);
    Часы = Число(Лев(Время, 2));
    Минуты = Число(Сред(Время, 4, 2));
    Секунды = Число(Прав(Время, 2));
    // часовой пояс из строки
    ЧасовойПояс = Прав(ДатаСтр, СтрДлина(ДатаСтр) - 19);
    // преобразуем во внутреннее представление и возвращаем
	Если ПустаяСтрока(ЧасовойПояс) Тогда
		Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды)
	Иначе
		Возврат УниверсальноеВремя(Дата(Год, Месяц, День, Часы, Минуты, Секунды), ЧасовойПояс)
	КонецЕсли;

КонецФункции //ПолучитьВремяИзUtc

// Возвращает результат проверки доступности работы с ЭЦП и EInvVatService
//
// Возвращаемое значение:
//   Булево   - результат проверки доступности работы с ЭЦП и EInvVatService
//
Функция ДоступноПодписаниеИОбменЭСЧФ() Экспорт

    Возврат ( РольДоступна("ПодписаниеИОбменЭСЧФ") Или РольДоступна("ИспользованиеЭСЧФПолный") )
            И ЗначениеЗаполнено(Константы.WSurl.Получить())

КонецФункции // ДоступноПодписаниеИОбменЭСЧФ()

////////////////////////////////////////////////////////////////////////////////
//
// Функция ДоступнаКомпонентаОбменаИПодписания
//
// Описание:
//  возвращяет результат проверки доступности компоненты обмена данными и подписания на сервере 1С
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ДоступнаКомпонентаОбменаИПодписания() Экспорт
    Возврат ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ() <> Неопределено
КонецФункции //ДоступнаКомпонентаОбменаИПодписания

////////////////////////////////////////////////////////////////////////////////
//
// Функция ДоступнаВыгрузкаДокументовВФайлы
//
// Описание:
//  проверяет на сервере возможность выгрузки документов во внешние файлы
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ДоступнаВыгрузкаДокументовВФайлы() Экспорт
    
    Если Не РольДоступна("ИспользованиеЭСЧФ") И Не РольДоступна("ИспользованиеЭСЧФПолный") Тогда
        Возврат Ложь
    КонецЕсли;
    
    Каталог = Новый Файл(ПараметрыСеанса.XSD);
    Возврат Каталог.Существует() И Каталог.ЭтоКаталог()
    
КонецФункции //ДоступнаВыгрузкаДокументовВФайлы

// Формирует xml-документ, подписывает, и отправляет на портал
//
// Параметры:
//  Данные  - ДокументСсылка.ЭлектронныйСчетФактураВыданный, Структура - данные для работы
//  Отказ  - Булево - признак ошибки при обработке
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//  ФабрикаЭСЧФ  - ФабрикаXDTO - фабрика XDTO на основании схемы ИМНС или неопределено,
//                                 если не верны входные данные или файл схемы не найден
//  ОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  Товары  - Коллекция - таблица по товарам
//  Грузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  Грузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  Документы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  ЭтоИсходящийДокумент  - Булево - признак исходящего документа
//  Принят  - Булево - был ли документ принят или нет
//  ТекстОтвета  - Строка - строка с текстовой информацией ответа сервиса
//  ИмяФайлаОтвета  - Строка - имя файла сохраненной квитанции
//
Процедура СформироватьПодписатьОтправитьДокумент(Данные, Отказ = Ложь, ТекстОшибки = Неопределено, ФабрикаЭСЧФ = Неопределено, ОтправительУНП, Товары
                                                 , Грузоотправители = Неопределено, Грузополучатели = Неопределено, Документы = Неопределено, ЭтоИсходящийДокумент = Истина
                                                 , Принят, ТекстОтвета, ИмяФайлаОтвета = Неопределено) Экспорт

    ЭСЧФобщий.СформироватьПодписатьОтправитьДокумент(Данные, Отказ, ТекстОшибки, ФабрикаЭСЧФ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент, Принят, ТекстОтвета, ИмяФайлаОтвета)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыгрузитьДокументВФайлДиалог
//
// Описание:
//  выгружает электронный счет-фактуру в файл
//
// Параметры (название, тип, дифференцированное значение)
//  Документ - ДокументСсылка.ЭлектронныйСчетФактураВыданный, ДокументСсылка.ЭлектронныйСчетФактураПолученный, Структура
//           - документ для выгрузки
//  ПолноеИмяФайла - Строка - полное имя выгруженного файла
//                            П.С. если требуется непосредственно выгрузить в этот файл, то передать полное имя,
//                            если требуется получить имя файла - пустую строку
//  Отказ  - Булево - признак ошибки при обработке
//  ОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  Товары  - Коллекция - таблица по товарам
//  Грузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  Грузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  Документы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  ЭтоИсходящийДокумент  - Булево - признак исходящего документа
//
Процедура ВыгрузитьДокументВФайлДиалог(Документ, ПолноеИмяФайла = Неопределено, Отказ = Ложь, ОтправительУНП, Товары
                                       , Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент) Экспорт

    ЭСЧФобщий.ВыгрузитьДокументВФайлДиалог(Документ, ПолноеИмяФайла, Отказ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Функция РежимРаботыПоУмолчаниюЭСЧФ
//
// Описание:
//  возвращает значение режима работы по-умолчанию
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Число(1,0) - режим работы
//
Функция РежимРаботыПоУмолчаниюЭСЧФ() Экспорт
    Возврат ?( РольДоступна("ИспользованиеЭСЧФ") Или РольДоступна("ИспользованиеЭСЧФПолный") Или РольДоступна("ПодписаниеИОбменЭСЧФ"), ПараметрыСеанса.РежимРаботыПоУмолчаниюЭСЧФ, 0 )
КонецФункции //РежимРаботыПоУмолчаниюЭСЧФ

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыгрузитьДокументы
//
// Описание:
//  производит выгрузку документов обмена во внешние файлы
//
// Параметры (название, тип, дифференцированное значение)
//  ДокументыОбмена - Массив (элементы: СправочникСсылка.ДокументыОбмена) - массив документов для выгрузки
//  Каталог - Строка(0) - путь выгрузки файлов
//  ИзменятьРасположение - Булево - требуется ли изменить реквизиты элемента (расположение, имя файла)
//                                  или просто выгрузить
//  Ошибки - Строка, Массив - переменная для записи ошибки в случае неудачи
//
Процедура ВыгрузитьДокументы(ДокументыОбмена, Каталог, ИзменятьРасположение = Ложь, Ошибки = Неопределено) Экспорт
    
    Если ТипЗнч(ДокументыОбмена) = Тип("СправочникСсылка.ДокументыОбмена") Тогда
        МассивДокументов = Новый Массив;
        МассивДокументов.Добавить(ДокументыОбмена);
    Иначе
        МассивДокументов = ДокументыОбмена;
    КонецЕсли;
    
    ЭСЧФобщий.ВыгрузитьДокументы(МассивДокументов, Каталог, ИзменятьРасположение, Ошибки);
    
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПодписатьИОтправитьДокументыОбмена
//
// Описание:
//  подписывает и отправляет документы обмена на портал
//
// Параметры (название, тип, дифференцированное значение)
//  ДокументыОбмена - ТаблицаЗначений - описание колонок и получение таблицы - ЭСЧФклиент.ТаблицаДанныхПодтвержденияДокументов() (или ЭСЧФсерверПовтИсп)
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе;
//                     0 - не нужно в любом случае
//                     1 - сохранить в случае получения статуса, отличного от: NOT_FOUND, ERROR
//                     2 - сохранить в любом случае
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Ошибки - Строка, Массив - ошибки операций
//
Процедура ПодписатьИОтправитьДокументыОбмена(ДокументыОбмена, СохранитьДокумент = Неопределено, РасположениеФайлов = Неопределено, Ошибки = Неопределено) Экспорт
	ЭСЧФобщий.ПодписатьИОтправитьДокументыОбмена(ДокументыОбмена, СохранитьДокумент, РасположениеФайлов, Ошибки)
КонецПроцедуры

// Обновляет статус электронного счета-фактуры на портале по номеру
//
// Параметры:
//  Номер  - Строка(25) - номер электронного счета-фактуры
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе;
//                     0 - не нужно в любом случае
//                     1 - сохранить в случае получения статуса, отличного от: NOT_FOUND, ERROR
//                     2 - сохранить в любом случае
//  ДатаСостояния  - Дата - будет записана дата состояния
//  Статус  - ПеречислениеСсылка.СтатусыЭСЧФ - будет записан статус документа
//  ТекстОтвета  - Строка - строка с текстовой информацией ответа сервиса
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//  ЭлектронныйДокумент  - СправочникСсылка.ДокументыОбмена - будет записана ссылка на сохраненный в базе документ обмена
//  ПерезаписыватьИмеющиеся  - Булево - следует ли перезависывать найденный в базе по ИД документ
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Исходящий - Булево - это квитанция исходящего документа
//
Функция ОбновитьДанныеОСтатусеДокумента(Номер, СохранитьДокумент = Неопределено, ДатаСостояния = Неопределено, Статус = Неопределено, ТекстОтвета = Неопределено
										, ТекстОшибки = Неопределено, ЭлектронныйДокумент = Неопределено, ПерезаписыватьИмеющиеся = Ложь, РасположениеФайлов = Неопределено, Исходящий = Истина) Экспорт
	Возврат ЭСЧФобщий.ОбновитьДанныеОСтатусеДокумента(Номер, СохранитьДокумент, ДатаСостояния, Статус, ТекстОтвета, ТекстОшибки, ЭлектронныйДокумент, ПерезаписыватьИмеющиеся, РасположениеФайлов, Исходящий)
КонецФункции

Функция ТаблицаДанныхЗагрузкиДокументовСПортала() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номер",            Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25, ДопустимаяДлина.Фиксированная)));
	Таблица.Колонки.Добавить("ДокументОбмена",   Новый ОписаниеТипов("СправочникСсылка.ДокументыОбмена"));
	Таблица.Колонки.Добавить("ВходящийДокумент", Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйСчетФактураПолученный"));
	
	Возврат Таблица
	
КонецФункции

Функция ТаблицаДанныхПодтвержденияДокументов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйСчетФактураПолученный"));
	Таблица.Колонки.Добавить("ДокументОбмена",      Новый ОписаниеТипов("СправочникСсылка.ДокументыОбмена"));
	Таблица.Колонки.Добавить("ПодписанныйДокумент", Новый ОписаниеТипов("СправочникСсылка.ДокументыОбмена"));
	Таблица.Колонки.Добавить("Принят",              Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Отправлен",           Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Ответ",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОшибкаФайла",         Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Процедура УстановитьПараметрСервисаСервер
//
// Описание:
//  устанавливает значение параметра сервиса обмена данными с по-средствам вызова "SetServiceProperty"
//
// Параметры (название, тип, дифференцированное значение)
//  Отказ  - Булево - признак ошибки операции
//  Ошибки  - Строка, Массив - переменная для записи ошибки
//  Поле  - Строка, Неопределено - к какому элементу относиться ошибка
//
Процедура УстановитьПараметрСервисаСервер( Параметр = "connection.readTimeout", Значение = 100, Отказ = Ложь, Ошибки = Неопределено, Поле = Неопределено ) Экспорт

	// получим компоненты доступа к порталу
	EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
	Если EInvVatService = Неопределено Тогда
		Если Ошибки <> Неопределено Тогда
			врТекстОшибки = "Компонента не обнаружена";
			ЭСЧФОбщий.ОтразитьОшибку(Ошибки, врТекстОшибки, Поле);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		res = EInvVatService.SetServiceProperty( Параметр, Значение, 0 );
		Если res <> 0 Тогда
			врТекстОшибки = "Ошибка установки параметра сервиса: " + EInvVatService.LastError;
			ЭСЧФОбщий.ОтразитьОшибку(Ошибки, врТекстОшибки, Поле);
			Отказ = Истина;
		Иначе
			Отказ = Ложь;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Если Ошибки <> Неопределено Тогда
			врТекстОшибки = "Ошибка установки параметра сервиса: " + ОписаниеОшибки();
			ЭСЧФОбщий.ОтразитьОшибку(Ошибки, врТекстОшибки, Поле);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры //УстановитьПараметрСервисаСервер

////////////////////////////////////////////////////////////////////////////////
//
// Функция ВерсияКомпоненты
//
// Описание:
//  пытается получить версию компоненты методом 'Version'
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Строка(0) - верия компоненты
//  Неопределено - в случае неудачи
//
Функция ВерсияКомпонентыСервер() Экспорт

	Перем Версия;
	
	EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
	Если EInvVatService = Неопределено Тогда
		Возврат Версия;
	КонецЕсли;
	
	Попытка
		Версия = EInvVatService.Version;
	Исключение КонецПопытки;
	
	Возврат Версия;

КонецФункции //ВерсияКомпоненты
