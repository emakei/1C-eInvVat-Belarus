
#Область ЭлектронныйДокумент

&НаКлиенте
Процедура СформироватьПодписатьОтправить(Команда)

	ОчиститьСообщения();
	Если Объект.Ссылка.Пустая() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Отправить можно только записанный документ";
		Сообщение.Сообщить();
		Перейти ~ВыходБезЗавершения;
	КонецЕсли;
	// авторизация и подключение
	Если РежимРаботы = 2 Тогда
		// авторизация не нужна
		МенеджерНомераВыгрузить = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
		МенеджерНомераВыгрузить.Организация = Объект.Организация;
		МенеджерНомераВыгрузить.Номер = Объект.НомерЭСЧФ;
		Если Не ОбменВыгрузить Тогда
			МенеджерНомераВыгрузить.Прочитать();
			Если МенеджерНомераВыгрузить.Выбран() Тогда
				МенеджерНомераВыгрузить.КоличествоОбновлений = МенеджерНомераВыгрузить.КоличествоВыгрузок + 1;
			Иначе
				МенеджерНомераВыгрузить.Организация = Объект.Организация;
				МенеджерНомераВыгрузить.Номер = Объект.НомерЭСЧФ;
				МенеджерНомераВыгрузить.КоличествоОбновлений = 1;
			КонецЕсли;
			МенеджерНомераВыгрузить.Записать(Истина);
			ОбменВыгрузить = Истина;
		Иначе
			МенеджерНомераВыгрузить.Удалить();
			ОбменВыгрузить = Ложь;
		КонецЕсли;
		УправлениеФормой();
		Перейти ~ВыходБезЗавершения;
	ИначеЕсли Не РежимРаботы И ЭСЧФклиент.ПриАвторизацииПоОрганизации(Объект.Организация) Тогда
		Отказ = Ложь;
		ТекстОшибки = "";
		ПриПодключенииКСервису(Отказ, ТекстОшибки);
		Если Отказ Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Перейти ~Выход;
		КонецЕсли;
	ИначеЕсли Не РежимРаботы И Не ЭСЧФКлиент.ПриАвторизацииБезПараметров() Тогда
		Перейти ~Выход;
	ИначеЕсли Не РежимРаботы И Не ЭСЧФКлиент.ПриПодключенииКСервисуБезПараметров() Тогда
		Перейти ~Выход;
	ИначеЕсли РежимРаботы И Не ЭСЧФсервер.ПриАвторизацииПоОрганизации(Объект.Организация) Тогда
		Перейти ~Выход;
	КонецЕсли;
	// отправка документа
	Отказ  = Ложь;
	Принят = Ложь;
	Ошибки = "";
	Ответ  = "";
	ИмяФайлаОтвета = "";
	Если Не РежимРаботы Тогда
		ЭСЧФклиент.СформироватьПодписатьОтправитьДокумент(Объект, Отказ, Ошибки, , СокрЛП(Объект.Организация.ИНН), Объект.Товары, Объект.Грузоотправители
		, Объект.Грузополучатели, Объект.ДокументыПодтверждающиеПоставку,, Принят, Ответ, ИмяФайлаОтвета);
	Иначе
		ЭСЧФсервер.СформироватьПодписатьОтправитьДокумент(Объект, Отказ, Ошибки, , СокрЛП(Объект.Организация.ИНН), Объект.Товары, Объект.Грузоотправители
		, Объект.Грузополучатели, Объект.ДокументыПодтверждающиеПоставку,, Принят, Ответ, ИмяФайлаОтвета)
	КонецЕсли;
	
	Если Отказ Или Не Принят Тогда
		Для каждого Ошибка Из Ошибки Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Ошибка;
			Сообщение.Сообщить();
		КонецЦикла;
	Иначе
		ЭСЧФобщий.ОтразитьВыставлениеДокумента(Объект.Ссылка, ТекущаяДатаСеанса(), Объект.НомерЭСЧФ);
	КонецЕсли;
	
	~Выход:
	Если Не РежимРаботы Тогда
		ПриЗавершенииАвторизации(Отказ, Ошибки);
	Иначе
		ЭСЧФсервер.ПриЗавершенииАвторизацииНаСервере()
	КонецЕсли;
	
	~ВыходБезЗавершения:

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусДокумента(Команда)

	// авторизация и подключение
	Если РежимРаботы = 2 Тогда
		// авторизация не нужна
		МенеджерЗагрузитьСтатус = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗагрузитьСтатус.Организация = Объект.Организация;
		МенеджерЗагрузитьСтатус.Номер = Объект.НомерЭСЧФ;
		Если Не ОбменСтатус Тогда
			МенеджерЗагрузитьСтатус.Записать(Истина);
			ОбменСтатус = Истина;
		Иначе
			МенеджерЗагрузитьСтатус.Удалить();
			ОбменСтатус = Ложь;
		КонецЕсли;
		УправлениеФормой();
		Перейти ~ВыходБезЗавершения;
	ИначеЕсли Не РежимРаботы И ЭСЧФклиент.ПриАвторизацииПоОрганизации(Объект.Организация) Тогда
		Отказ = Ложь;
		ТекстОшибки = "";
		ПриПодключенииКСервису(Отказ, ТекстОшибки);
		Если Отказ Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Перейти ~Выход;
		КонецЕсли;
	ИначеЕсли Не РежимРаботы И Не ЭСЧФКлиент.ПриАвторизацииБезПараметров() Тогда
		Перейти ~Выход;
	ИначеЕсли Не РежимРаботы И Не ЭСЧФКлиент.ПриПодключенииКСервисуБезПараметров() Тогда
		Перейти ~Выход;
	ИначеЕсли РежимРаботы И Не ЭСЧФсервер.ПриАвторизацииПоОрганизации(Объект.Организация) Тогда
		Перейти ~Выход;
	КонецЕсли;
	
	ТекстОтвета = "";
	ТекстОшибки = "";
	Принят = Ложь;
	ДатаСостояния = Неопределено;
	Если Не РежимРаботы Тогда
		Отказ = ( Не ЭСЧФклиент.ОбновитьДанныеОСтатусеДокумента(Объект.НомерЭСЧФ,, ДатаСостояния, Статус,, ТекстОшибки) );
	Иначе
		Отказ = ( Не ЭСЧФсервер.ОбновитьДанныеОСтатусеДокумента(Объект.НомерЭСЧФ,, ДатаСостояния, Статус,, ТекстОшибки) );
	КонецЕсли;
	
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	~Выход:
	ТекстОшибки = "";
	ПриЗавершенииАвторизации(Отказ, ТекстОшибки);
	Если Отказ Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
	КонецЕсли;
	~ВыходБезЗавершения:

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
    
    Если Не РежимРаботы Или РежимРаботы = 2 Тогда
        ЭСЧФклиент.ВыгрузитьДокументВФайлДиалог(Объект,,, Объект.ПоставщикУНП, Объект.Товары, Объект.Грузоотправители, Объект.Грузополучатели, Объект.ДокументыПодтверждающиеПоставку, Истина)
    Иначе
        ОсновнойКаталогПользователя = ДополнительныеСлужебныеПроцедурыИФункции.ПолучитьЗначениеНастрокиПоНаименованию(ПараметрыСеанса.ТекущийПользователь, "Основной каталог файлов пользователя", Истина);
        Если Не ВвестиЗначение(ОсновнойКаталогПользователя, "Введите полный путь выгрузки файла относительно сервера (с именем и расширением)", Тип("Строка")) Тогда
            Возврат
        КонецЕсли;
        ЭСЧФобщий.ВыгрузитьДокументВФайлДиалог(Объект, ОсновнойКаталогПользователя,, Объект.ПоставщикУНП, Объект.Товары, Объект.Грузоотправители, Объект.Грузополучатели, Объект.ДокументыПодтверждающиеПоставку, Истина)
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокумент(Команда)

    Ошибки = Новый Массив;
    Если Не ЭСЧФобщий.ЭСЧФСоответствуетПротоколу(Объект, СокрЛП(Объект.Организация.ИНН), Объект.Товары, Объект.Грузоотправители, Объект.Грузополучатели
                                                 , Объект.ДокументыПодтверждающиеПоставку, Истина, Истина,, Ошибки) Тогда
        ТипСтруктура = Тип("Структура");
        Для каждого цОшибка Из Ошибки Цикл
            Сообщение = Новый СообщениеПользователю;
            Если ТипЗнч(цОшибка) = ТипСтруктура Тогда
                Сообщение.Поле = цОшибка.Поле; //имя реквизита
                Сообщение.Текст = цОшибка.Текст;
            Иначе
                Сообщение.Текст = цОшибка;
            КонецЕсли;
            Сообщение.УстановитьДанные(Объект.Ссылка); //Ссылка на объект ИБ
            Сообщение.Сообщить();
		КонецЦикла;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибок не обнаружено";
		Сообщение.Сообщить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОразитьИнформациюДляОбмена(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		МенеджерНомераВыгрузить = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
		МенеджерНомераВыгрузить.Организация = Объект.Организация;
		МенеджерНомераВыгрузить.Номер = Объект.НомерЭСЧФ;
		МенеджерНомераВыгрузить.Прочитать();
		Если МенеджерНомераВыгрузить.Выбран() Тогда
			МенеджерНомераВыгрузить.КоличествоОбновлений = МенеджерНомераВыгрузить.КоличествоВыгрузок + 1;
		Иначе
			МенеджерНомераВыгрузить.Организация = Объект.Организация;
			МенеджерНомераВыгрузить.Номер = Объект.НомерЭСЧФ;
			МенеджерНомераВыгрузить.КоличествоОбновлений = 1;
		КонецЕсли;
		МенеджерНомераВыгрузить.Записать(Истина);
		ОбменВыгрузить = Истина;
		
		МенеджерЗагрузитьСтатус = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
		МенеджерЗагрузитьСтатус.Организация = Объект.Организация;
		МенеджерЗагрузитьСтатус.Номер = Объект.НомерЭСЧФ;
		МенеджерЗагрузитьСтатус.Записать(Истина);
		ОбменСтатус = Истина;
		
		УправлениеФормой();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаКлиенте
Процедура УправлениеФормой()

    ЭтоРеализацияФизЛицам = ( Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.РеализацияФизЛицам") );
    ЭтоИсходный           = ( Объект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный") );
    ЭтоИсправление        = ( Объект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") );
	ЭтоДополнительный     = ( Объект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") );
	ЕстьПолныеПрава = ( РольДоступна("ПолныеПрава") Или РольДоступна("ИспользованиеЭСЧФПолный") );
    // доступность в зависимости от вида документа и типа ЭСЧФ
    Элементы.ПоставщикСтатус.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.ПолучательСтатус.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.ДатаАннулированияЭСЧФ.ТолькоПросмотр = ( Не ЭтоИсправление );
    Элементы.КЭСЧФ.ТолькоПросмотр = ( Не ЭтоИсходный );
    Элементы.Вертикальная11_14.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.Вертикальная20_21.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.РеквизитыГрузоотправителяИГрузоволучателя.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.УсловияПоставки.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.Контрагент.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    Элементы.ДоговорКонтрагента.ТолькоПросмотр = ЭтоРеализацияФизЛицам;
    // доступность процедур работы с XML и порталом
    ДоступнаВыгрузка = ЭСЧФклиентПовтИсп.ДоступнаВыгрузкаДокументовВФайлы(РежимРаботы);
    ДоступенОбмен = ЭСЧФклиентПовтИсп.ДоступнаКомпонентаОбменаИПодписания(РежимРаботы);
    Элементы.ФормаПодменюРежимРаботы.Доступность = ( ЕстьПолныеПрава И ( ДоступнаВыгрузка Или ДоступенОбмен ) );
    Элементы.ФормаВыгрузитьВXML.Доступность = ДоступнаВыгрузка;
    Элементы.ФормаСформироватьПодписатьОтправить.Доступность = ( ДоступнаВыгрузка И ДоступенОбмен );
    Элементы.ФормаОбновитьСтатусДокумента.Доступность = ДоступенОбмен;
	
	Элементы.ФормаУстановитьРежимРаботыНаКлиенте.Пометка  = ( РежимРаботы = 0 );
	Элементы.ФормаУстановитьРежимРаботыНаСервере.Пометка  = ( РежимРаботы = 1 );
	Элементы.ФормаУстановитьРежимРаботыОтложенный.Пометка = ( РежимРаботы = 2 );
	
	// команды
	Проведен = Объект.Проведен;
    Элементы.ЗаполнитьРеализациейФизЛицам.Доступность = ( ЭтоРеализацияФизЛицам И Не Проведен );
	
	ЭтаФорма.ТолькоПросмотр = ( Принят И Не ЗначениеЗаполнено(Статус) Или МассивНеРедактироватьСтатусы.НайтиПоЗначению(Статус) <> Неопределено );
	
	Если РежимРаботы = 2 Тогда
		
		Если ОбменВыгрузить Тогда
			Элементы.ФормаСформироватьПодписатьОтправить.Заголовок = "Отменить отправку";
			Элементы.ФормаСформироватьПодписатьОтправить.Картинка = БиблиотекаКартинок.ГеографическаяСхема;
		Иначе
			Элементы.ФормаСформироватьПодписатьОтправить.Заголовок = "Отправить документ";
			Элементы.ФормаСформироватьПодписатьОтправить.Картинка = БиблиотекаКартинок.ПерейтиПоНавигационнойСсылке;
		КонецЕсли;
		
		Если ОбменСтатус Тогда
			Элементы.ФормаОбновитьСтатусДокумента.Заголовок = "Отменить обновление";
			Элементы.ФормаОбновитьСтатусДокумента.Картинка = БиблиотекаКартинок.ГеографическаяСхема;
		Иначе
			Элементы.ФормаОбновитьСтатусДокумента.Заголовок = "Обновить статус";
			Элементы.ФормаОбновитьСтатусДокумента.Картинка = БиблиотекаКартинок.Обновить;
		КонецЕсли;
		
	Иначе
		
		Элементы.ФормаСформироватьПодписатьОтправить.Заголовок = "Отправить документ";
		Элементы.ФормаСформироватьПодписатьОтправить.Картинка = БиблиотекаКартинок.ПерейтиПоНавигационнойСсылке;
		Элементы.ФормаОбновитьСтатусДокумента.Заголовок = "Обновить статус";
		Элементы.ФормаОбновитьСтатусДокумента.Картинка = БиблиотекаКартинок.Обновить;
		
	КонецЕсли;
	
	// поле "Отобразить получателю" имеет смысл только для дополнительного и исправленного
	Элементы.ОтобразитьПолучателю.Видимость = ( ЭтоИсправление Или ЭтоДополнительный );

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.ПриобретениеУНеРезидента") Тогда
		
		Если Объект.Организация.СтранаРегистрации.Пустая() Тогда
			Объект.ПоставщикКодСтраны = "112"
		Иначе
			Объект.ПоставщикКодСтраны = Объект.Организация.СтранаРегистрации.Код
		КонецЕсли;
		
		Объект.Поставщик = Объект.Организация.НаименованиеПолное;
		Объект.ПоставщикУНП = Объект.Организация.ИНН;
		Объект.ПоставщикЮридическийАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Объект.Организация, "Юридический");
		Объект.ПоставщикРезидентОффшорнойЗоны = Объект.Организация.РезидентОффшорнойЗоны;
		Объект.ПоставщикВзаимозависимоеЛицо = ЭСЧФсервер.Взаимозависимы(Объект.Дата, Объект.ПоставщикУНП, Объект.ПолучательУНП);
		Объект.ПоставщикВходитВПереченьКрупныхПлательщиков = ЭСЧФсервер.ВходитВПереченьКрупныхПлательщиков(Объект.Дата, Объект.ПоставщикУНП);
		
	Иначе
		
		Если Объект.Организация.СтранаРегистрации.Пустая() Тогда
			Объект.ПолучательКодСтраны = "112"
		Иначе
			Объект.ПолучательКодСтраны = Объект.Организация.СтранаРегистрации.Код
		КонецЕсли;
		
		Объект.Получатель = Объект.Организация.НаименованиеПолное;
		Объект.ПолучательУНП = Объект.Организация.ИНН;
		Объект.ПолучательЮридическийАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Объект.Организация, "Юридический");
		Объект.ПолучательРезидентОффшорнойЗоны = Объект.Организация.РезидентОффшорнойЗоны;
		Объект.ПолучательВзаимозависимоеЛицо = ЭСЧФсервер.Взаимозависимы(Объект.Дата, Объект.ПоставщикУНП, Объект.ПолучательУНП);
		Объект.ПолучательВходитВПереченьКрупныхПлательщиков = ЭСЧФсервер.ВходитВПереченьКрупныхПлательщиков(Объект.Дата, Объект.ПолучательУНП);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.ПриобретениеУНеРезидента") Тогда
		
		Если Объект.Контрагент.СтранаРегистрации.Пустая() Тогда
			Объект.ПолучательКодСтраны = "112"
		Иначе
			Объект.ПолучательКодСтраны = Объект.Контрагент.СтранаРегистрации.Код
		КонецЕсли;
		
		Объект.Получатель = Объект.Контрагент.НаименованиеПолное;
		Объект.ПолучательУНП = Объект.Контрагент.ИНН;
		Объект.ПолучательЮридическийАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Объект.Контрагент, "Юридический");
		
	Иначе
		
		Если Объект.Контрагент.СтранаРегистрации.Пустая() Тогда
			Объект.ПоставщикКодСтраны = "112"
		Иначе
			Объект.ПоставщикКодСтраны = Объект.Контрагент.СтранаРегистрации.Код
		КонецЕсли;
		
		Объект.Поставщик = Объект.Контрагент.НаименованиеПолное;
		Объект.ПоставщикУНП = Объект.Контрагент.ИНН;
		Объект.ПоставщикЮридическийАдрес = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Объект.Контрагент, "Юридический");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

    //Объект.ДоговорНомер = Объект.ДоговорКонтрагента.Наименование;
	Объект.ДоговорНомер = Объект.ДоговорКонтрагента.НомерДоговора;
	Объект.ДоговорДата  = Объект.ДоговорКонтрагента.ДатаДоговора;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПолучателюПриИзменении(Элемент)

	ОрганизацияПриИзменении(Неопределено);
	КонтрагентПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураПродавцаПриИзменении(Элемент)

	Объект.ПоставщикНомерСчетаПродавца = Объект.СчетФактураПродавца.Номер;
	Объект.ПоставщикДатаВыпискиПродавца = Объект.СчетФактураПродавца.ДатаВыставленияЭСЧФ;

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураПродавцаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

    СтандартнаяОбработка = Ложь;
    ПараметрыВызова = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ДополнительныеПараметрыВыбора"
                                , Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента
                                , "СчетФактураПродавца");
    ФормаВыбора = ПолучитьФорму("Документ.ЭлектронныйСчетФактураПолученный.ФормаВыбора", ПараметрыВызова, ЭтаФорма);
    ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    
    Перем ВыбЗнч;
    
    Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("СчетФактураВыданный", ВыбЗнч) Тогда
        Объект[ВыбранноеЗначение.ДополнительныеПараметрыВыбора] = ВыбЗнч;
        Если ВыбранноеЗначение.ДополнительныеПараметрыВыбора = "СчетФактураКомитента" Тогда
            СчетФактураКомитентаПриИзменении(Неопределено)
        ИначеЕсли ВыбранноеЗначение.ДополнительныеПараметрыВыбора = "СчетФактураПродавца" Тогда
            СчетФактураПродавцаПриИзменении(Неопределено)
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СчетФактураКомитентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
    
    СтандартнаяОбработка = Ложь;
    ПараметрыВызова = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, ДополнительныеПараметрыВыбора"
                                , Объект.Организация, Объект.Контрагент, Объект.ДоговорКонтрагента
                                , "СчетФактураКомитента");
    ФормаВыбора = ПолучитьФорму("Документ.ЭлектронныйСчетФактураПолученный.ФормаВыбора", ПараметрыВызова, ЭтаФорма);
    ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СчетФактураКомитентаПриИзменении(Элемент)
	
	Объект.ПоставщикНомерСчетаКомитента = Объект.СчетФактураПродавца.Номер;
	Объект.ПоставщикДатаВыпискиКомитента = Объект.СчетФактураПродавца.ДатаВыставленияЭСЧФ;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииЗначенийВТаблицеТоваров(Элемент)
    
    ТекДанные = Элементы.Товары.ТекущиеДанные;
    Если Элемент.Имя = "ТоварыСтавкаНДС" Тогда
        ТекДанные.ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Элементы.Товары.ТекущиеДанные.СтавкаНДС)
    КонецЕсли;
    
    Если Элемент.Имя = "ТоварыКоличество" Или Элемент.Имя = "ТоварыЦена" Или Элемент.Имя = "ТоварыСуммаАкциза" Тогда
        ТекДанные.Стоимость = ТекДанные.Количество * ТекДанные.Цена + ТекДанные.СуммаАкциза
    КонецЕсли;
    
    ТекДанные.СуммаНДС = ТекДанные.Стоимость * ТекДанные.ПроцентНДС / 100;
    ТекДанные.СтоимостьСНДС = ТекДанные.Стоимость + ТекДанные.СуммаНДС;
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботыНаКлиенте(Команда)

	Отказ = Ложь;
	Ошибка = "";
	ПодключитьКомпонентыДоступаКПорталуЭСФЧ(Отказ, Ошибка);
	Если Не Отказ Тогда
		РежимРаботы = 0;
		УправлениеФормой();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Ошибка;
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботыНаСервере(Команда)
	РежимРаботы = 1;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимРаботыОтложенный(Команда)
	РежимРаботы = 2;
	УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Статус) Тогда
		Возврат;
	КонецЕсли;
	
	Квитанция = РегистрыСведений.Квитанции.СоздатьМенеджерЗаписи();
	Квитанция.Год    = Объект.НомерГод;
	Квитанция.Объект = Объект.НомерОбъект;
	Квитанция.Номер  = Объект.НомерНомер;
	
	Квитанция.Прочитать();
	
	Если Квитанция.Выбран() Тогда
		Форма = Квитанция.ПолучитьФорму();//ПолучитьФорму("РегистрСведений.Квитанции.ФормаЗаписи");
		//ЗначениеВДанныеФормы(Квитанция, Форма.Запись);
		Форма.Открыть();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Квитанция не найдена";
		Сообщение.Поле = "Статус"; //имя реквизита 
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДатаВыставленияЭСЧФОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДатаВыставленияЭСЧФ) Тогда
		Возврат;
	КонецЕсли;
	
	Квитанция = РегистрыСведений.ВыставленныеДокументы.СоздатьМенеджерЗаписи();
	Квитанция.Год    = Объект.НомерГод;
	Квитанция.Объект = Объект.НомерОбъект;
	Квитанция.Номер  = Объект.НомерНомер;
	
	Квитанция.Прочитать();
	
	Если Квитанция.Выбран() Тогда
		Форма = Квитанция.ПолучитьФорму();//ПолучитьФорму("РегистрСведений.ВыставленныеДокументы.ФормаЗаписи");
		//ЗначениеВДанныеФормы(Квитанция, Форма.Запись);
		Форма.Открыть();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Данные о выставлении не найдены";
		Сообщение.Поле = "Статус"; //имя реквизита 
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДанными

//&НаСервере
//Процедура ЗаполнитьРеализациейФизЛицамНаСервере()

//	Объект.Товары.Очистить();
//	
//	Запрос = Новый Запрос;
//	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
//	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Объект.ДатаСовершенияОперацииЭСЧФ));
//	Запрос.УстановитьПараметр("КонецПериода",  Новый Граница(КонецМесяца(Объект.ДатаСовершенияОперацииЭСЧФ), ВидГраницы.Включая));
//	Запрос.УстановитьПараметр("РасчетнаяСтавка", ПредопределенноеЗначение("Перечисление.СтавкиНДС.РасчетнаяСтавка"));
//	Запрос.УстановитьПараметр("БезНДС", ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС"));
//	Запрос.УстановитьПараметр("СчетаРеализации", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Продажи"));
//	СчетаПоступленияНаличныхСредств = Новый Массив;
//	СчетаПоступленияНаличныхСредств.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.Касса"));
//	СчетаПоступленияНаличныхСредств.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ИнкассированныеДС"));
//	Запрос.УстановитьПараметр("СчетаПоступленияНаличныхСредств", СчетаПоступленияНаличныхСредств);
//	ВидыСубконто = Новый Массив;
//	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС"));
//	ВидыСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы"));
//	Запрос.УстановитьПараметр("Субконто", ВидыСубконто);
//	Запрос.УстановитьПараметр("СубконтоПрочих", ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы"));
//	Запрос.УстановитьПараметр("СчетаПрочихДоходов", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ОперационныеДоходыИРасходы"));
//	Запрос.УстановитьПараметр("НДС20", ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20"));
//	Запрос.УстановитьПараметр("СчетаПрочихДоходовПоТекДеятельности", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПрочиеРасходыПоТекущейДеятельности"));
//	Запрос.УстановитьПараметр("СчетНДС", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.НДС"));
//	Налоги = Новый Массив;
//	Налоги.Добавить(Неопределено);
//	Налоги.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
//	Запрос.УстановитьПараметр("Налоги", Налоги);//ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог"));
//	
//	Запрос.Текст = "ВЫБРАТЬ
//	|    -ХозрасчетныйОбороты.СуммаОборот КАК Реализация,
//	|    ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
//	|    ХозрасчетныйОбороты.Субконто2 КАК ВидДеятельности,
//	|    ЕСТЬNULL(ПроцентНДС.СреднийПроцентНДС, 0) КАК ПроцентНДС
//	|ИЗ
//	|    РегистрБухгалтерии.Хозрасчетный.Обороты(
//	|            &НачалоПериода,
//	|            &КонецПериода,
//	|            Период,
//	|            Счет В ИЕРАРХИИ (&СчетаРеализации)
//	|                И НЕ Счет.ЗапретитьИспользоватьВПроводках,
//	|            &Субконто,
//	|            Организация = &Организация
//	|                И Субконто1 = &РасчетнаяСтавка,
//	|            КорСчет В ИЕРАРХИИ (&СчетаПоступленияНаличныхСредств),
//	|            ) КАК ХозрасчетныйОбороты
//	|        ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
//	|            ю_02_ЗакрытиеМесяцаВРозницеНДС.СреднийПроцентНДС КАК СреднийПроцентНДС
//	|        ИЗ
//	|            Документ.ю_02_ЗакрытиеМесяцаВРознице.НДС КАК ю_02_ЗакрытиеМесяцаВРозницеНДС
//	|        ГДЕ
//	|            ю_02_ЗакрытиеМесяцаВРозницеНДС.Ссылка.Организация = &Организация
//	|            И ю_02_ЗакрытиеМесяцаВРозницеНДС.Ссылка.Дата < &НачалоПериода
//	|            И ю_02_ЗакрытиеМесяцаВРозницеНДС.Ссылка.Проведен
//	|        
//	|        УПОРЯДОЧИТЬ ПО
//	|            ю_02_ЗакрытиеМесяцаВРозницеНДС.Ссылка.Дата УБЫВ) КАК ПроцентНДС
//	|        ПО (ИСТИНА)
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|    -ХозрасчетныйОбороты.СуммаОборот,
//	|    ХозрасчетныйОбороты.Субконто1,
//	|    ХозрасчетныйОбороты.Субконто2,
//	|    NULL
//	|ИЗ
//	|    РегистрБухгалтерии.Хозрасчетный.Обороты(
//	|            &НачалоПериода,
//	|            &КонецПериода,
//	|            Период,
//	|            Счет В ИЕРАРХИИ (&СчетаРеализации)
//	|                И НЕ Счет.ЗапретитьИспользоватьВПроводках,
//	|            &Субконто,
//	|            Организация = &Организация
//	|                И НЕ Субконто1 В (&РасчетнаяСтавка, &БезНДС),
//	|            КорСчет В ИЕРАРХИИ (&СчетаПоступленияНаличныхСредств),
//	|            ) КАК ХозрасчетныйОбороты
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|    -ХозрасчетныйОбороты.СуммаОборот,
//	|    &НДС20,
//	|    ХозрасчетныйОбороты.Субконто1,
//	|    NULL
//	|ИЗ
//	|    РегистрБухгалтерии.Хозрасчетный.Обороты(
//	|            &НачалоПериода,
//	|            &КонецПериода,
//	|            Период,
//	|            Счет В ИЕРАРХИИ (&СчетаПрочихДоходов)
//	|                И НЕ Счет.ЗапретитьИспользоватьВПроводках,
//	|            &СубконтоПрочих,
//	|            Организация = &Организация,
//	|            КорСчет В ИЕРАРХИИ (&СчетаПоступленияНаличныхСредств),
//	|            ) КАК ХозрасчетныйОбороты
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|    СУММА(ХозрасчетныйОбороты.СуммаОборот),
//	|    &НДС20,
//	|    ХозрасчетныйОбороты.Субконто2,
//	|    NULL
//	|ИЗ
//	|    РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, Период, Счет = &СчетаПрочихДоходовПоТекДеятельности, , , КорСчет = &СчетНДС, ) КАК ХозрасчетныйОбороты
//	|
//	|СГРУППИРОВАТЬ ПО
//	|    ХозрасчетныйОбороты.Субконто1";
//	
//	Результат = Запрос.Выполнить();
//	Если Результат.Пустой() Тогда
//		Сообщение = Новый СообщениеПользователю;
//		Сообщение.Текст = "Нет данных для отражения";
//		Сообщение.Сообщить();
//		Возврат
//	КонецЕсли;
//	
//	Выборка = Результат.Выбрать();
//	Пока Выборка.Следующий() Цикл
//		НоваяСтрока = Объект.Товары.Добавить();
//		НоваяСтрока.Товар         = СокрЛП(Выборка.ВидДеятельности);//"Реализация товаров физ. лицам";
//		НоваяСтрока.Стоимость     = Выборка.Реализация;
//		НоваяСтрока.СтавкаНДС     = Выборка.СтавкаНДС;//ПредопределенноеЗначение("Перечисление.СтавкиНДС.РасчетнаяСтавка");
//		Если ЗначениеЗаполнено(Выборка.ПроцентНДС) Тогда
//			НоваяСтрока.ТипСтавкиНДС  = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Расчетная");
//			НоваяСтрока.ПроцентНДС = Выборка.ПроцентНДС
//		Иначе
//			НоваяСтрока.ТипСтавкиНДС  = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Фиксированная");
//			НоваяСтрока.ПроцентНДС = УчетНДС.ПолучитьСтавкуНДС(Выборка.СтавкаНДС)
//		КонецЕсли;
//		НоваяСтрока.СуммаНДС      = Выборка.Реализация * НоваяСтрока.ПроцентНДС / 100;
//		НоваяСтрока.СтоимостьСНДС = НоваяСтрока.Стоимость + НоваяСтрока.СуммаНДС;
//	КонецЦикла;

//КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеализациейФизЛицам(Команда)
	//ЗаполнитьРеализациейФизЛицамНаСервере();
	Объект.Товары.Очистить();
	ЭСЧФОбработкаДанныхДокументов.ЭлектронныйСчетФактураВыданный_ЗаполнитьРеализациейФизЛицам(Объект.Товары, Объект.Организация, НачалоМесяца(Объект.ДатаСовершенияОперацииЭСЧФ), КонецМесяца(Объект.ДатаСовершенияОперацииЭСЧФ));
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ЭтоНовый = ( Не ЗначениеЗаполнено(Объект.Ссылка) );
	Если ЭтоНовый И Не ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		СписокВыбора = Новый СписокЗначений;
		Для каждого цЭлемент Из Перечисления.ВидыОперацийЭСЧФ Цикл
			СписокВыбора.Добавить(цЭлемент);
		КонецЦикла;
		ВыбранноеЗначение = СписокВыбора[0];
		ВыбранноеЗначение = СписокВыбора.ВыбратьЭлемент("Выберите вид операции", ВыбранноеЗначение);
		Если ВыбранноеЗначение <> Неопределено Тогда
			Объект.ВидОперации = ВыбранноеЗначение.Значение
		Иначе
			Отказ = Истина;
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.РеализацияФизЛицам") Тогда
			Объект.ПоставщикСтатус  = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Продавец");
			Объект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Покупатель");
			Объект.ПолучательКодСтраны = "112";
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.ПриобретениеУНеРезидента") Тогда
			Объект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация");
			Объект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.ПокупательОбъектовУИностраннойОрганизации");
		КонецЕсли;
		ОрганизацияПриИзменении(Элементы.Организация);
	КонецЕсли;
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ЭтоНовый = ( Не ЗначениеЗаполнено(Объект.Ссылка) );
	Если ЭтоНовый Тогда
		Объект.Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		Объект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	РежимРаботы = ЭСЧФсервер.РежимРаботыПоУмолчаниюЭСЧФ();
	
	//{[-](фрагмент удален)Макей Евгений Владимирович 04.11.2016 9:37:35
	//МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Аннулирован"));
	//МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Выставлен"));
	//МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленАннулированПоставшиком"));
	//МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленПодписанПолучателем"));
	//МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании"));
	//}Макей Евгений Владимирович 04.11.2016 9:37:35
	//{[+](фрагмент добавлен), Макей Евгений Владимирович 04.11.2016 9:38:02
	МассивНеРедактироватьСтатусы.ЗагрузитьЗначения( ЭСЧФобщий.НеРедактироватьСтатусы() );
	//}Макей Евгений Владимирович 04.11.2016 9:38:02

КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
    УправлениеФормой();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	УправлениеФормой();
	
	Если Объект.Проведен И РежимРаботы = 2 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОразитьИнформациюДляОбмена", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Выгрузить документы на портал и обновить статусы?", РежимДиалогаВопрос.ДаНет,,, "Обмен данными с ИМНС")
	КонецЕсли;
	
	Прочитать();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// поиск статуса документа
	Квитанция = РегистрыСведений.Квитанции.СоздатьМенеджерЗаписи();
	ЭСЧФобщий.РазложитьНомер(Объект.НомерЭСЧФ, Квитанция.Год, Квитанция.Объект, Квитанция.Номер);
	Квитанция.Прочитать();
	Если Квитанция.Выбран() Тогда
		Статус = Квитанция.Статус;
		ДатаСостояния = Квитанция.ДатаСостояния;
		//ЭтаФорма.ТолькоПросмотр = ( МассивНеРедактироватьСтатусы.НайтиПоЗначению(Статус) <> Неопределено );
	КонецЕсли;
	// поиск даты выставления
	ВыставленныеДокументы = РегистрыСведений.ВыставленныеДокументы.СоздатьМенеджерЗаписи();
	ЭСЧФобщий.РазложитьНомер(Объект.НомерЭСЧФ, ВыставленныеДокументы.Год, ВыставленныеДокументы.Объект, ВыставленныеДокументы.Номер);
	ВыставленныеДокументы.Прочитать();
	Если ВыставленныеДокументы.Выбран() Тогда
		ДатаВыставленияЭСЧФ = ВыставленныеДокументы.ДатаВыставления;
		Принят = ВыставленныеДокументы.Принят;
		ТекстОтвета = ВыставленныеДокументы.Комментарий;
		ЭтаФорма.ТолькоПросмотр = ( ЭтаФорма.ТолькоПросмотр Или Принят И Не ЗначениеЗаполнено(Статус) );
	КонецЕсли;
	// данные отложенного обмена
	МенеджерЗагрузитьСтатус = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
	МенеджерЗагрузитьСтатус.Организация = Объект.Организация;
	МенеджерНомераВыгрузить = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
	МенеджерНомераВыгрузить.Организация = Объект.Организация;
	МенеджерЗагрузитьСтатус.Номер = Объект.НомерЭСЧФ;
	МенеджерЗагрузитьСтатус.Прочитать();
	ОбменСтатус = МенеджерЗагрузитьСтатус.Выбран();
	МенеджерНомераВыгрузить.Номер = Объект.НомерЭСЧФ;
	МенеджерНомераВыгрузить.Прочитать();
	ОбменВыгрузить = МенеджерНомераВыгрузить.Выбран();

КонецПроцедуры
