
// Осуществляет выбор файла сертификата
//
// Параметры:
//  ОбработчикВыбора  - ОписаниеОповещения - Содержит описание процедуры, которая будет вызвана после закрытия диалога выбора со следующими параметрами: 
//                      <ВыбранныеФайлы> – массив выбранных имен файлов или Неопределено, если выбор не осуществлен. 
//                      <ДополнительныеПараметры> - значение, которое было указано при создании объекта ОписаниеОповещения.
//
Процедура ВыбратьФайлСертификата(ОбработчикВыбора) Экспорт

    ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
    ДиалогВыбораФайла.Заголовок = "Выберите сертификат";
    ДиалогВыбораФайла.МножественныйВыбор = Ложь;
    ДиалогВыбораФайла.Фильтр = "Файл сертификата (*.cer)|*.cer";
    ДиалогВыбораФайла.Показать(ОбработчикВыбора);

КонецПроцедуры // ВыбратьФайлСертификата()

// Авторизация
//
Функция ПриАвторизацииБезПараметров() Экспорт

    Ошибка = "";
    Отказ = ( Не EInvVatAuthorized );
    
    Если Отказ Тогда
        ПриАвторизации(Отказ,,,, Ошибка);
    КонецЕсли;
    
    Если Отказ Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = Ошибка;
        Сообщение.Сообщить();
    КонецЕсли;
    
    Возврат Не Отказ

КонецФункции // ПриАвторизации()

// Подключение к сервису
//
Функция ПриПодключенииКСервисуБезПараметров() Экспорт

    Ошибка = "";
    Отказ = ( Не EInvVatConnected );
    
    Если Отказ Тогда
        ПриПодключенииКСервису(Отказ, Ошибка)
    КонецЕсли;
    
    Если Отказ Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = Ошибка;
        Сообщение.Сообщить();
    КонецЕсли;
    
    Возврат Не Отказ

КонецФункции // ПриПодключенииКСервису()

// Формирует xml-документ, подписывает, и отправляет на портал
//
// Параметры:
//  Данные  - ДокументСсылка.ЭлектронныйСчетФактураВыданный, Структура - данные для работы
//  Отказ  - Булево - признак ошибки при обработке
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//  ФабрикаЭСЧФ  - ФабрикаXDTO - фабрика XDTO на основании схемы ИМНС или неопределено,
//                                 если не верны входные данные или файл схемы не найден
//  ОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  Товары  - Коллекция - таблица по товарам
//  Грузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  Грузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  Документы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  ЭтоИсходящийДокумент  - Булево - признак исходящего документа
//  Принят  - Булево - был ли документ принят или нет
//  ТекстОтвета  - Строка - строка с текстовой информацией ответа сервиса
//  ИмяФайлаОтвета  - Строка - имя файла сохраненной квитанции
//
Процедура СформироватьПодписатьОтправитьДокумент(Данные, Отказ = Ложь, ТекстОшибки = Неопределено, ФабрикаЭСЧФ = Неопределено, ОтправительУНП, Товары
                                                 , Грузоотправители = Неопределено, Грузополучатели = Неопределено, Документы = Неопределено, ЭтоИсходящийДокумент = Истина
                                                 , Принят, ТекстОтвета, ИмяФайлаОтвета = Неопределено) Экспорт

    ЭСЧФобщий.СформироватьПодписатьОтправитьДокумент(Данные, Отказ, ТекстОшибки, ФабрикаЭСЧФ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент, Принят, ТекстОтвета, ИмяФайлаОтвета)
    //Если ФабрикаЭСЧФ = Неопределено Тогда
    //    ФабрикаЭСЧФ = ЭСЧФобщий.ПолучитьФабрикуXDTO(Данные.ТипЭСЧФ)
    //КонецЕсли;
    //
    //ЭлектронныйДокумент = ЭСЧФобщий.ПолучитьОбъектДокументаXDTO(ФабрикаЭСЧФ);
    //ЭСЧФобщий.ЗаполнитьДаннымиОбъектXDTO(Данные, ЭлектронныйДокумент, ФабрикаЭСЧФ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент);
    //
    //ИмяФайлаДекларации = "";
    //ОбъектЗаписи = ЭСЧФобщий.ПолучитьОбъектЗаписиВФайлXML(Отказ, ТекстОшибки, ИмяФайлаДекларации);
    //
    //Если Отказ Или Не ЭСЧФобщий.ЗаписатьДанныеВФайлXML(ЭлектронныйДокумент, ОбъектЗаписи, ФабрикаЭСЧФ, ТекстОшибки) Тогда
    //    ОбъектЗаписи.Закрыть();
    //    Возврат
    //КонецЕсли;
    //
    //InvVatXml = EInvVatService.CreateEDoc();
    //ОбъектЗаписи.Закрыть();
    //res = InvVatXml.Document.LoadFromFile(ИмяФайлаДекларации);
    //Если res <> 0 Тогда
    //    Отказ = Истина;
    //    Если ТекстОшибки <> Неопределено Тогда
    //        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
    //    КонецЕсли;
    //    Возврат
    //КонецЕсли;
    //
    ////Проверка XML файла на соответствие  xsd -схеме
    //InvVatType = InvVatXml.Document.GetXmlNodeValue("issuance/general/documentType");
    //Если InvVatType = "ORIGINAL" Тогда
    //    xsd = "MNSATI_original.xsd";
    //ИначеЕсли InvVatType = "FIXED" Тогда
    //    xsd = "MNSATI_fixed.xsd";
    //ИначеЕсли InvVatType = "ADDITIONAL" Тогда
    //    xsd = "MNSATI_additional.xsd";
    //ИначеЕсли InvVatType = "ADD_NO_REFERENCE" Тогда
    //    xsd = "MNSATI_add_no_reference.xsd";
    //Иначе
    //    Если ТекстОшибки <> Неопределено Тогда
    //        Отказ = Истина;
    //        врТекстОшибки = "Файл " + ИмяФайлаДекларации + " содержит неверный тип документа";
    //        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
    //    КонецЕсли;
    //    Возврат
    //КонецЕсли;
    //
    //// занимает много времени + уже должен быть проверен "ЭСЧФСоответствуетПротоколу"
    ////res = InvVatXml.Document.ValidateXML(ПараметрыСеанса.XSD + xsd, 0);
    ////Если res <> 0 Тогда
    ////    Если ТекстОшибки <> Неопределено Тогда
    ////        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
    ////    КонецЕсли;
    ////    Возврат
    ////КонецЕсли;
    //
    ////Выработка подписи
    //res = InvVatXml.Sign(0);
    //Если res <> 0 Тогда
    //    Отказ = Истина;
    //    Если ТекстОшибки <> Неопределено Тогда
    //        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
    //    КонецЕсли;
    //    Возврат
    //КонецЕсли;
    //
    ////Сохранение подписанного файла
    //ИмяФайлаКвитанции = ПолучитьИмяВременногоФайла("xml");
    //res = InvVatXml.SaveToFile( ИмяФайлаКвитанции );
    //Если res <> 0 Тогда
    //    Отказ = Истина;
    //    Если ТекстОшибки <> Неопределено Тогда
    //        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
    //    КонецЕсли;
    //    Возврат
    //КонецЕсли;
    //
    ////Отправка подписанного документа на портал ЭСФЧ
    //res = EInvVatService.SendEDoc(InvVatXml);
    //Если res <> 0 Тогда
    //    Отказ = Истина;
    //    Если ТекстОшибки <> Неопределено Тогда
    //        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
    //    КонецЕсли;
    //    Возврат
    //КонецЕсли;
    //
    //// Ответ от портала ЭСФЧ будет сохранен в фале с расширением ".xml"
    //
    //InvVatTicket = EInvVatService.Ticket;
    //Принят = ( InvVatTicket.Accepted = 0 );
    //Если Не Принят Тогда
    //    Если ТекстОшибки <> Неопределено Тогда
    //        врТекстОшибки = InvVatTicket.Message;
    //        ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
    //    КонецЕсли;
    //КонецЕсли;

КонецПроцедуры // СформироватьПодписатьОтправитьДокумент()

// Функция авторизации web-сервиса
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация для авторизации
//  Отказ  - Булево - признак ошибки при обработке
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//
// Возвращаемое значение:
//  Булево - результат авторизации
//
Функция ПриАвторизацииПоОрганизации(Организация, Отказ = Ложь, ТекстОшибки = Неопределено) Экспорт

	Структура = РегистрыСведений.ПараметрыАвторизацииНаСервере.Получить(Новый Структура("Организация", Организация));
	Если Не ЗначениеЗаполнено(Структура.ПарольКЛичномуКлючу) Или Не ( ЗначениеЗаполнено(Структура.ИдентификаторОткрытогоКлюча) Или ЗначениеЗаполнено(Структура.ОбщееИмя) Или ЗначениеЗаполнено(Структура.ИспользоватьУНП) ) Тогда
		Отказ = Истина;
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = "Не найдены параметры авторизации для организации: " + СокрЛП(Организация);
			ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
		КонецЕсли;
		Перейти ~Выход;
	КонецЕсли;
	
	ПараметрыПодключения = "";
	Если ЗначениеЗаполнено(Структура.ИдентификаторОткрытогоКлюча) Тогда
		ПараметрыПодключения = "PUB_KEY_ID=" + Структура.ИдентификаторОткрытогоКлюча;
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ОбщееИмя) Тогда
		ПараметрыПодключения = ПараметрыПодключения + ";COMMON_NAME=" + Структура.ОбщееИмя;
	КонецЕсли;
	Если ЗначениеЗаполнено(Структура.ПарольКЛичномуКлючу) Тогда
		ПараметрыПодключения = ПараметрыПодключения + ";PASSWORD_KEY=" + Структура.ПарольКЛичномуКлючу;
	КонецЕсли;
	Если Структура.ИспользоватьУНП Тогда
		ПараметрыПодключения = ПараметрыПодключения + ";UNP=" + СокрЛП(Организация.ИНН);
	КонецЕсли;
	
	Если EInvVatAuthorized Тогда
		ПриЗавершенииАвторизации(Отказ, ТекстОшибки)
	КонецЕсли;
	
	// авторизация в хранишище
	EInvVatAuthorized = ( EInvVatService.Login(ПараметрыПодключения, ЭСЧФобщий.ФлагиАвторизации()) = 0 );
	Если Не EInvVatAuthorized Тогда
		Отказ = Истина;
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = "Ошибка авторизации: " + EInvVatService.LastError;
			ЭСЧФобщий.ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	~Выход:
	Возврат Не Отказ;

КонецФункции // ПриАвторизации

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыгрузитьДокументВФайлДиалог
//
// Описание:
//  выгружает электронный счет-фактуру в файл
//
// Параметры (название, тип, дифференцированное значение)
//  Документ - ДокументСсылка.ЭлектронныйСчетФактураВыданный, ДокументСсылка.ЭлектронныйСчетФактураПолученный, Структура
//           - документ для выгрузки
//  ПолноеИмяФайла - Строка - полное имя выгруженного файла
//                            П.С. если требуется непосредственно выгрузить в этот файл, то передать полное имя,
//                            если требуется получить имя файла - пустую строку
//  Отказ  - Булево - признак ошибки при обработке
//  ОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  Товары  - Коллекция - таблица по товарам
//  Грузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  Грузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  Документы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  ЭтоИсходящийДокумент  - Булево - признак исходящего документа
//
Процедура ВыгрузитьДокументВФайлДиалог(Документ, ПолноеИмяФайла = Неопределено, Отказ = Ложь, ОтправительУНП, Товары
                                       , Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент) Экспорт

    ЭСЧФобщий.ВыгрузитьДокументВФайлДиалог(Документ, ПолноеИмяФайла, Отказ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент)

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыгрузитьДокументы
//
// Описание:
//  производит выгрузку документов обмена во внешние файлы
//
// Параметры (название, тип, дифференцированное значение)
//  ДокументыОбмена - СправочникСсылка.ДокументыОбмена, Массив (элементы: СправочникСсылка.ДокументыОбмена) - массив документов для выгрузки
//  ВХранилище - Булево - требуется ли выгрузить документы в хранилище на диске или в произвольное место
//
Процедура ВыгрузитьДокументы(ДокументыОбмена, ВХранилище = Ложь) Экспорт

	Если ТипЗнч(ДокументыОбмена) = Тип("СправочникСсылка.ДокументыОбмена") Тогда
		МассивДокументов = Новый Массив;
		МассивДокументов.Добавить(ДокументыОбмена);
	Иначе
		МассивДокументов = ДокументыОбмена;
	КонецЕсли;
	
	Если Не ВХранилище Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Заголовок = "Выгрузка документов обмена в каталог";
		Диалог.Каталог = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов;
		
		Если Не Диалог.Выбрать() Тогда
			Возврат
		Иначе
			Каталог = Диалог.Каталог
		КонецЕсли;
		
	Иначе
		
		Каталог = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов;
		Если ПустаяСтрока(Каталог) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не задано хранилище файлов";
			Сообщение.Сообщить();
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	Ошибки = Новый Массив;
	ЭСЧФобщий.ВыгрузитьДокументы(МассивДокументов, Каталог, ВХранилище, Ошибки);
	
	Для каждого Ошибка Из Ошибки Цикл
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = Ошибка;
		Сообщение.Сообщить();
	КонецЦикла;
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Обработано: " + МассивДокументов.Количество() + Символы.ПС + "Каталог: " + Каталог;
	Сообщение.Сообщить();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПодписатьИОтправитьДокументыОбмена
//
// Описание:
//  подписывает и отправляет документы обмена на портал
//
// Параметры (название, тип, дифференцированное значение)
//  ДокументыОбмена - ТаблицаЗначений - описание колонок и получение таблицы - ЭСЧФклиент.ТаблицаДанныхПодтвержденияДокументов() (или ЭСЧФсерверПовтИсп)
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе;
//                     0 - не нужно в любом случае
//                     1 - сохранить в случае получения статуса, отличного от: NOT_FOUND, ERROR
//                     2 - сохранить в любом случае
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Ошибки - Строка, Массив - ошибки операций
//
Процедура ПодписатьИОтправитьДокументыОбмена(ДокументыОбмена, СохранитьДокумент = Неопределено, РасположениеФайлов = Неопределено, Ошибки = Неопределено) Экспорт
	ЭСЧФобщий.ПодписатьИОтправитьДокументыОбмена(ДокументыОбмена, СохранитьДокумент, РасположениеФайлов, Ошибки)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//
// Процедура КодТНВЭДТСОкончаниеВводаТекста
//
// Описание:
//  производит попытку подбора элемента справочника по переданному тексту
//
// Параметры (название, тип, дифференцированное значение)
//  дублируют параметры вызова процедуры "ОкончаниеВводаТекста" поля ввода
//
Процедура КодТНВЭДТСОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка) Экспорт

    Попытка
        вр = Число(Текст)
    Исключение
        Возврат
    КонецПопытки;
    Если Найти(Текст, " ") Тогда
        Возврат
    КонецЕсли;
    Длина = СтрДлина(Текст);
    Если Длина <> 4 И Длина <> 6 И Длина <> 9 И Длина <> 10 Тогда
        Возврат
    КонецЕсли;
    НовыйТекст = "";
    Если Длина >= 4 Тогда
        НовыйТекст = Лев(Текст, 4)
    КонецЕсли;
    Если Длина >= 6 Тогда
        НовыйТекст = НовыйТекст + " " + Сред(Текст, 5, 2)
    КонецЕсли;
    Если Длина >= 9 Тогда
        НовыйТекст = НовыйТекст + " " + Сред(Текст, 7, 3)
    КонецЕсли;
    Если Длина = 10 Тогда
        НовыйТекст = НовыйТекст + " " + Прав(Текст, 1)
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
    Значение = Справочники.КлассификаторТНВЭДТС.НайтиПоКоду(НовыйТекст)

КонецПроцедуры

// Обновляет статус электронного счета-фактуры на портале по номеру
//
// Параметры:
//  Номер  - Строка(25) - номер электронного счета-фактуры
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе;
//                     0 - не нужно в любом случае
//                     1 - сохранить в случае получения статуса, отличного от: NOT_FOUND, ERROR
//                     2 - сохранить в любом случае
//  ДатаСостояния  - Дата - будет записана дата состояния
//  Статус  - ПеречислениеСсылка.СтатусыЭСЧФ - будет записан статус документа
//  ТекстОтвета  - Строка - строка с текстовой информацией ответа сервиса
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//  ЭлектронныйДокумент  - СправочникСсылка.ДокументыОбмена - будет записана ссылка на сохраненный в базе документ обмена
//  ПерезаписыватьИмеющиеся  - Булево - следует ли перезависывать найденный в базе по ИД документ
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Исходящий - Булево - это квитанция исходящего документа
//
Функция ОбновитьДанныеОСтатусеДокумента(Номер, СохранитьДокумент = Неопределено, ДатаСостояния = Неопределено, Статус = Неопределено, ТекстОтвета = Неопределено
										, ТекстОшибки = Неопределено, ЭлектронныйДокумент = Неопределено, ПерезаписыватьИмеющиеся = Ложь, РасположениеФайлов = Неопределено, Исходящий = Истина) Экспорт
	Возврат ЭСЧФобщий.ОбновитьДанныеОСтатусеДокумента(Номер, СохранитьДокумент, ДатаСостояния, Статус, ТекстОтвета, ТекстОшибки, ЭлектронныйДокумент, ПерезаписыватьИмеющиеся, РасположениеФайлов, Исходящий)
КонецФункции

Функция ТаблицаДанныхЗагрузкиДокументовСПортала() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номер",            Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(25, ДопустимаяДлина.Фиксированная)));
	Таблица.Колонки.Добавить("ДокументОбмена",   Новый ОписаниеТипов("СправочникСсылка.ДокументыОбмена"));
	Таблица.Колонки.Добавить("ВходящийДокумент", Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйСчетФактураПолученный"));
	
	Возврат Таблица

КонецФункции

Функция ТаблицаДанныхПодтвержденияДокументов() Экспорт

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ссылка",              Новый ОписаниеТипов("ДокументСсылка.ЭлектронныйСчетФактураПолученный"));
	Таблица.Колонки.Добавить("ДокументОбмена",      Новый ОписаниеТипов("СправочникСсылка.ДокументыОбмена"));
	Таблица.Колонки.Добавить("ПодписанныйДокумент", Новый ОписаниеТипов("СправочникСсылка.ДокументыОбмена"));
	Таблица.Колонки.Добавить("Принят",              Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Отправлен",           Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Ответ",               Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОшибкаФайла",         Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПоказатьЭСЧФ
//
// Описание:
//  показывает форму ЭСЧФ по номеру документа
//
// Параметры (название, тип, дифференцированное значение)
//  Номер - Строка(25) - строка номера документа
//  Организация - СправочникСсылка.Организации - организация-владелец ЭСЧФ
//  ОтправительУНП - Строка(9) - УНП отправителя
//  Документ - Структура, ДокументСсылка.ЭлектронныйСчетФактураВыданный - данные ЭСЧФ
//  Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, Товары - таблицы ЭСЧФ
//  ДокументОснование - ДокументСсылка - ссылка на документ-основание
//  ДокументСсылка - ДокументСсылка - ссылка на регистратор
//  Контрагент - СправочникСсылка.Контрагенты - контрагент-получатель в ЭСЧФ
//  ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов - договор контрагента
//  ВидОперации - ПеречислениеСсылка.ВидыОперацийЭСЧФ - вид операции ЭСЧФ
//  Информация - Массив - массив информационных сообщений
//  Владелец - УправляемаяФорма, ОбычнаяФора - владелец открываемой формы
//  Уникальность - Произвольный, Булево - аналогично параметру "Уникальность" функции платформы "ПолучитьФорму"
//
Процедура ПоказатьЭСЧФ( Номер, Организация, ОтправительУНП, Документ, Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, Товары
						, ДокументОснование, ДокументСсылка, Контрагент = Неопределено, ДоговорКонтрагента = Неопределено, ВидОперации = Неопределено
						, Информация = Неопределено, Владелец = Неопределено, Уникальность = Ложь ) Экспорт

	#Если ТолстыйКлиентОбычноеПриложение Тогда
	ФормаЭСЧФ = ПолучитьФорму( "ОбщаяФорма.ФормаЭСЧФобычная",, Владелец, Уникальность );
	#Иначе
	ФормаЭСЧФ = ПолучитьФорму( "ОбщаяФорма.ФормаЭСЧФ",, Владелец, Уникальность );
	#КонецЕсли
	ФормаЭСЧФ.Организация = Организация;
	ФормаЭСЧФ.ОтправительУНП = ОтправительУНП;
	ФормаЭСЧФ.Контрагент = Контрагент;
	ФормаЭСЧФ.ДоговорКонтрагента = ДоговорКонтрагента;
	ФормаЭСЧФ.Документ = Документ;
	ФормаЭСЧФ.Грузоотправители = Грузоотправители;
	ФормаЭСЧФ.Грузополучатели  = Грузополучатели;
	ФормаЭСЧФ.ДокументыПодтверждающиеПоставку = ДокументыПодтверждающиеПоставку;
	ФормаЭСЧФ.Товары = Товары;
	ФормаЭСЧФ.ДокументОснование = ДокументОснование;
	ФормаЭСЧФ.ДокументСсылка = ДокументСсылка;
	ФормаЭСЧФ.НомерЭСЧФ = Номер;
	ФормаЭСЧФ.Заголовок = "Электронный счёт-фактура №" + Номер;
	ФормаЭСЧФ.ВидОперации = ВидОперации;
	Попытка
		Если Документ.ИтогиВРеквизитах Тогда
			ФормаЭСЧФ.ИтогиВРеквизитах = Истина;
			ФормаЭСЧФ.ИтогоСтоимость = Документ.ИтогоСтоимость;
			ФормаЭСЧФ.ИтогоСтоимостьСНДС = Документ.ИтогоСтоимостьСНДС;
			ФормаЭСЧФ.ИтогоСуммаАкциза = Документ.ИтогоСуммаАкциза;
			ФормаЭСЧФ.ИтогоСуммаНДС = Документ.ИтогоСуммаНДС;
		КонецЕсли;
	Исключение КонецПопытки;
	Если Информация <> Неопределено Тогда
		ТипСтруктура = Тип("Структура");
		Для каждого цОшибка Из Информация Цикл
			НС = ФормаЭСЧФ.Ошибки.Добавить();
			Если ТипЗнч(цОшибка) = ТипСтруктура Тогда
				НС.Поле  = цОшибка.Поле;
				НС.Текст = цОшибка.Текст;
			Иначе
				НС.Текст = цОшибка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ФормаЭСЧФ.Открыть();

КонецПроцедуры //ПоказатьЭСЧФ

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПоказатьЭСЧФпоНомеру
//
// Описание:
//  выводит с проверкой печатную форму исходящего ЭСЧФ по номеру
//
// Параметры (название, тип, дифференцированное значение)
//  Номер - Строка(25) - номер электронного счета-фактуры
//  Владелец - УправляемаяФорма, ОбычнаяФора - владелец открываемой формы
//  Уникальность - Произвольный, Булево - аналогично параметру "Уникальность" функции платформы "ПолучитьФорму"
//
Процедура ПоказатьЭСЧФпоНомеру( Номер, Владелец = Неопределено, Уникальность = Ложь ) Экспорт

	Перем Год, Объект, НомерЧисло, Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, Товары, Информация;
	Перем СтатусПоставщика, СтатусПолучателя, СтавкаНДС;
	
	ЭСЧФобщий.РазложитьНомер(Номер, Год, Объект, НомерЧисло);
	
	ЗапросДанных = Новый Запрос;
	ЗапросДанных.УстановитьПараметр("Год",    Год);
	ЗапросДанных.УстановитьПараметр("Объект", Объект);
	ЗапросДанных.УстановитьПараметр("Номер",  НомерЧисло);
	ЗапросДанных.Текст = "ВЫБРАТЬ
	|	НомераЭСЧФ.Регистратор КАК ДокументСсылка,
	|	НомераЭСЧФ.Регистратор.Организация КАК Организация,
	|	НомераЭСЧФ.Регистратор.Организация.ИНН КАК ОтправительУНП,
	|	ВыставленныеДокументы.ДатаВыставления,
	|	ВыставленныеДокументы.Комментарий КАК ТекстСтатуса,
	|	НомераЭСЧФ.ДокументОснование,
	|	НомераЭСЧФ.Контрагент,
	|	НомераЭСЧФ.ДоговорКонтрагента,
	|	НомераЭСЧФ.СчетФактураПродавца,
	|	НомераЭСЧФ.Тип,
	|	НомераЭСЧФ.ДатаСовершенияОперации,
	|	НомераЭСЧФ.ОтобразитьПолучателю,
	|	НомераЭСЧФ.ДатаАннулирования,
	|	НомераЭСЧФ.КЭСЧФ,
	|	НомераЭСЧФ.Исходящий,
	|	НомераЭСЧФ.КодБланка,
	|	НомераЭСЧФ.ТипБСО,
	|	НомераЭСЧФ.НомерНакладной,
	|	НомераЭСЧФ.Дата,
	|	НомераЭСЧФ.ВидОперации,
	|	НомераЭСЧФ.СерияБланка
	|ИЗ
	|	РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыставленныеДокументы КАК ВыставленныеДокументы
	|		ПО НомераЭСЧФ.Год = ВыставленныеДокументы.Год
	|			И НомераЭСЧФ.Объект = ВыставленныеДокументы.Объект
	|			И НомераЭСЧФ.Номер = ВыставленныеДокументы.Номер
	|ГДЕ
	|	НомераЭСЧФ.Год = &Год
	|	И НомераЭСЧФ.Объект = &Объект
	|	И НомераЭСЧФ.Номер = &Номер";
	
	РезультатДанных = ЗапросДанных.Выполнить();
	Если РезультатДанных.Пустой() Тогда
		ТекстИсключения = "Не найден документ с номером №" + Номер;
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СтрокаРезультата = РезультатДанных.Выбрать();
	СтрокаРезультата.Следующий();
	
	Если ТипЗнч(СтрокаРезультата.ДокументСсылка) <> Тип("ДокументСсылка.ПакетИсходящихЭСЧФ") Тогда
		ОткрытьЗначение(СтрокаРезультата.ДокументСсылка);
		Возврат;
	КонецЕсли;
	
	ЗапросТовары = Новый Запрос;
	ЗапросТовары.УстановитьПараметр("Ссылка", СтрокаРезультата.ДокументСсылка);
	ЗапросТовары.УстановитьПараметр("Номер",  Номер);
	ЗапросТовары.Текст = "ВЫБРАТЬ
	|	ПакетИсходящихЭСЧФТовары.СтрокаНомер КАК НомерСтроки,
	|	ПакетИсходящихЭСЧФТовары.Товар,
	|	ПакетИсходящихЭСЧФТовары.КодТНВЭДЕАЭС,
	|	ПакетИсходящихЭСЧФТовары.КодОКЭД,
	|	ПакетИсходящихЭСЧФТовары.ЕдиницаИзмерения,
	|	ПакетИсходящихЭСЧФТовары.Количество,
	|	ПакетИсходящихЭСЧФТовары.Цена,
	|	ПакетИсходящихЭСЧФТовары.Стоимость,
	|	ПакетИсходящихЭСЧФТовары.СуммаАкциза,
	|	ПакетИсходящихЭСЧФТовары.СтавкаНДС,
	|	ПакетИсходящихЭСЧФТовары.СуммаНДС,
	|	ПакетИсходящихЭСЧФТовары.СтоимостьСНДС,
	|	ПакетИсходящихЭСЧФТовары.ТипСтавкиНДС,
	|	ПакетИсходящихЭСЧФТовары.ВычетВПолномОбъеме,
	|	ПакетИсходящихЭСЧФТовары.ОсвобождениеОтНДС,
	|	ПакетИсходящихЭСЧФТовары.РеализацияЗаПределамиРБ,
	|	ПакетИсходящихЭСЧФТовары.ВвознойНДС,
	|	ПакетИсходящихЭСЧФТовары.ПроцентНДС
	|ИЗ
	|	Документ.ПакетИсходящихЭСЧФ.ДокументыДляОтражения КАК ПакетИсходящихЭСЧФДокументыДляОтражения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПакетИсходящихЭСЧФ.Товары КАК ПакетИсходящихЭСЧФТовары
	|		ПО ПакетИсходящихЭСЧФДокументыДляОтражения.Ссылка = ПакетИсходящихЭСЧФТовары.Ссылка
	|			И ПакетИсходящихЭСЧФДокументыДляОтражения.НомерСтроки = ПакетИсходящихЭСЧФТовары.КлючСтроки
	|ГДЕ
	|	ПакетИсходящихЭСЧФТовары.Ссылка = &Ссылка
	|	И ПакетИсходящихЭСЧФДокументыДляОтражения.Ссылка = &Ссылка
	|	И ПакетИсходящихЭСЧФДокументыДляОтражения.НомерЭСЧФ = &Номер";
	
	Товары = ЗапросТовары.Выполнить().Выгрузить();
	
	ЭтоПеревыставление = ( СтрокаРезультата.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.Перевыставление") );
	Если ЭтоПеревыставление Тогда
		СтатусПоставщика = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Посредник");
		СтатусПолучателя = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Потребитель");
		СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
	КонецЕсли;
	
	Документ = Новый Структура;
	ЮрЛицо = ПредопределенноеЗначение("Перечисление.ЮрФизЛицо.ЮрЛицо");
	Грузоотправители = ЭСЧФобщий.ПолучитьТаблицуГрузоотправителиГрузополучателиЭСЧФ();
	Грузополучатели  = ЭСЧФобщий.ПолучитьТаблицуГрузоотправителиГрузополучателиЭСЧФ(Ложь);
	ДокументыПодтверждающиеПоставку = ЭСЧФобщий.ПолучитьТаблицуДокументовПоставкиЭСЧФ();
	// заполнение структуры пустыми значениями полей
	ЭСЧФобщий.ЗаполнитьСтруктуруПолейЭСЧФ(Документ, СтрокаРезультата.Тип);
	// дополняем данными из таблицы
	Документ.Вставить("НомерЭСЧФ",                  Номер);
	Документ.Вставить("ДатаСовершенияОперацииЭСЧФ", СтрокаРезультата.ДатаСовершенияОперации);
	Документ.Вставить("ТипЭСЧФ",                    СтрокаРезультата.Тип);
	Документ.Вставить("КЭСЧФ",                      СтрокаРезультата.КЭСЧФ);
	Документ.Вставить("ОтобразитьПолучателю",       СтрокаРезультата.ОтобразитьПолучателю);
	Документ.Вставить("ДатаАннулированияЭСЧФ",      СтрокаРезультата.ДатаАннулирования);
	Если ЗначениеЗаполнено(СтрокаРезультата.СчетФактураПродавца) Тогда
		Документ.Вставить("ПоставщикНомерСчетаПродавца",  СтрокаРезультата.СчетФактураПродавца.Номер);
		Документ.Вставить("ПоставщикДатаВыпискиПродавца", СтрокаРезультата.СчетФактураПродавца.ДатаСовершенияОперацииЭСЧФ);
	КонецЕсли;
	ЭСЧФобщий.ПолучитьЗначенияПолей(СтрокаРезультата.ДокументОснование, Документ, СтрокаРезультата.Контрагент, СтрокаРезультата.ДоговорКонтрагента
									, СтрокаРезультата.Исходящий, ЭСЧФобщий.СделкаСТоварамиПоПеречнюУказа287(Товары), СтатусПоставщика, СтатусПолучателя);
	ЭСЧФобщий.ДобавитьДокументПоставки(СтрокаРезультата.ДокументОснование, ДокументыПодтверждающиеПоставку, СтрокаРезультата.КодБланка, СтрокаРезультата.НомерНакладной
										, СтрокаРезультата.СерияБланка, СтрокаРезультата.Исходящий И Не ЭтоПеревыставление, СтрокаРезультата.ТипБСО, ?(ЭтоПеревыставление, Неопределено, СтрокаРезультата.Дата));
	Если СтрокаРезультата.ТипБСО = ПредопределенноеЗначение("Справочник.ТипыБСО.ТТН1") Тогда
		ЭСЧФобщий.ДобавитьГрузоотправителяГрузополучателя(СтрокаРезультата.ДокументОснование, Грузоотправители, Грузополучатели, СтрокаРезультата.Исходящий);
	КонецЕсли;
	ЭСЧФобщий.ЭСЧФСоответствуетПротоколу(Документ, СтрокаРезультата.ОтправительУНП, Товары, Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, СтрокаРезультата.Исходящий
											, СтрокаРезультата.Контрагент.ЮрФизЛицо = ЮрЛицо Или Не ЗначениеЗаполнено(СтрокаРезультата.Контрагент.ЮрФизЛицо),, Информация);
	ПоказатьЭСЧФ(Номер, СтрокаРезультата.Организация, СтрокаРезультата.ОтправительУНП, Документ, Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, Товары, СтрокаРезультата.ДокументОснование
					, СтрокаРезультата.ДокументСсылка, СтрокаРезультата.Контрагент, СтрокаРезультата.ДоговорКонтрагента, СтрокаРезультата.ВидОперации, Информация, Владелец, Уникальность);

КонецПроцедуры //ПоказатьЭСЧФпоНомеру

////////////////////////////////////////////////////////////////////////////////
//
// Процедура УстановитьПараметрСервисаКлиент
//
// Описание:
//  устанавливает значение параметра сервиса обмена данными с по-средствам вызова "SetServiceProperty"
//
// Параметры (название, тип, дифференцированное значение)
//  Отказ  - Булево - признак ошибки операции
//  Ошибки  - Строка, Массив - переменная для записи ошибки
//  Поле  - Строка, Неопределено - к какому элементу относиться ошибка
//
Процедура УстановитьПараметрСервисаКлиент( Параметр = "connection.readTimeout", Значение = 100, Отказ = Ложь, Ошибки = Неопределено, Поле = Неопределено ) Экспорт

	Попытка
		res = EInvVatService.SetServiceProperty( Параметр, Значение, 0 );
		Если res <> 0 Тогда
			врТекстОшибки = "Ошибка установки параметра сервиса: " + EInvVatService.LastError;
			ЭСЧФОбщий.ОтразитьОшибку(Ошибки, врТекстОшибки, Поле);
			Отказ = Истина;
		Иначе
			Отказ = Ложь;
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Если Ошибки <> Неопределено Тогда
			врТекстОшибки = "Ошибка установки параметра сервиса: " + ОписаниеОшибки();
			ЭСЧФОбщий.ОтразитьОшибку(Ошибки, врТекстОшибки, Поле);
		КонецЕсли;
	КонецПопытки;

КонецПроцедуры //УстановитьПараметрСервисаКлиент

////////////////////////////////////////////////////////////////////////////////
//
// Функция ВерсияКомпоненты
//
// Описание:
//  пытается получить версию компоненты методом 'Version'
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Строка(0) - верия компоненты
//  Неопределено - в случае неудачи
//
Функция ВерсияКомпонентыКлиент() Экспорт

	Перем Версия;
	
	Попытка
		Версия = EInvVatService.Version;
	Исключение КонецПопытки;
	
	Возврат Версия;

КонецФункции //ВерсияКомпоненты
