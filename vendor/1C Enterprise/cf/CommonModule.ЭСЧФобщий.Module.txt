
// Возвращает структуру с наименованиями обязательных полей шапки документа.
// Проверки выполняются согласно уловий описания полей документа описания web-сервиса,
// xsd-схемы, и xml-документов.
//
// Параметры:
//  вЭтоИсходящийДокумент  - Булево - признак исходящего документа
//  вСтруктураШапкиДокумента  - Структура - значения заполнения полей документа
//  вСтруктураОбязательныхПолей  - Структура - структура для заполнения
//
// Возвращаемое значение:
//   Структура   - структура с наименованиями обязательных полей
//
Функция ПолучитьСтруктуруОбязательныхПолейШапкиДокумента(вСтруктураШапкиДокумента, вЭтоИсходящийДокумент = Истина, вСтруктураОбязательныхПолей = Неопределено) Экспорт

    Если вСтруктураОбязательныхПолей = Неопределено Тогда
        вСтруктураОбязательныхПолей = Новый Структура;
    КонецЕсли;
    
    // Поля поставщика заполняем в любом случае, т.к. даже если это входящий документ, то он для нас
    // Обязательность-1
    вСтруктураОбязательныхПолей.Вставить("НомерЭСЧФ");
    // Обязательность-2
    вСтруктураОбязательныхПолей.Вставить("ТипЭСЧФ");
    // Обязательность-3
    вСтруктураОбязательныхПолей.Вставить("ДатаСовершенияОперацииЭСЧФ");
    // Обязательность-4
    вСтруктураОбязательныхПолей.Вставить("ПоставщикСтатус");
    // Обязательность-5
    вСтруктураОбязательныхПолей.Вставить("ПоставщикВзаимозависимоеЛицо");
    // Обязательность-6
    вСтруктураОбязательныхПолей.Вставить("ПоставщикРезидентОффшорнойЗоны");
    // Обязательность-7
    вСтруктураОбязательныхПолей.Вставить("ПоставщикСделкаСТоварамиПоПеречню");
    // Обязательность-8
    вСтруктураОбязательныхПолей.Вставить("ПоставщикВходитВПереченьКрупныхПлательщиков");
    // Обязательность-9
    вСтруктураОбязательныхПолей.Вставить("ПоставщикУНП");
    // Обязательность-10
    вСтруктураОбязательныхПолей.Вставить("Поставщик");
    // Обязательность-11
    вСтруктураОбязательныхПолей.Вставить("ПоставщикЮридическийАдрес");
    // Поля получателя заполняем если это входящий документ или есть получатель
    Если Не вЭтоИсходящийДокумент Или ЗначениеЗаполнено(вСтруктураШапкиДокумента.Контрагент) Тогда
        // Обязательность-9
        вСтруктураОбязательныхПолей.Вставить("ПолучательОрганизацияВключеннаяВПереченьКрупныхПлательщиков");
        // Обязательность-10
        вСтруктураОбязательныхПолей.Вставить("Получатель");
        // Обязательность-11
        вСтруктураОбязательныхПолей.Вставить("ПолучательЮридическийАдрес");
    КонецЕсли;
    // Обязательность-12
    вСтруктураОбязательныхПолей.Вставить("ПолучательСтатус");
    // Обязательность-13
    вСтруктураОбязательныхПолей.Вставить("ПолучательВзаимозависимоеЛицо");
    // Обязательность-14
    вСтруктураОбязательныхПолей.Вставить("ПолучательРезидентОффшорнойЗоны");
    // Обязательность-15
    вСтруктураОбязательныхПолей.Вставить("ПолучательСделкаСТоварамиПоПеречню");
    // Обязательность-16
    вСтруктураОбязательныхПолей.Вставить("ПолучательВходитВПереченьКрупныхПлательщиков");
    
    // Правила заполнения документа
    // Правило-1
    Если вСтруктураШапкиДокумента.ТипЭСЧФ = Перечисления.ТипыЭСЧФ.Дополнительный
        Или вСтруктураШапкиДокумента.ТипЭСЧФ = Перечисления.ТипыЭСЧФ.Исправленный Тогда
        вСтруктураОбязательныхПолей.Вставить("КЭСЧФ");
    КонецЕсли;
    // Правило-4
    Если вСтруктураШапкиДокумента.ТипЭСЧФ = Перечисления.ТипыЭСЧФ.Исправленный Тогда
        вСтруктураОбязательныхПолей.Вставить("ДатаАннулированияЭСЧФ");
    КонецЕсли;
    
    Возврат вСтруктураОбязательныхПолей

КонецФункции // ПолучитьСтруктуруОбязательныхПолейШапкиДокумента()

// Возвращает структуру с наименованиями обязательных полей шапки документа.
// Проверки выполняются согласно уловий описания полей документа описания web-сервиса,
// xsd-схемы, и xml-документов.
//
// Параметры:
//  вСтруктураОбязательныхПолей  - Структура - структура для заполнения
//  ТипЭСЧФ  - Перечисление.ТипыЭСЧФ - тип электронного счета-фактуры
//
// Возвращаемое значение:
//   Структура   - структура с наименованиями обязательных полей
//
Функция ПолучитьСтруктуруОбязательныхПолейТаблицыТоваров(вСтруктураОбязательныхПолей = Неопределено) Экспорт

    Если вСтруктураОбязательныхПолей = Неопределено Тогда
        вСтруктураОбязательныхПолей = Новый Структура;
    КонецЕсли;
    
    // Обязательность-17
    вСтруктураОбязательныхПолей.Вставить("Товар");
    // Обязательность-18
    вСтруктураОбязательныхПолей.Вставить("Стоимость");
    // Обязательность-19
    вСтруктураОбязательныхПолей.Вставить("СтавкаНДС");
    // Обязательность-20
    вСтруктураОбязательныхПолей.Вставить("ТипСтавкиНДС");
    // Обязательность-21
    вСтруктураОбязательныхПолей.Вставить("СуммаНДС");
    // Обязательность-22
    вСтруктураОбязательныхПолей.Вставить("СтоимостьСНДС");
    // Обязательность-23
    вСтруктураОбязательныхПолей.Вставить("ВсегоБезНДС");
    // Обязательность-24
    вСтруктураОбязательныхПолей.Вставить("ВсегоСуммаАкциза");
    // Обязательность-25
    вСтруктураОбязательныхПолей.Вставить("ВсегоСуммаНДС");
    // Обязательность-26
    вСтруктураОбязательныхПолей.Вставить("ВсегоСуммаСНДС");
    
    Возврат вСтруктураОбязательныхПолей

КонецФункции // ПолучитьСтруктуруОбязательныхПолейШапкиДокумента()

// Возвращает результат проверки корректности номера электронного счета-фактуры
// Ограничение - 1
//
// Параметры:
//  Номер  - Строка(25) - номер электронного счета-фактуры в формате 'UU9999999-9999-9999999999'
//  УНП  - Строка(9) - УНП белорусского субъекта хозяйствования
//  Год  - Число(4) - год электронного счета-фактуры
//  ПроверитьНаличие  - Булево - проверить наличие номера (использован)
//  Отказ  - Булево - дублирует возвращаемое значение
//  ТекстСообщения  - Неопределено, Массив - если передан массив, то будет дополнен структурами,
//                    содержамими имена полей в качестве ключей и текстами ошибок в качестве значений
//
// Возвращаемое значение:
//   Булево   - результат проверки номера на корректность
//
Функция НомерЭСЧФКорректен(Номер, УНП, Год, ПроверитьНаличие = Истина, Отказ = Ложь, ТекстСообщения = Неопределено) Экспорт

    // Из таблицы ограничения форматов документа описания web-сервиса, xsd-схем, и xml-документов:
    //
    // 9 первых цифр - УНП пользователя (белорусского субъекта хозяйствования),
    // который составляет ЭСЧФ, + 4 цифры года, в который составляется ЭСЧФ
    // + 10 цифр свободного номера по порядку.
    // Последовательность последних 10 цифр в году  для каждого УНП должна быть уникальна.
    // На начало каждого года, для каждого с/х (УНП) создается
    // последовательность номеров (десять разрядов) от 1 до 9999999999.
    // При заполнении ЭСЧФ, его номер формируется автоматически следующим образом:
    // УНП !! Год (текущий) !! свободный номер из последовательности. Для каждого ЭСЧФ номер
    // должен быть уникальным для данного УНП в текущем году.
    
    Перем лУНП, лГод, лНомер;
    
    РазложитьНомер(Номер, лГод, лУНП, лНомер);
    
    Если лУНП <> УНП Тогда
        Отказ = Истина;
        Если ТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(ТекстСообщения, "Первые девять цифр номера не соответствуют УНП", "УНП");
        КонецЕсли;
    КонецЕсли;
    
    ГодСтрокой = Формат(Год, "ЧЦ=4; ЧДЦ=; ЧС=; ЧН=0000; ЧГ=0");
    Если лГод <> ГодСтрокой Тогда
        Отказ = Истина;
        Если ТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(ТекстСообщения, "Год не соответствует номеру")
        КонецЕсли;
    КонецЕсли;
    
    Если ПроверитьНаличие Тогда
        
        лОтборПоНомеру = Новый Структура("Год, Объект, Номер");
        РазложитьНомер(Номер, лОтборПоНомеру.Год, лОтборПоНомеру.Объект, лОтборПоНомеру.Номер);
        Запрос = Новый Запрос("ВЫБРАТЬ
                              | НомераЭСЧФ.Активность
                              |ИЗ
                              | РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ
                              |ГДЕ
                              | НомераЭСЧФ.Год = &Год
                              | И НомераЭСЧФ.Объект = &Объект
                              | И НомераЭСЧФ.Номер = &Номер");
        Запрос.УстановитьПараметр("Год",    лОтборПоНомеру.Год);
        Запрос.УстановитьПараметр("Объект", лОтборПоНомеру.Объект);
        Запрос.УстановитьПараметр("Номер",  лОтборПоНомеру.Номер);
        
        Выборка = Запрос.Выполнить().Выбрать();
        
        Если Выборка.Следующий() И Выборка.Активность Тогда
            Отказ = Истина;
            Если ТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(ТекстСообщения, "Номер уже существует", "НомерЭСЧФ")
            КонецЕсли;
        КонецЕсли;
        
    КонецЕсли;
    
    Возврат Не Отказ

КонецФункции // НомерЭСЧФКорректен()

// Возвращает результат проверки корректности даты электронного счета-фактуры
// Ограничение-2
//
// Параметры:
//  Дата  - Дата, Строка - проверяемая дата
//
// Возвращаемое значение:
//   Булево   - результат проверки номера на корректность
//
Функция ПроверитьДату(Дата) Экспорт

    Если ТипЗнч(Дата) = Тип("Дата") Тогда
        Возврат Истина
    КонецЕсли;
    
    Попытка
        лДата = Дата(Дата);
        Возврат Истина
    Исключение
        Возврат Ложь
    КонецПопытки;

КонецФункции // ПроверитьДату()

// Возвращает результат проверки корректности УНП электронного счета-фактуры
// Ограничение-3
//
// Параметры:
//  УНП  - Строка - проверяемый УНП
//  ЮрЛицо  - Булево - признак юридического лица
//  ТекстСообщения  - Строка, Неопределено, Массив - если передан массив, будет дополнен структурами с ключами
//       с именами полей и значениями с текстами ошибок
//
// Возвращаемое значение:
//   Булево   - результат проверки номера на корректность
//
Функция УНПкорректен(УНП, ЮрЛицо = Истина, Отказ = Ложь, ТекстСообщения = Неопределено) Экспорт

    СтрДлина = СтрДлина(УНП);
    
    Если СтрДлина <> 9 Тогда
        Отказ = Истина;
        Если ТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(ТекстСообщения, "УНП должен быть длиной девять символов", "УНП");
        КонецЕсли;
    КонецЕсли;

    ДлинаСправа = ?(ЮрЛицо, 9, 7);
    
    ЧислоДляПроверки = Прав(УНП, ДлинаСправа);
    
    ДлинаПроверка = 0;
    КодНач = КодСимвола("0");
    КодКон = КодСимвола("9");
    Для й=10-ДлинаСправа По ДлинаСправа Цикл
        цКодСимвола = КодСимвола(УНП, й);
        Если цКодСимвола > КодНач И цКодСимвола < КодКон Тогда
            ДлинаПроверка = ДлинаПроверка + 1
        КонецЕсли;
    КонецЦикла;
    
    Если ДлинаПроверка <> ДлинаСправа Тогда
        Отказ = Истина;
        Если ТекстСообщения <> Неопределено Тогда
            ТекстОшибки = "Последние " + ЧислоПрописью(ДлинаПроверка, "Л = ru_RU; ДП = Истина; НП = Ложь; НД = Ложь;") + " символов дождны быть цифрами";
            ОтразитьОшибку(ТекстСообщения, ТекстОшибки, "УНП");
        КонецЕсли;
    КонецЕсли;
    
    Если ДлинаСправа = 7 Тогда
        КодНач = КодСимвола("A");
        КодКон = КодСимвола("Z");
        Код1 = КодСимвола(УНП, 1);
        Код2 = КодСимвола(УНП, 2);
        Если Код1 < КодНач Или Код1 > КодКон Или Код2 < КодНач Или Код2 > КодКон Тогда
            Отказ = Истина;
            Если ТекстСообщения <> Неопределено Тогда
                ТекстОшибки = "Первые две цифры УНП <" + УНП + "> должны быть большими латинскими";
                ОтразитьОшибку(ТекстСообщения, ТекстОшибки, "УНП");
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Возврат Не Отказ
    
КонецФункции // ПроверитьУНП()

// Добавляет ошибку в стек
//
// Параметры:
//  СтекОшибок  - Строка, Массив - переменная для записи ошибки
//  ТекстОшибки  - Строка, Произвольные данные - текст для записи или элемент для добавления в стек (Структура)
//  Поле  - Строка, Неопределено - к какому элементу относиться ошибка
//
Процедура ОтразитьОшибку(СтекОшибок, ТекстОшибки, Поле = Неопределено, Добавлять = Истина) Экспорт

    Если Поле <> Неопределено Тогда
        Ошибка = Новый Структура("Поле,Текст", Поле, ТекстОшибки)
    Иначе
        Ошибка = ТекстОшибки
    КонецЕсли;
    
    Если ТипЗнч(СтекОшибок) = Тип("Массив") Тогда
        СтекОшибок.Добавить(Ошибка)
    ИначеЕсли Добавлять И Не ПустаяСтрока(СтекОшибок) Тогда
        СтекОшибок = СтекОшибок + Символы.ПС + ТекстОшибки
    Иначе
        СтекОшибок = Ошибка
    КонецЕсли;

КонецПроцедуры // ОтразитьОшибку()

// Возвращает фабрику XDTO на основании схемы ИМНС
//
// Параметры:
//  вТипДокумента  - ПеречислениеСсылка.ТипыЭСЧФ - тип документа
//
// Возвращаемое значение:
//   ФабрикаXDTO, Неопределено   - фабрика XDTO на основании схемы ИМНС или неопределено,
//                                 если не верны входные данные или файл схемы не найден
//
Функция ПолучитьФабрикуXDTO(вТипДокумента) Экспорт

    Если вТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный") Тогда
        
        лИмяФайлаСхемы = "MNSATI_original.xsd"
        
    ИначеЕсли вТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") Тогда
        
        лИмяФайлаСхемы = "MNSATI_additional.xsd"
        
    ИначеЕсли вТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") Тогда
        
        лИмяФайлаСхемы = "MNSATI_fixed.xsd"
        
    ИначеЕсли вТипДокумента = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.ДополнительныйБезСсылки") Тогда
        
        лИмяФайлаСхемы = "MNSATI_add_no_reference.xsd"
        
    Иначе
        
        Возврат Неопределено
        
    КонецЕсли;
    
    лПутьКаталога = ПараметрыСеанса.XSD;
    лПутьФайлаСхемы = лПутьКаталога + лИмяФайлаСхемы;
    лФайлСхемы = Новый Файл(лПутьФайлаСхемы);
    Если Не лФайлСхемы.Существует() Тогда
        Возврат Неопределено
    КонецЕсли;
    
    Возврат СоздатьФабрикуXDTO(лПутьФайлаСхемы);

КонецФункции // ПолучитьФабрикуXDTO()

// Возвращает ОбъектXDTO для заполнения свойст электронного счета-фактуры
//
// Параметры:
//  вФабрикаXDTO  - ФабрикаXDTO - фабрика-XDTO, созданная на основании одной из схем МНС
//
// Возвращаемое значение:
//   ОбъектXDTO, Неопределено   - объект-XDTO для нужного документа или неопределено, если
//                                не верны входные данные или возникли ошибки
//
Функция ПолучитьОбъектДокументаXDTO(вФабрикаXDTO) Экспорт

    лПакетДокументаXDTO = вФабрикаXDTO.Пакеты.Получить("http://www.w3schools.com");
    лСвойствоXDTO = лПакетДокументаXDTO.КорневыеСвойства.Получить("issuance");
    // Если неопределено, то не верная фабрика
    Если лСвойствоXDTO = Неопределено Тогда
        Возврат Неопределено
    КонецЕсли;
    // создаём объект документа для заполнения
    лОбъектXDTO = вФабрикаXDTO.Создать(лСвойствоXDTO.Тип);
    // возвращаем объект
    Возврат лОбъектXDTO

КонецФункции // ПолучитьОбъектДокументаXDTO()

// Заполняет свойства ОбъектаXDTO в соответствии с именами объектами-XDTO из пакетов фабрики-XDTO
//
// Параметры:
//  вФабрикаXDTO  - ФабрикаXDTO - фабрика-XDTO, созданная на основании одной из схем МНС
//  вОбъектXDTO  - ОбъектXDTO - объект для заполнения свойств
//  вСвойствоXDTO  - СвойствоXDTO, Неопределено - свойство объекта-XDTO для заполнения
//  вКоллекцияСвойствXDTO  - КоллекцияСвойствXDTO, <Произвольная коллекцоия с возможностью обхода при момощи оператора "[]">, Неопределено - 
//                           коллекция свойтсв-XDTO для заполнения на основании переданной фабрики-XDTO
//
Процедура ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, вОбъектXDTO, вСвойствоXDTO = Неопределено, вКоллекцияСвойствXDTO = Неопределено) Экспорт

    // получаем пакеты для извлеления нужных типов
    лПакетыXDTO = вФабрикаXDTO.Пакеты.Получить("http://www.w3schools.com");
    лТипЗначенияXDTO = Тип("ТипЗначенияXDTO");
    // если передано одно свойство, то пытаемся заполнить только его
    Если вСвойствоXDTO <> Неопределено Тогда
        Если ТипЗнч(вСвойствоXDTO) = Тип("Строка") Тогда
            вСвойствоXDTO = вОбъектXDTO.Свойства().Получить(вСвойствоXDTO);
        КонецЕсли;
        лИмяСвойстваXDTO = вСвойствоXDTO.Имя;
        лТипXDTO = вСвойствоXDTO.Тип;
        Если ТипЗнч(лТипXDTO) = лТипЗначенияXDTO Или вОбъектXDTO[лИмяСвойстваXDTO] <> Неопределено Тогда
            Возврат // простые типы не нужно инициализитовать
        КонецЕсли;
        вОбъектXDTO[лИмяСвойстваXDTO] = вФабрикаXDTO.Создать(лТипXDTO);
        Возврат
    КонецЕсли;
    // получаем свойства для заполнения из пакета
    Если вКоллекцияСвойствXDTO = Неопределено Тогда
        вКоллекцияСвойствXDTO = вОбъектXDTO.Свойства();
    КонецЕсли;
    // заполняем имеющиеся в объекте свойства элементами из пакетов схемы
    Для каждого цСвойствоXDTO Из вКоллекцияСвойствXDTO Цикл
        цИмяСвойстваXDTO = цСвойствоXDTO.Имя;
        цТипXDTO = цСвойствоXDTO.Тип;
        Если ТипЗнч(цТипXDTO) = лТипЗначенияXDTO Тогда
            Продолжить // простые типы не нужно инициализитовать
        ИначеЕсли вОбъектXDTO[цИмяСвойстваXDTO] <> Неопределено Тогда
            Продолжить // не нужны лишние действия
        Иначе
            цОбъектXDTO = вФабрикаXDTO.Создать(цТипXDTO)
        КонецЕсли;
        вОбъектXDTO[цИмяСвойстваXDTO] = цОбъектXDTO;
    КонецЦикла;

КонецПроцедуры // ЗаполнитьСвойстваДокументаXDTO()

// Заполняет ОбъектXDTO на основании переданных данных
//
// Параметры:
//  вОбъект  - ДокументСсылка.ЭлектронныйСчетФактураВыданный,
//             ДокументСсылка.ЭлектронныйСчетФактураПолученный,
//             Структура
//             - документ ЭСЧФ или структура со значениями полей
//  вОбъектXDTO  - вОбъектXDTO - объект-XDTO для заполнения полей
//  вФабрикаXDTO  - ФабрикаXDTO - фабрика-XDTO, созданная на основании одной из схем МНС
//  вОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  вТовары  - Коллекция - таблица по товарам
//  вГрузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  вГрузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  вДокументы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  вЭтоИсходящийДокумент  - Булево - признак исходящего документа
//
Процедура ЗаполнитьДаннымиОбъектXDTO(вОбъект, вОбъектXDTO, вФабрикаXDTO, вОтправительУНП, вТовары, вГрузоотправители = Неопределено, вГрузополучатели = Неопределено,
                                     вДокументы = Неопределено, вЭтоИсходящийДокумент = Истина) Экспорт

    // инициализация объекта-XDTO
    ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, вОбъектXDTO);
    // инициализация структур для заполнения значений узлов документа
    лТипыЭСЧФ = Новый Соответствие;
    Перечисления.ТипыЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(лТипыЭСЧФ);
    лСтатусыПоставщика = Новый Соответствие;
    Перечисления.СтатусыПоставщикаЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(лСтатусыПоставщика);
    лСтатусыПолучателя = Новый Соответствие;
    Перечисления.СтатусыПолучателяЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(лСтатусыПолучателя);
    лТипыСтавокНДС = Новый Соответствие;
    Перечисления.ТипыСтавокНДСЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(лТипыСтавокНДС);
    
    лТипДокумента = вОбъект.ТипЭСЧФ;
    
    // Заполнение раздела 1 (основной раздел)
    // атрибут "sender"
    вОбъектXDTO.sender = вОтправительУНП;
    
    // элемент "general"
    general = вОбъектXDTO.general;
    ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, general);
    general.number = вОбъект.НомерЭСЧФ;
    
    //Если ЗначениеЗаполнено(вОбъект.ДатаВыставленияЭСЧФ) Тогда
    //    general.dateIssuance = вОбъект.ДатаВыставленияЭСЧФ
    //КонецЕсли;
    
    general.dateTransaction = вОбъект.ДатаСовершенияОперацииЭСЧФ;
    general.documentType    = лТипыЭСЧФ[лТипДокумента];
    
    // реквизиты исправленного документа
    Если лТипДокумента = Перечисления.ТипыЭСЧФ.Дополнительный Или лТипДокумента = Перечисления.ТипыЭСЧФ.Исправленный Тогда
        
        // номер счета-фактуры
        general.invoice = СокрЛП(вОбъект.КЭСЧФ);
        // для исправленного добавляем дату аннулирования старого документа
        Если лТипДокумента = Перечисления.ТипыЭСЧФ.Исправленный Тогда
            general.dateCancelled = вОбъект.ДатаАннулированияЭСЧФ;
        Иначе // для дополнительного нужен признак отображения получателю
            general.sendToRecipient = вОбъект.ОтобразитьПолучателю;
        КонецЕсли;
        
    КонецЕсли;
    
    // Заполнение раздела 2 (реквизиты поставщика)
    // заполнение элемента "provider"
    provider = вОбъектXDTO.provider;
    //ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, provider);
    
    Если лТипДокумента <> Перечисления.ТипыЭСЧФ.Дополнительный Тогда
        
        provider.providerStatus      = лСтатусыПоставщика[вОбъект.ПоставщикСтатус];
        provider.dependentPerson     = вОбъект.ПоставщикВзаимозависимоеЛицо;
        provider.residentsOfOffshore = вОбъект.ПоставщикРезидентОффшорнойЗоны;
        provider.specialDealGoods    = вОбъект.ПоставщикСделкаСТоварамиПоПеречню;
        provider.bigCompany          = вОбъект.ПоставщикВходитВПереченьКрупныхПлательщиков;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикКодСтраны) Тогда
            provider.countryCode = Число(вОбъект.ПоставщикКодСтраны)
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикУНП) Тогда
            provider.unp         = вОбъект.ПоставщикУНП
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикКодФилиала) Тогда
            provider.branchCode  = вОбъект.ПоставщикКодФилиала
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.Поставщик) Тогда
            provider.name        = вОбъект.Поставщик
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикЮридическийАдрес) Тогда
            provider.address     = вОбъект.ПоставщикЮридическийАдрес
        КонецЕсли;
        
        // заполнение элемента "principal"
        Если ЗначениеЗаполнено(СтрЗаменить(вОбъект.ПоставщикНомерСчетаКомитента, "-", "")) Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпискиКомитента) Тогда
            ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, provider, "principal");
            provider.principal.number     = вОбъект.ПоставщикНомерСчетаКомитента;
            provider.principal.date       = вОбъект.ПоставщикДатаВыпискиКомитента;
        КонецЕсли;
        
        // заполнение элемента "vendor"
        Если ЗначениеЗаполнено(СтрЗаменить(вОбъект.ПоставщикНомерСчетаПродавца, "-", "")) Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпискиПродавца) Тогда
            ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, provider, "vendor");
            provider.vendor.number     = вОбъект.ПоставщикНомерСчетаПродавца;
            provider.vendor.date       = вОбъект.ПоставщикДатаВыпискиПродавца;
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) Тогда
            provider.decraration = вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпускаТовара) Тогда
            provider.dateRelease      = вОбъект.ПоставщикДатаВыпускаТовара
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие) Тогда
            provider.dateActualExport = вОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие
        КонецЕсли;
        
        // заполнение элемента "taxes"
        Если ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров) Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров) Тогда
            ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, provider, "taxes");
            provider.taxes.number   = вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров;
            provider.taxes.date     = вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров;
        КонецЕсли;
        
        // Заполнение раздела 3 (реквизиты получателя)
        // заполнение элемента "recipient"
        recipient = вОбъектXDTO.recipient;
        //ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, recipient);
        recipient.recipientStatus     = лСтатусыПолучателя[вОбъект.ПолучательСтатус];
        recipient.dependentPerson     = вОбъект.ПолучательВзаимозависимоеЛицо;
        recipient.residentsOfOffshore = вОбъект.ПолучательРезидентОффшорнойЗоны;
        recipient.specialDealGoods    = вОбъект.ПолучательСделкаСТоварамиПоПеречню;
        recipient.bigCompany          = вОбъект.ПолучательВходитВПереченьКрупныхПлательщиков;
        
        Если ЗначениеЗаполнено(вОбъект.ПолучательКодСтраны) Тогда
            recipient.countryCode = Число(вОбъект.ПолучательКодСтраны)
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПолучательУНП) Тогда
            recipient.unp         = вОбъект.ПолучательУНП
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПолучательКодФилиала) Тогда
            recipient.branchCode  = вОбъект.ПолучательКодФилиала
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.Получатель) Тогда
            recipient.name        = вОбъект.Получатель
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПолучательЮридическийАдрес) Тогда
            recipient.address     = вОбъект.ПолучательЮридическийАдрес
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПолучательНомерДекларацииНаТовары) Тогда
            recipient.decraration = вОбъект.ПолучательНомерДекларацииНаТовары
        КонецЕсли;
        
        Если ЗначениеЗаполнено(вОбъект.ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров) Тогда
            recipient.dateImport  = вОбъект.ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров
        КонецЕсли;
        
        // заполнение элемента "taxes"
        Если ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) Или ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров) Тогда
            ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, recipient, "taxes");
            recipient.taxes.number    = вОбъект.ПолучательНомерЗаявленияОВвозеТоваров;
            recipient.taxes.date      = вОбъект.ПолучательДатаЗаявленияОВвозеТоваров;
        КонецЕсли;
        
        // Заполнение раздела 4 (реквизиты грузоотправителя и грузополучателя)
        // заполнение элемента "senderReceiver"
        ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, вОбъектXDTO.senderReceiver);
        senderReceiver    = вОбъектXDTO.senderReceiver;
        
        // заполнение списка "consignors" (грузоотправители)
        Если вГрузоотправители <> Неопределено И вГрузоотправители.Количество() Тогда
            
            // инициализация списка грузоотправителей
            //ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, senderReceiver.consignors, "consignors");
            
            Для каждого цГрузоотправитель Из вГрузоотправители Цикл
                
                // Содержит только простые типы, поэтому инициализировать не нужно
                newItem = вФабрикаXDTO.Создать(senderReceiver.consignors.consignor.ВладеющееСвойство.Тип);// consignors.Add();
                
                Если ЗначениеЗаполнено(цГрузоотправитель.КодСтраны) Тогда
                    newItem.countryCode = Число(цГрузоотправитель.КодСтраны)
                КонецЕсли;
                
                newItem.unp = цГрузоотправитель.УНП;
                
                Если ЗначениеЗаполнено(цГрузоотправитель.Наименование) Тогда
                    newItem.name = цГрузоотправитель.Наименование
                КонецЕсли;
                
                newItem.address = цГрузоотправитель.АдресОтправки;
                
                senderReceiver.consignors.consignor.Add(newItem);
                
            КонецЦикла;
            
        КонецЕсли;
        
        // заполнение списка "consignees" (Грузополучатели)
        Если вГрузополучатели <> Неопределено И вГрузополучатели.Количество() Тогда
            
            // инициализация списка грузополучателей
            //ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, senderReceiver.consignees, "consignees");
            
            Для каждого цГрузополучатель Из вГрузополучатели Цикл
                
                // Содержит только простые типы, поэтому инициализировать не нужно
                newItem = вФабрикаXDTO.Создать(senderReceiver.consignees.consignee.ВладеющееСвойство.Тип);//consignees.Add();
                
                Если ЗначениеЗаполнено(цГрузополучатель.КодСтраны) Тогда
                    newItem.countryCode = Число(цГрузополучатель.КодСтраны)
                КонецЕсли;
                
                newItem.unp = СокрЛП(цГрузополучатель.УНП);
                
                Если ЗначениеЗаполнено(цГрузополучатель.Наименование) Тогда
                    newItem.name = цГрузополучатель.Наименование
                КонецЕсли;
                
                newItem.address = цГрузополучатель.АдресДоставки;
                
                senderReceiver.consignees.consignee.Add(newItem);
                
            КонецЦикла;
            
        КонецЕсли;
        
        // Заполнение раздела 5 (условия поставки)
        // заполнение элемента "deliveryCondition"
        deliveryCondition = вОбъектXDTO.deliveryCondition;
        //ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, deliveryCondition);
        
        // заполнение реквизита "contract"
        // не проходит проверку, если вообще нету реквизиты
        ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, deliveryCondition, "contract");
        Если ЗначениеЗаполнено(вОбъект.ДоговорНомер) Или ЗначениеЗаполнено(вОбъект.ДоговорДата) Тогда
            deliveryCondition.contract.number = вОбъект.ДоговорНомер;
            deliveryCondition.contract.date   = вОбъект.ДоговорДата;
        КонецЕсли;
        
        // заполнение реквизита "description"
        Если ЗначениеЗаполнено(вОбъект.ДополнительныеСведения) Тогда
            deliveryCondition.description = СокрЛП(вОбъект.ДополнительныеСведения);
        КонецЕсли;
        
        Если вДокументы <> Неопределено И вДокументы.Количество() Тогда
            
            // если не указан номер и дата контракта, то заполняем свойство "documents"
            //Если deliveryCondition.contract = Неопределено Тогда
            //    ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, deliveryCondition, "contract");
            //КонецЕсли;
            Если deliveryCondition.contract.documents = Неопределено Тогда
                ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, deliveryCondition.contract, "documents")
            КонецЕсли;
            documents_ = deliveryCondition.contract.documents;
            
            Для каждого цДокумент Из вДокументы Цикл
                
                newItem = вФабрикаXDTO.Создать(documents_.document.ВладеющееСвойство.Тип);//documents_.Add();
                ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, newItem, newItem.docType);
                // поменяли реквизиты местами
                newItem.docType.code  = цДокумент.КодТипаБланка.Код;//Число(цДокумент.ТипБСО.Код);
                // нету в выгруженном документе с портала
                //Если ЗначениеЗаполнено(цДокумент.ТипБСО) Тогда
                //    newItem.docType.value = цДокумент.ТипБСО.Наименование
                //КонецЕсли;
                newItem.date = цДокумент.Дата;
                Если ЗначениеЗаполнено(цДокумент.ТипБСО) Тогда
                    Попытка
                        // в классификатор добавил некоторые служебные бланки, поэтому может не пройти на портале
                        КодТипаБланка = Число(цДокумент.ТипБСО.Код);
                        Если КодТипаБланка Тогда
                            newItem.blankCode = КодТипаБланка
						Иначе
							newItem.blankCode = ""
                        КонецЕсли;
					Исключение
						newItem.blankCode = ""
					КонецПопытки;
				Иначе
					newItem.blankCode = ""
                КонецЕсли;
                //Если ЗначениеЗаполнено(цДокумент.Серия) Тогда
                newItem.seria = цДокумент.Серия;
                //КонецЕсли;
                newItem.number = цДокумент.Номер;
                documents_.document.Add(newItem);
                
            КонецЦикла;
            
        КонецЕсли;
        
    КонецЕсли;
    
    // Заполнение раздела 6 (Данные по товарам (работам, услугам), имущественным правам)
    // заполнение элемента "roster"
    roster = вОбъектXDTO.roster;
    roster.totalCostVat = вТовары.Итог("СтоимостьСНДС");
    roster.totalExcise  = вТовары.Итог("СуммаАкциза");
    roster.totalVat     = вТовары.Итог("СуммаНДС");
    roster.totalCost    = вТовары.Итог("Стоимость");
    
    Для каждого лСтрока Из вТовары Цикл
        
        newItem = вФабрикаXDTO.Создать(roster.rosterItem.ВладеющееСвойство.Тип);//roster.Add();
        
        Если ЗначениеЗаполнено(лСтрока.НомерСтроки) Тогда
            // они имели в виду индекс
            newItem.number = лСтрока.НомерСтроки - 1
        КонецЕсли;
        
        newItem.name = СокрЛП(лСтрока.Товар);
        
        Если ЗначениеЗаполнено(лСтрока.КодТНВЭДЕАЭС) Тогда
            newItem.code = СтрЗаменить(СтрЗаменить(лСтрока.КодТНВЭДЕАЭС.Код, Символ(32), ""), Символ(160), "")
        КонецЕсли;
        
        Если ЗначениеЗаполнено(лСтрока.КодОКЭД) Тогда
            newItem.code_oced = Число(лСтрока.КодОКЭД.Код)
        КонецЕсли;
        
        Если ЗначениеЗаполнено(лСтрока.ЕдиницаИзмерения) Тогда
            newItem.units = Число(лСтрока.ЕдиницаИзмерения.Код)
        КонецЕсли;
        
        Если ЗначениеЗаполнено(лСтрока.Количество) Тогда
            newItem.count = лСтрока.Количество
        КонецЕсли;
        
        Если ЗначениеЗаполнено(лСтрока.Цена) Тогда
            newItem.price = лСтрока.Цена;
        КонецЕсли;
        
        newItem.cost = лСтрока.Стоимость;
        
        Если ЗначениеЗаполнено(лСтрока.СуммаАкциза) Тогда
            newItem.summaExcise = лСтрока.СуммаАкциза;
        КонецЕсли;
        // заполнение узла "vat"
        ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, newItem, "vat");
        //Если лСтрока.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Расчетная") Тогда
            newItem.vat.rate     = лСтрока.ПроцентНДС;
        //Иначе
        //    newItem.vat.rate     = УчетНДС.ПолучитьСтавкуНДС(лСтрока.СтавкаНДС);
        //КонецЕсли;
        newItem.vat.rateType = лТипыСтавокНДС[лСтрока.ТипСтавкиНДС];
        newItem.vat.summaVat = лСтрока.СуммаНДС;
        
        newItem.costVat = лСтрока.СтоимостьСНДС;
        
        Если лСтрока.ВычетВПолномОбъеме Или лСтрока.ОсвобождениеОтНДС
             Или лСтрока.РеализацияЗаПределамиРБ Или лСтрока.ВвознойНДС Тогда
             ЗаполнитьСвойстваДокументаXDTO(вФабрикаXDTO, newItem, "descriptions");
        КонецЕсли;
        
        Если лСтрока.ВычетВПолномОбъеме Тогда
            newItem.descriptions.description.Add("DEDUCTION_IN_FULL");
        КонецЕсли;
        
        Если лСтрока.ОсвобождениеОтНДС Тогда
            newItem.descriptions.description.Add("VAT_EXEMPTION");
        КонецЕсли;
        
        Если лСтрока.РеализацияЗаПределамиРБ Тогда
            newItem.descriptions.description.Add("OUTSIDE_RB");
        КонецЕсли;
        
        Если лСтрока.ВвознойНДС Тогда
            newItem.descriptions.description.Add("IMPORT_VAT");
        КонецЕсли;
        
        // добавляем строку
        roster.rosterItem.add(newItem);
        
    КонецЦикла;

КонецПроцедуры // ЗаполнитьДаннымиОбъектXDTO()

// Возвращает результат проверки заполнения электронного счета-фактуры
//
// Параметры:
//  вОбъект  - ДокументОбъект.ЭлектронныйСчетФактураВыданный,
//             ДокументОбъект.ЭлектронныйСчетФактураПолученный,
//             Структура
//             - объект проверки
//  вОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  вТовары  - Коллекция - таблица по товарам
//  вГрузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  вГрузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  вДокументы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  вЭтоИсходящийДокумент  - признак исходящего документа
//  вПоставщикЮрЛицо  - является ли поставщик юр. лицом либо физ. лицом
//  вОтказ  - Булево - признак корректности заполнения документа (Истина - не корректно)
//  вТекстСообщения  - Массив, Неопределено - если передан массив, то будет дополнен элементами типа "Структура",
//                     содержащими в качестве ключа значения неверных полей, а в качестве значения - текст ошибки
//
// Возвращаемое значение:
//   Булево   - результат проверки
//
Функция ЭСЧФСоответствуетПротоколу(вОбъект, вОтправительУНП, вТовары, вГрузоотправители = Неопределено, вГрузополучатели = Неопределено, вДокументы = Неопределено,
                                   вЭтоИсходящийДокумент = Истина, вПоставщикЮрЛицо = Истина, вОтказ = Ложь, вТекстСообщения = Неопределено) Экспорт

    Перем лРодительскийДокумент; // Запись регистра сведений "Номера ЭСЧФ"
    
    лСтатусПоставщика       = вОбъект.ПоставщикСтатус;
    лСтатусПолучателя       = вОбъект.ПолучательСтатус;
    лСтатусыПоставщика      = Перечисления.СтатусыПоставщикаЭСЧФ;
    лСтатусыПолучателя      = Перечисления.СтатусыПолучателяЭСЧФ;
    лНомерСчетаКоминтента   = вОбъект.ПоставщикНомерСчетаКомитента;
    лДатаВыпискиКомитента   = вОбъект.ПоставщикДатаВыпискиКомитента;
    лНомерСчетаПродавца     = вОбъект.ПоставщикНомерСчетаПродавца;
    лДатаВыпискиПродавца    = вОбъект.ПоставщикДатаВыпискиПродавца;
    лКодСтраныПоставщика    = вОбъект.ПоставщикКодСтраны;
    лКодСтраныПолучателя    = вОбъект.ПолучательКодСтраны;
    // ошибки при проверке на портале, если не заполнен код страны
    //лСтранаПоставщикаРБ     = ( Не ЗначениеЗаполнено(лКодСтраныПоставщика) Или лКодСтраныПоставщика = "112" );
    //лСтранаПолучателяРБ     = ( Не ЗначениеЗаполнено(лКодСтраныПолучателя) Или лКодСтраныПолучателя = "112" );
    лСтранаПоставщикаРБ     = ( лКодСтраныПоставщика = "112" );
    лСтранаПолучателяРБ     = ( лКодСтраныПолучателя = "112" );
    лКодСтраныПолучателя    = вОбъект.ПолучательКодСтраны;
    лУНПпоставщика          = вОбъект.ПоставщикУНП;
    лУНПполучателя          = вОбъект.ПолучательУНП;
    лКодыСтранСНГ           = Новый Массив;
    лКодыСтранСНГ.Добавить("051");
    лКодыСтранСНГ.Добавить("112");
    лКодыСтранСНГ.Добавить("398");
    лКодыСтранСНГ.Добавить("417");
    лКодыСтранСНГ.Добавить("643");
    // ошибки при проверке на портале, если не заполнен код страны
    //лСтранаПоставщикаЕАЭС = ( Не ЗначениеЗаполнено(лКодСтраныПоставщика) Или лКодыСтранСНГ.Найти(лКодСтраныПоставщика) <> Неопределено );
    //лСтранаПолучателяЕАЭС = ( Не ЗначениеЗаполнено(лКодСтраныПолучателя) Или лКодыСтранСНГ.Найти(лКодСтраныПолучателя) <> Неопределено );
    лСтранаПоставщикаЕАЭС = ( лКодыСтранСНГ.Найти(лКодСтраныПоставщика) <> Неопределено );
    лСтранаПолучателяЕАЭС = ( лКодыСтранСНГ.Найти(лКодСтраныПолучателя) <> Неопределено );
    лРеквизитыДекларацийНаТоварыЗаполнены = ( ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) И ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпускаТовара)
                                              И ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие) );
    лРеквизитыЗаявленияОВвозеТоваров = ( ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров) И ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров) );
	лСтатусыПосредничество = ( ( лСтатусПоставщика = лСтатусыПоставщика.Посредник Или лСтатусПоставщика = лСтатусыПоставщика.Заказчик ) И лСтатусПолучателя = лСтатусыПолучателя.Потребитель );
	лСтатусыКомиссия = ( лСтатусПоставщика = лСтатусыПоставщика.Комиссионер И лСтатусПолучателя = лСтатусыПолучателя.Комитент );
    лСтатусыКомиссияПосредничество = ( лСтатусыКомиссия Или лСтатусыПосредничество );
    лСтатусыПродавецПокупатель = ( лСтатусПоставщика = лСтатусыПоставщика.Продавец И лСтатусПолучателя = лСтатусыПолучателя.Покупатель );
	лСтатусыИностраннаяОрганизацияПокупатель = ( лСтатусПоставщика = лСтатусыПоставщика.ИностраннаяОрганизация И лСтатусПолучателя = лСтатусыПолучателя.Покупатель );
	лЕстьГрузоотправитель = ( вГрузоотправители <> Неопределено И вГрузоотправители.Количество() );
    лЕстьГрузополучатель  = ( вГрузополучатели <> Неопределено И вГрузополучатели.Количество() );
    лЕстьДокументы        = ( вДокументы <> Неопределено И вДокументы.Количество() );
	лЭтоИсходныйИсправленный = ( вОбъект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный") Или вОбъект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") );
	
	// без товаром не проходит проверку
	Если Не вТовары.Количество() Тогда
		вОтказ = Истина;
		Если вТекстСообщения <> Неопределено Тогда
			ОтразитьОшибку(вТекстСообщения, "Отправить ЭСЧФ без товаров можно только с видом <Исправленный>")
		КонецЕсли;
	КонецЕсли;
	
    // Обязательность заполнения-1
    Если Не ЗначениеЗаполнено(СтрЗаменить(вОбъект.НомерЭСЧФ, "-", "")) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Номер ЭСЧФ> обязательно для заполнения", "НомерЭСЧФ")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-2
    Если Не ЗначениеЗаполнено(вОбъект.ТипЭСЧФ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Тип ЭСЧФ> обязательно для заполнения", "ТипЭСЧФ")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-3
    Если Не ЗначениеЗаполнено(вОбъект.ДатаСовершенияОперацииЭСЧФ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Дата совершения операции> обязательно для заполнения", "ДатаСовершенияОперацииЭСЧФ")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-4
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикСтатус) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Статус поставщика> обязательно для заполнения", "ПоставщикСтатус")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-5
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикВзаимозависимоеЛицо) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Взаимозависимое лицо> обязательно для заполнения", "ПоставщикВзаимозависимоеЛицо")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-6
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикРезидентОффшорнойЗоны) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Резидент оффшорной зоны> обязательно для заполнения", "ПоставщикРезидентОффшорнойЗоны")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-7
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикСделкаСТоварамиПоПеречню) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Сделка с товарами по перечню, определяемому Правительством Республики Беларусь, в соответствии с
                                            |подпунктом. 1.3 пункта 1 статьи 30-1 налогового кодекса> обязательно для заполнения", "ПоставщикСделкаСТоварамиПоПеречню")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-8
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикВходитВПереченьКрупныхПлательщиков) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Организация, включенная в перечень крупных плательщиков> обязательно для заполнения", "ПоставщикВходитВПереченьКрупныхПлательщиков")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-9
    Если Не ЗначениеЗаполнено(лУНПпоставщика) И Не ЗначениеЗаполнено(лУНПполучателя) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Должен быть заполнен хотя бы один реквизит: <УНП поставщика>, <УНП получателя>", "ПоставщикУНП");
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-10
    Если Не ЗначениеЗаполнено(вОбъект.Поставщик) И Не ЗначениеЗаполнено(вОбъект.Получатель) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Должен быть заполнен хотя бы один реквизит: <Наименование поставщика>, <Наименование получателя>", "Поставщик");
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-11
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикЮридическийАдрес) И Не ЗначениеЗаполнено(вОбъект.ПолучательЮридическийАдрес) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Должен быть заполнен хотя бы один реквизит: <Юр. ардес поставщика>, <Юр. ардес получателя>", "ПоставщикЮридическийАдрес");
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-12
    Если Не ЗначениеЗаполнено(вОбъект.ПолучательСтатус) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Статус получателя> обязательно для заполнения", "ПолучательСтатус")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-13
    Если Не ЗначениеЗаполнено(вОбъект.ПолучательВзаимозависимоеЛицо) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Взаимозависимое лицо> обязательно для заполнения", "ПолучательВзаимозависимоеЛицо")
        КонецЕсли;
    КонецЕсли;
    
    // Обязательность заполнения-14
    Если Не ЗначениеЗаполнено(вОбъект.ПолучательРезидентОффшорнойЗоны) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Резидент оффшорной зоны> обязательно для заполнения", "ПолучательРезидентОффшорнойЗоны")
        КонецЕсли;
    КонецЕсли;
    
	// Обязательность заполнения-15
	Если Не ЗначениеЗаполнено(вОбъект.ПолучательСделкаСТоварамиПоПеречню) Тогда
	    вОтказ = Истина;
	    Если вТекстСообщения <> Неопределено Тогда
	        ОтразитьОшибку(вТекстСообщения, "Поле <Сделка с товарами по перечню, определяемому Правительством Республики Беларусь, в соответствии с подпунктом.
	                                        | 1.3 пункта 1 статьи 30-1 налогового кодекса> обязательно для заполнения", "ПолучательСделкаСТоварамиПоПеречню")
	    КонецЕсли;
	КонецЕсли;
    
    // Обязательность заполнения-16
    Если Не ЗначениеЗаполнено(вОбъект.ПолучательВходитВПереченьКрупныхПлательщиков) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Организация, включенная в перечень крупных плательщиков> обязательно для заполнения", "ПолучательВходитВПереченьКрупныхПлательщиков")
        КонецЕсли;
    КонецЕсли;
        
    // из схемы следует, что дата и номер должны быть заполнены (если указаны)
    Если ЗначениеЗаполнено(вОбъект.ДоговорНомер) И Не ЗначениеЗаполнено(вОбъект.ДоговорДата) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Дата договора> обязательно для заполнения, если указан договор", "ДоговорДата")
        КонецЕсли;
    ИначеЕсли ЗначениеЗаполнено(вОбъект.ДоговорДата) И Не ЗначениеЗаполнено(вОбъект.ДоговорНомер) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Номер договора> обязательно для заполнения, если указан договор", "ДоговорНомер")
        КонецЕсли;
    КонецЕсли;
    
    // проверка заполнения реквизитов поставщика/получателя
    Если Не ( ЗначениеЗаполнено(лКодСтраныПоставщика) Или ЗначениеЗаполнено(лУНПпоставщика) Или ЗначениеЗаполнено(вОбъект.Поставщик) Или ЗначениеЗаполнено(вОбъект.ПоставщикЮридическийАдрес) ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поля: <Код страны поставщика>, <УНП (поставщик)>, <Поставщик (наименование)>, <Юридический адрес (поставщик)> - обязательны для заполнения", "Поставщик")
        КонецЕсли;
    КонецЕсли;
    
    лЗаполненПолучатель = ( ЗначениеЗаполнено(лКодСтраныПолучателя) Или ЗначениеЗаполнено(лУНПполучателя) Или ЗначениеЗаполнено(вОбъект.Получатель) Или ЗначениеЗаполнено(вОбъект.ПолучательЮридическийАдрес) );
    
    Если лЗаполненПолучатель И Не ( ЗначениеЗаполнено(лКодСтраныПоставщика) Или ЗначениеЗаполнено(лУНПпоставщика) Или ЗначениеЗаполнено(вОбъект.Поставщик) Или ЗначениеЗаполнено(вОбъект.ПоставщикЮридическийАдрес) ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если выбран получатель, то поля: <Код страны получателя>, <УНП (получатель)>, <Получатель (наименование)>, <Юридический адрес (получатель)> - обязательны для заполнения", "Получатель")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-1
    лТипЭСЧФ = вОбъект.ТипЭСЧФ;
    лКЭСЧФ   = вОбъект.КЭСЧФ;
    Если лТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") Или лТипЭСЧФ =ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный")
        И Не ЗначениеЗаполнено(СтрЗаменить(лКЭСЧФ,"-","")) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <К ЭСЧф> обязательно для заполнения, если тип документа Дополнителный или Исправленный", "КЭСЧФ")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-2
    Если ЗначениеЗаполнено(СтрЗаменить(лКЭСЧФ,"-","")) Тогда
        
        лУНП    = Неопределено;
        лГод    = Неопределено;
        лНомер  = Неопределено;
        РазложитьНомер(лКЭСЧФ, лГод, лУНП, лНомер);
        
        ЗапросКЭСЧФ = Новый Запрос("ВЫБРАТЬ
                                   |    НомераЭСЧФ.Тип,
								   |	НомераЭСЧФ.Объект,
                                   |    НомераЭСЧФ.ДатаСовершенияОперации
                                   |ИЗ
                                   |    РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ
                                   |ГДЕ
                                   |    НомераЭСЧФ.Год = &Год
                                   |    И НомераЭСЧФ.Объект = &Объект
                                   |    И НомераЭСЧФ.Номер = &Номер");
        ЗапросКЭСЧФ.УстановитьПараметр("Год",    лГод);
        ЗапросКЭСЧФ.УстановитьПараметр("Объект", лУНП);
        ЗапросКЭСЧФ.УстановитьПараметр("Номер",  лНомер);
        
        ВыборкаКЭСЧФ = ЗапросКЭСЧФ.Выполнить().Выбрать();
        
        Если ВыборкаКЭСЧФ.Следующий() Тогда
            лРодительскийДокумент = ВыборкаКЭСЧФ
        КонецЕсли;
        
        Если Не ВыборкаКЭСЧФ.Количество() Тогда
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Счёт-фактура не найден", "КЭСЧФ")
            КонецЕсли;
            
        ИначеЕсли ВыборкаКЭСЧФ.Тип <> ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный")
            И ВыборкаКЭСЧФ.Тип <> ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") Тогда
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "При ссылке на существующий ЭСЧФ можно ввести номер только Исходного или Исправленного", "КЭСЧФ")
            КонецЕсли;
			
		ИначеЕсли ВыборкаКЭСЧФ.Тип = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") И вОбъект.ДатаСовершенияОперации < лРодительскийДокумент.ДатаСовершенияОперации Тогда // Правило-1.1
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Дата совершения дополнительного ЭСЧФ не должна быть меньше (раньше) даты совершения исходного (исправленного) ЭСЧФ", "КЭСЧФ")
            КонецЕсли;
			
        КонецЕсли;
    
        // Правило-3
        лМенеджерЗаписиКнитанцииИсправляемый = РегистрыСведений.Квитанции.СоздатьМенеджерЗаписи();
        лМенеджерЗаписиКнитанцииИсправляемый.Год    = лГод;
        лМенеджерЗаписиКнитанцииИсправляемый.Объект = лУНП;
        лМенеджерЗаписиКнитанцииИсправляемый.Номер  = лНомер;
        лМенеджерЗаписиКнитанцииИсправляемый.Прочитать();
        
        Если Не лМенеджерЗаписиКнитанцииИсправляемый.Выбран() Тогда
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Нет квитанции по данному счету-фактуре", "КЭСЧФ")
            КонецЕсли;
            
        ИначеЕсли лМенеджерЗаписиКнитанцииИсправляемый.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Выставлен")
            И лМенеджерЗаписиКнитанцииИсправляемый.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленПодписанПолучателем") Тогда
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "ЭСЧФ должен быть со статусом <Выставлен> или <Выставлен. Подписан получателем>", "КЭСЧФ")
            КонецЕсли;
            
		КонецЕсли;
		
		// Правило-3.1
		Если вОтправительУНП <> лРодительскийДокумент.Объект Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "У родительского и дочерних ЭЧСФ должен быть один составитель (sender)", "КЭСЧФ")
            КонецЕсли;
		КонецЕсли;
        
    КонецЕсли;
    
    // Правило-4
    Если лТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") И Не ЗначениеЗаполнено(вОбъект.ДатаАннулированияЭСЧФ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Обязательное поля для, если тип счёт-фактуры <Исправленный>", "ДатаАннулированияЭСЧФ")
        КонецЕсли;
    КонецЕсли;
	
	//{[-](фрагмент удален)Макей Евгений Владимирович 21.09.2016 16:50:08
	//// Правило-5
	//Если лТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") И лРодительскийДокумент <> Неопределено
	//    И ( вОбъект.ДатаАннулированияЭСЧФ <> вОбъект.ДатаСовершенияОперацииЭСЧФ
	//    Или вОбъект.ДатаАннулированияЭСЧФ <> лРодительскийДокумент.ДатаСовершенияОперации ) Тогда
	//    
	//    вОтказ = Истина;
	//    Если вТекстСообщения <> Неопределено Тогда
	//        ОтразитьОшибку(вТекстСообщения, "Дата аннулирования у исправленного может быть либо равно дате совершения Исходного (родителя), либо дате совершения исправленного", "ДатаАннулированияЭСЧФ")
	//    КонецЕсли;
	//    
	//КонецЕсли;
	//}Макей Евгений Владимирович 21.09.2016 16:50:08
    
    // Правило-5.1
    Если лТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") И лРодительскийДокумент <> Неопределено И вОбъект.ДатаАннулированияЭСЧФ < вОбъект.ДатаАннулированияЭСЧФ Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Дата аннулирования не должна быть меньше даты совершения одного ЭСЧФ", "ДатаАннулированияЭСЧФ")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-6
    // Правило-6
    Если Не СтатусыПоставщикаИПолучателяСоответствуют(лСтатусПоставщика, лСтатусПолучателя) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "<Статус поставщика> не соответствует статусу получателя", "ПоставщикСтатус");
            ОтразитьОшибку(вТекстСообщения, "<Статус получателя> не соответствует статусу поставщика", "ПолучательСтатус")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-7
    Если Не вЭтоИсходящийДокумент И вОбъект.ПоставщикВзаимозависимоеЛицо Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если субъект хозяйствования, составляющий ЭСЧФ является получателем в ЭСЧФ, то поле <Взаимозависимое лицо (поставщик)> должно быть пустым"
                                          , "ПоставщикВзаимозависимоеЛицо");
        КонецЕсли;
    КонецЕсли;
    
    Если Не вЭтоИсходящийДокумент И вОбъект.ПоставщикРезидентОффшорнойЗоны Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если субъект хозяйствования, составляющий ЭСЧФ является получателем в ЭСЧФ, то поле <Сделка с резидентом оффшорной зоны (поставщик)> должно быть пустым"
                                          , "ПоставщикРезидентОффшорнойЗоны");
        КонецЕсли;
    КонецЕсли;
    
    Если Не вЭтоИсходящийДокумент И вОбъект.ПоставщикСделкаСТоварамиПоПеречню Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если субъект хозяйствования, составляющий ЭСЧФ является получателем в ЭСЧФ, то поле <Сделка с товарами по перечню, определяемому
                                            | Правительством Республики Беларусь, в соответствии с подпунктом 1.3 пункта 1 статьи 30-1 НК (поставщик)> должно быть пустым"
                                          , "ПоставщикСделкаСТоварамиПоПеречню");
        КонецЕсли;
    КонецЕсли;
    
    Если Не вЭтоИсходящийДокумент И вОбъект.ПоставщикВходитВПереченьКрупныхПлательщиков Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если субъект хозяйствования, составляющий ЭСЧФ является получателем в ЭСЧФ, то поле <Организация, включенная в перечень крупных плательщиков (поставщик)>
                                            | должно быть пустым", "ПоставщикВходитВПереченьКрупныхПлательщиков");
        КонецЕсли;
    КонецЕсли;
    
    // Правило-9
    Если лСтатусПоставщика = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация") И лСтранаПоставщикаРБ Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Для статуса поставщика <Иностранная организация> нельзя указывать код страны РБ", "ПоставщикКодСтраны")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-10
    Если лСтатусПоставщика <> ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация") И лУНПпоставщика <> вОтправительУНП Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если указан любой статус, кроме <Иностранная организация (поставщик)>, то УНП поставщика должен соответствовать УНП субъекта хозяйствования, составляющего ЭСЧФ"
                                          , "ПоставщикУНП")
        КонецЕсли;
    КонецЕсли;
    // Правило-11
    Если лУНПпоставщика <> вОтправительУНП И лУНПполучателя <> вОтправительУНП Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "В разделе поставщика или получателя должен быть прописан номер УНП, указанный в качестве отправителя", "ПоставщикУНП")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-12
    Если лУНПпоставщика = лУНПполучателя Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Номер УНП продавца и получателя не должны быть одинаковыми в одном ЭСЧФ", "ПоставщикУНП")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-13
    //   на данный момент нет возможности проверить, т.к. нет информации о проверке существования УНП в реестре налогоплательщиков
	
	// Правило-13.1
	Если лСтранаПоставщикаРБ И ЗначениеЗаполнено(лУНПпоставщика) И Не ЗначениеЗаполнено(вОбъект.Поставщик) Тогда
		вОтказ = Истина;
		Если вТекстСообщения <> Неопределено Тогда
			ОтразитьОшибку(вТекстСообщения, "Название поставщика обязательно, если указана страна РБ и заполнен УНП", "Поставщик")
		КонецЕсли;
	КонецЕсли;
	
	Если лСтранаПолучателяРБ И ЗначениеЗаполнено(лУНПполучателя) И Не ЗначениеЗаполнено(вОбъект.Получатель) Тогда
		вОтказ = Истина;
		Если вТекстСообщения <> Неопределено Тогда
			ОтразитьОшибку(вТекстСообщения, "Название получателя обязательно, если указана страна РБ и заполнен УНП", "Поставщик")
		КонецЕсли;
	КонецЕсли;
	
	// Правило-14
    //  отменено закомментированное
    //Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаКоминтента, "-", "")) И Не ЗначениеЗаполнено(лДатаВыпискиКомитента) Тогда
    //    вОтказ = Истина;
    //    Если вТекстСообщения <> Неопределено Тогда
    //        ОтразитьОшибку(вТекстСообщения, "Укажите дату ЭСЧФ комитента (поставщик) или удалите номер ЭСЧФ комитента", "ПоставщикДатаВыпискиКомитента")
    //    КонецЕсли;
    //КонецЕсли;
    //
    //Если Не ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаКоминтента, "-", "")) И ЗначениеЗаполнено(лДатаВыпискиКомитента) Тогда
    //    вОтказ = Истина;
    //    Если вТекстСообщения <> Неопределено Тогда
    //        ОтразитьОшибку(вТекстСообщения, "Укажите номер ЭСЧФ комитента (поставщик) или удалите дату ЭСЧФ комитента", "ПоставщикНомерСчетаКомитента")
    //    КонецЕсли;
    //КонецЕсли;
    //
    //Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаПродавца, "-", "")) И Не ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпискиПродавца) Тогда
    //    вОтказ = Истина;
    //    Если вТекстСообщения <> Неопределено Тогда
    //        ОтразитьОшибку(вТекстСообщения, "Укажите дату ЭСЧФ продавца (поставщик) или удалите номер ЭСЧФ продавца", "ПоставщикДатаВыпискиПродавца")
    //    КонецЕсли;
    //КонецЕсли;
    //
    //Если Не ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаПродавца, "-", "")) И ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпискиПродавца) Тогда
    //    вОтказ = Истина;
    //    Если вТекстСообщения <> Неопределено Тогда
    //        ОтразитьОшибку(вТекстСообщения, "Укажите номер ЭСЧФ продавца (поставщик) или удалите дату ЭСЧФ продавца", "ПоставщикНомерСчетаПродавца")
    //    КонецЕсли;
    //КонецЕсли;
    
    Если ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров) И Не ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Укажите дату заявления о ввозе товаров (поставщик) или удалите номер заявления о ввозе товаров", "ПоставщикДатаЗаявленияОВвозеТоваров")
        КонецЕсли;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров) И ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Укажите дату номер заявления о ввозе товаров (поставщик) или удалите заявления о ввозе товаров", "ПоставщикНомерЗаявленияОВвозеТоваров")
        КонецЕсли;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) И Не ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Укажите дату заявления о ввозе товаров (получатель) или удалите номер заявления о ввозе товаров", "ПолучательДатаЗаявленияОВвозеТоваров")
        КонецЕсли;
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) И ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Укажите дату номер заявления о ввозе товаров (получатель) или удалите заявления о ввозе товаров", "ПолучательНомерЗаявленияОВвозеТоваров")
        КонецЕсли;
    КонецЕсли;
    
    //// Правило-15
    //Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаКоминтента, "-", "")) И ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаПродавца, "-", "")) Тогда
    //    вОтказ = Истина;
    //    Если вТекстСообщения <> Неопределено Тогда
    //        ОтразитьОшибку(вТекстСообщения, "Удалите реквизиты счета продавца (поставщик) или комитента")
    //    КонецЕсли;
    //КонецЕсли;
    
    // Правило-15.1
    //   мы не можен одновременно отправить оба счёта-фактуры (и за продавца, и за комитента)
    
    // Правило-16
    Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаКоминтента, "-", ""))
        И лСтатусПоставщика <> ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Комиссионер") И лСтатусПолучателя <> ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Покупатель") Тогда
        
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "<Номер счета коминтента (поставщик)> доступно для заполнения только для статусов поставщика-<Комиссионер> и получателя-<Покупатель>", "ПоставщикНомерСчетаКомитента")
        КонецЕсли;
        
    КонецЕсли;
    
    // Правило-17
    Если ( лСтатусПоставщика = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Комиссионер") И лСтатусПолучателя = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Покупатель") )
        И Не ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаКоминтента, "-", "")) Тогда
        
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "<Номер счета коминтента (поставщик)> обязательно для заполнения только для статусов -поставщика <Комиссионер> и -получателя <Покупатель>", "ПоставщикНомерСчетаКомитента")
        КонецЕсли;
        
    КонецЕсли;
    
    // Правило-18
    Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаКоминтента, "-", "")) Тогда
        
        ДокументКомитента = Документы.ЭлектронныйСчетФактураПолученный.НайтиПоНомеру(лНомерСчетаКоминтента);
        
        Если ДокументКомитента.Пустая() Тогда
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                врТекстОшибки = "ЭСЧФ с номером <" + лНомерСчетаКоминтента + "> не найден";
                ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаКомитента")
            КонецЕсли
			
		КонецЕсли;
		
		Если Не ДокументКомитента.Пустая() И ДокументКомитента.ПолучательУНП <> вОтправительУНП Тогда // в редакции от 15.08.2016: ..., в котором текущий субъект хозяйствования указан как получатель
			
			вОтказ = Истина;
			Если вТекстСообщения <> Неопределено Тогда
				врТекстОшибки = "В поле <Номер ЭСЧФ комитента (поставщик)> можно указать номер ЭСЧФ, в котором текущий субъект хозяйствования указан как получатель";
				ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаКомитента")
			КонецЕсли
			
		КонецЕсли;
		
		Если Не ДокументКомитента.Пустая() И ДокументКомитента.ОтправительУНП = вОтправительУНП Тогда
			вОтказ = Истина;
			Если вТекстСообщения <> Неопределено Тогда
				врТекстОшибки = "ЭСЧФ, указанный в поле <Номер ЭСЧФ комитента (поставщик)> и ЭСЧФ, в котором указывается номер комитента, должны отправляться на Портал разными поставщиками";
				ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаКомитента")
			КонецЕсли
		КонецЕсли;
		
    КонецЕсли;
    
    // Правило-19
	Если лСтатусыКомиссияПосредничество И лСтатусПоставщика <> лСтатусыПоставщика.Заказчик И Не ( ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаПродавца, "-", "")) Или ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров)
												Или ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров) Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров) ) Тогда
        
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            врТекстОшибки = "Для статусов поставщика-получателя: <Комиссионер>-<Комитент>, <Посредник>-<Потребитель> необходимо заполнить
                            | <Регистрационный номер выпуска товаров (поставщик)> или <Номер заявления о ввозе товаров (поставщик)> или <Дата заявления о ввозе товаров (поставщик)>";
            ОтразитьОшибку(вТекстСообщения, врТекстОшибки)
        КонецЕсли
        
    КонецЕсли;
    
    // Правило-20
    Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаПродавца, "-", "")) И Не лСтатусыКомиссияПосредничество Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            врТекстОшибки = "<Номер счета продавца (поставщик)> не доступно для заполнения для статусов -поставщика <" + лСтатусПоставщика + "> и -получателя <" + лСтатусПолучателя + ">";
            ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаПродавца")
        КонецЕсли;
    КонецЕсли;
    
    // Правило-21
    Если ЗначениеЗаполнено(СтрЗаменить(лНомерСчетаПродавца, "-", "")) Тогда
        
        ДокументПродавца = Документы.ЭлектронныйСчетФактураПолученный.НайтиПоНомеру(лНомерСчетаПродавца);
        
        Если ДокументПродавца.Пустая() Тогда
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                врТекстОшибки = "ЭСЧФ с номером <" + лНомерСчетаПродавца + "> не найден";
                ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаПродавца")
            КонецЕсли
		КонецЕсли;
		
		Если Не ДокументПродавца.Пустая() И ДокументПродавца.ПолучательУНП <> вОтправительУНП Тогда // в редакции от 15.08.2016: ... можно указать номер ЭСЧФ, в котором текущий субъект хозяйствования указан как получатель
            
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                врТекстОшибки = "В поле <Номер ЭСЧФ продавца (поставщик)> можно указать номер ЭСЧФ, в котором текущий субъект хозяйствования указан как получатель";
                ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаПродавца")
            КонецЕсли
			
        КонецЕсли;
		
		Если Не ДокументПродавца.Пустая() И ДокументПродавца.ОтправительУНП = вОтправительУНП Тогда
			вОтказ = Истина;
			Если вТекстСообщения <> Неопределено Тогда
				врТекстОшибки = "ЭСЧФ, указанный в поле <Номер ЭСЧФ продавца (поставщик)> и ЭСЧФ, в котором указывается номер продавца, должны отправляться на Портал разными поставщиками";
				ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ПоставщикНомерСчетаПродавца")
			КонецЕсли
		КонецЕсли;
		
    КонецЕсли;
    
    // Правило-22
    // нужно проверить страны грузополучателей
    лСтранаГрузополучателяЕАЭС = лСтранаПолучателяЕАЭС;
    лСтранаГрузополучателяРБ = лСтранаПолучателяРБ;
    Если лЕстьГрузополучатель Тогда
        Для каждого цСтр Из вГрузополучатели Цикл
            лСтранаГрузополучателяЕАЭС = ( Не ЗначениеЗаполнено(цСтр.КодСтраны) Или лКодыСтранСНГ.Найти(цСтр.КодСтраны) <> Неопределено );
            лСтранаГрузополучателяРБ = ( Не ЗначениеЗаполнено(цСтр.КодСтраны) Или цСтр.КодСтраны = "112" );
        КонецЦикла;
    КонецЕсли;
    
    лЕстьРеквизитДокументаВыпускаТоваров = ( ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпускаТовара)
                                             Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие) );
    лПравило22 = ( лСтатусыКомиссияПосредничество Или лСтатусыПродавецПокупатель И лСтранаПоставщикаРБ И Не лСтранаПолучателяЕАЭС
                                                  Или лСтатусыПродавецПокупатель И лСтранаПолучателяЕАЭС И Не лСтранаПолучателяРБ И лСтранаГрузополучателяЕАЭС);
    
    // проверка п.2.2
    Если ( Не лПравило22 И лЕстьРеквизитДокументаВыпускаТоваров ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Реквизиты деклараций на товары (поставщик) доступны
            | для заполнения, если: 1) в поле статусов поставщика - получателя проставлены: <Комиссионер> - <Комитент>,
            | <Посредник> - <Потребитель>, <Заказчик (застройщик)> - <Потребитель> вне зависимости от значений в полях
            | <Код страны>, 2) при статусах <Продавец> - <Покупатель>: 2.1) <Код страны (поставщик)> должна быть указана
            | Беларусь, а <Код страны (получатель)> - код страны, не входящей в ЕАЭС или 2.2) <Код страны (получатель)>
            | код страны, входящей в страны ЕАЭС (и не РБ), а <Код страны грузополучателя> - код страны, не входящей в страны ЕАЭС"
            , "ПоставщикРегистрационныйНомерВыпускаТоваров");
        КонецЕсли;
    КонецЕсли;
    
    // Правило-23
    Если ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) И лСтатусыПродавецПокупатель И Не ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпускаТовара) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Дата выпуска товаров (поставщик)> обязательно для заполнения, если заполнено поле <Реквизиты деклараций на товары (поставщик)>", "ПоставщикДатаВыпускаТовара")
        КонецЕсли
    КонецЕсли;
    
    Если ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) И лСтатусыПродавецПокупатель И Не ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Дата разрешения на убытие товаров (поставщик)> обязательно для заполнения, если заполнено поле <Реквизиты деклараций на товары (поставщик)>"
                                          , "ПоставщикДатаВыдачиРазрешенияНаУбытие")
        КонецЕсли
    КонецЕсли;
    
    // Правило-23.1
    Если ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыпускаТовара) И ЗначениеЗаполнено(вОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие) И Не ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если заполнены поля <Дата выпуска товара (поставщик)> и <Дата разрешения на убытие товаров (поставщик)>, то поле <Регистрационный номер выпуска товаров>
											| - обязательное для заполнения", "ПоставщикРегистрационныйНомерВыпускаТоваров")
        КонецЕсли
    КонецЕсли;
    
    //// Правило-24
    //врВзаимоисключающие = ?(ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров), 1, 0);
    //врВзаимоисключающие = врВзаимоисключающие + ?(ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров), 1, 0);
    //врВзаимоисключающие = врВзаимоисключающие + ?(ЗначениеЗаполнено(вОбъект.ПолучательНомерДекларацииНаТовары), 1, 0);
    //врВзаимоисключающие = врВзаимоисключающие + ?(ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров), 1, 0);
    //Если врВзаимоисключающие > 1 Тогда
    //    вОтказ = Истина;
    //    Если вТекстСообщения <> Неопределено Тогда
    //        ОтразитьОшибку(вТекстСообщения, "Поля <Реквизиты делкарация на товары (поставщик)>, <Реквизиты заявления о ввозе товаров и уплате косвенных налогов>,
    //                                        | <Регистрационный номер выпуска товаров>, <Реквизиты заявления о ввозе товаров и уплате косвенных налогов> являются взаимоисключающими
    //                                        | друг друга. Оставьте заполненным только одно из этих полей" )
    //    КонецЕсли
    //КонецЕсли;
    
    // Правило-25
    лЕстьРеквизитЗаявленияОВвозеТоваровИУплатеНалогов = ( ЗначениеЗаполнено(вОбъект.ПоставщикНомерЗаявленияОВвозеТоваров) Или ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров) );
    лПравило25 = ( лСтатусыКомиссияПосредничество Или лСтатусыПродавецПокупатель И ( лСтранаПоставщикаРБ И лСтранаПолучателяЕАЭС И Не лСтранаПолучателяРБ
                                                                                     Или Не лСтранаПоставщикаЕАЭС И Не лСтранаПоставщикаРБ 
                                                                                         И лСтранаПолучателяЕАЭС И Не лСтранаПолучателяРБ ) );
    Если ( Не лПравило25 И лЕстьРеквизитЗаявленияОВвозеТоваровИУплатеНалогов ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(врТекстОшибки, "Реквизиты заявления о ввозе товаров
                    | и уплате косвенных налогов доступны для заполнения, если: 1) в поле статусов поставщика - получателя проставлены:
                    | <Комиссионер> - <Комитент>, <Посредник> - <Потребитель>, <Заказчик (застройщик)> - <Потребитель> вне зависимости 
                    | от значений в полях <Код страны>, 2) при статусах <Продавец> - <Покупатель>: 2.1) <Код страны (поставщик)> должна быть указана
                    | Беларусь, а <Код страны (получатель)> - код страны, входящей в ЕАЭС (и не РБ) или 2.2) <Код страны (поставщик)>
                    | код страны, не входящей в страны ЕАЭС (и не РБ), а <Код страны (получатель)> - код страны, входящей в страны ЕАЭС (и не РБ)"
                    , "ПоставщикНомерЗаявленияОВвозеТоваров");
        КонецЕсли;
    КонецЕсли;
    
    // Правило-26
    Если вОтправительУНП = лУНПпоставщика
         И ( вОбъект.ПолучательВзаимозависимоеЛицо Или вОбъект.ПолучательРезидентОффшорнойЗоны
             Или вОбъект.ПолучательСделкаСТоварамиПоПеречню Или вОбъект.ПолучательВходитВПереченьКрупныхПлательщиков )
        Тогда
        
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если субъект хозяйствования, составляющий ЭСЧФ является поставщиком в ЭСЧФ, то поля <Взаимозависимое лицо (получатель)>,
                                            | <Сделка с резидентом оффшорной зоны (получатель)>, <Сделка с товарами по перечню, определённому Правительством Республики Беларусь, в соответствии с подпунктом 1.3 пункта 1 статьи 30.1 НК>,
                                            | <Организация, включённая в перечень крупных плательщиков (получатель)> должны быть пустыми" )
        КонецЕсли
    
    КонецЕсли;
    
    // Правило-27
    Если лСтатусПоставщика = лСтатусыПоставщика.ИностраннаяОрганизация И вОтправительУНП <> лУНПполучателя Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Для статуса получателя <Иностранная организация(получатель)> УНП должен соответствовать УНП составителя", "ПолучательУНП")
        КонецЕсли
    КонецЕсли;
    
    // Правило-28 (отсутствует в документе)
    
    // Правило-29
    Если лСтатусПоставщика = лСтатусыПоставщика.ИностраннаяОрганизация И лСтатусПолучателя = лСтатусыПолучателя.Покупатель
         И Не ( ЗначениеЗаполнено(вОбъект.ПолучательНомерДекларацииНаТовары) Или ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) )
        Тогда
        
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "При статусах поставщика <Иностранная организация> и получателя <Покупатель> необходимо заполнить поле
                                            | <Регистрационный номер выпуска товаров> или <Реквизиты заявления о ввозе товаров и уплате косвенных налогов>" )
        КонецЕсли
        
    КонецЕсли;
    
    // Правило-30
    // нужно проверить страны грузоотправителей
    лСтранаГрузоотправителяЕАЭС = лСтранаПоставщикаЕАЭС;
    лСтранаГрузоотправителяРБ = лСтранаПоставщикаРБ;
    Если лЕстьГрузоотправитель Тогда
        Для каждого цСтр Из вГрузоотправители Цикл
            лСтранаГрузоотправителяЕАЭС = ( Не ЗначениеЗаполнено(цСтр.КодСтраны) Или лКодыСтранСНГ.Найти(цСтр.КодСтраны) <> Неопределено );
            лСтранаГрузоотправителяРБ = ( Не ЗначениеЗаполнено(цСтр.КодСтраны) Или цСтр.КодСтраны = "112" );
        КонецЦикла;
    КонецЕсли;
    
    цЗаполненНомерВыпускаТоваровПолучателя = ЗначениеЗаполнено(вОбъект.ПолучательНомерДекларацииНаТовары);
    Если цЗаполненНомерВыпускаТоваровПолучателя И Не ( ( Не лСтранаПоставщикаЕАЭС Или Не ЗначениеЗаполнено(лКодСтраныПолучателя) ) И лСтранаПолучателяРБ
         Или лСтранаПоставщикаЕАЭС И Не лСтранаПоставщикаРБ И Не лСтранаГрузоотправителяЕАЭС )
        Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Регистрационный номер выпуска товаров (получатель)> доступно для заполнения если поставщик -
                                            | иностранная организация (субъект хозяйствования страны, не входящей в ЕАЭС), а получатель -
                                            | субъект хозяйствования РБ, а также, когда продавец - субъект хозяйствования страны, входящей
                                            | в ЕАЭС (но не из РБ), а грузоотправитель - плательщик из стран, не входящих в страны ЕАЭС"
                                          , "ПолучательНомерДекларацииНаТовары")
        КонецЕсли
    КонецЕсли;
    
    // Правило-31
    Если ( ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) Или ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров) )
        И Не ( лСтранаПоставщикаЕАЭС И Не лСтранаПоставщикаРБ И лСтранаПолучателяРБ Или Не лСтранаПоставщикаЕАЭС И лСтранаГрузоотправителяЕАЭС И Не лСтранаГрузоотправителяРБ )
        Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Реквизиты заявления и ввозе товаров и уплате косвенных налогов (получатель)> доступно для заполнения если поставщик -
                                            | иностранная организация (субъект хозяйствования страны, не входящей в ЕАЭС), а получатель -
                                            | субъект хозяйствования РБ, а также, когда продавец - субъект хозяйствования страны, не входящей
                                            | в ЕАЭС, а грузоотправитель - плательщик из стран, входящей в страны ЕАЭС (но не РБ)"
                                          , "ПолучательНомерЗаявленияОВвозеТоваров")
        КонецЕсли
    КонецЕсли;
    
    // Правило-32
    Если Не ЗначениеЗаполнено(вОбъект.ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров)
         И ( ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) Или ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров) )
        Тогда
        
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Поле <Дата ввоза товаров (получатель)> обязательно для заполнения, если заполнен реквизит заявления о ввозе товаров и уплате косвенных налогов"
                                          , "ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров")
        КонецЕсли
        
    КонецЕсли;
    
    // Правило-34 (удалено)
    //   скорее всего подразумевалось именно это, но в тексте сказано "то даты всех указанных документов, указанных в строке 30 "условия поставки" должны совпадать",
    //   т.о. нет привязки ни к одной из дат
    //лДатаДокуметовКонтроль = ?( ЗначениеЗаполнено(вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров), вОбъект.ПоставщикДатаЗаявленияОВвозеТоваров,
    //                           ?( ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров), вОбъект.ПолучательДатаЗаявленияОВвозеТоваров, Неопределено ) );
    //Если лДатаДокуметовКонтроль <> Неопределено И вДокументы <> Неопределено Тогда
	//лЕстьДанныеДокумента = Ложь;
	цКодБланкаТТН1 = Ложь;
	
	Если лЕстьДокументы Тогда
        НомерСтроки = 0;
		//лДатаДокуметовКонтроль = вДокументы[0].Дата;
        лПравило33 = Ложь;
        Для каждого цДокумент Из вДокументы Цикл
            // номер строки
            НомерСтроки = НомерСтроки + 1;
            // есть ли данные документа
            цЕстьДанныеДокумента = ( ЗначениеЗаполнено(цДокумент.КодТипаБланка) Или ЗначениеЗаполнено(цДокумент.Номер) Или ЗначениеЗаполнено(цДокумент.Дата) );
            // коди вида документа не может быть пустым
            Если цЕстьДанныеДокумента И Не ЗначениеЗаполнено(цДокумент.КодТипаБланка) Тогда
                вОтказ = Истина;
                Если вТекстСообщения <> Неопределено Тогда
                    врТекстОшибки = "Стр. док-ов [" + НомерСтроки + "] Поле <Тип БСО> обязательно для заполнения";
                    ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ДокументыПодтверждающиеПоставку")
                КонецЕсли;
            КонецЕсли;
            // для правила-36
			//лЕстьДанныеДокумента = ( лЕстьДанныеДокумента Или цЕстьДанныеДокумента );
			//Если цДокумент.Дата <> лДатаДокуметовКонтроль Тогда
			//    вОтказ = Истина;
			//    Если вТекстСообщения <> Неопределено Тогда
			//        врТекстОшибки = "Стр. док-ов [" + НомерСтроки + "] Если указана дата в реквизитах заявления о ввозе товаров и уплате косвенных налогов
			//                        | , то даты всех документов, указанных в условиях поставки, должны совпадать";
			//        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ДокументыПодтверждающиеПоставку")
			//    КонецЕсли;
			//КонецЕсли;
            // Правило-37
            Если цЕстьДанныеДокумента И Не ( ЗначениеЗаполнено(цДокумент.КодТипаБланка) И ЗначениеЗаполнено(цДокумент.Номер) И ЗначениеЗаполнено(цДокумент.Дата) ) Тогда
                вОтказ = Истина;
                Если вТекстСообщения <> Неопределено Тогда
                    врТекстОшибки = "Стр. док-ов [" + НомерСтроки + "] Если заполнен один из реквизитов документа: тип, или номер, или дата, то остальные (тип, номер, и дата) обязательны для заполнения";
                    ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ДокументыПодтверждающиеПоставку")
                КонецЕсли
            КонецЕсли;
            // Правило-38
            цКодТипаБланка = СокрЛП(цДокумент.КодТипаБланка.Код);
            цКодБланкаТТН1 = ( цДокумент.КодТипаБланка = Справочники.ТипыБСО.ТТН1 );
            цКодБланкаНакладная = ( цДокумент.КодТипаБланка = Справочники.ТипыБСО.ТН2 Или цКодБланкаТТН1 );
            Если цКодБланкаНакладная И Не ( ЗначениеЗаполнено(цДокумент.ТипБСО) И ЗначениеЗаполнено(цДокумент.Дата) И ЗначениеЗаполнено(цДокумент.КодТипаБланка)
                                            И ЗначениеЗаполнено(цДокумент.Серия) И ЗначениеЗаполнено(цДокумент.Номер) ) Тогда
                вОтказ = Истина;
                Если вТекстСообщения <> Неопределено Тогда
                    врТекстОшибки = "Стр. док-ов [" + НомерСтроки + "] Для вида документа ""Накладная (602/603, ТТН-1, ТН-2)"" поля <Вид документа>
                                    | , <Дата> , <Код бландка> , <Серия> , и <Номер> обязательны для заполнения";
                    ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ДокументыПодтверждающиеПоставку")
                КонецЕсли;
            КонецЕсли;
            // Правило-33
            Если Не лПравило33 И цКодБланкаТТН1 И ( лЕстьГрузоотправитель Или лЕстьГрузополучатель ) Тогда
                лПравило33 = Истина;
                Если Не лЕстьГрузоотправитель Тогда
                    Перейти ~лЕстьГрузополучатель
                КонецЕсли;
                НомерСтрокиГрОт = 0;
                Для каждого цГрузоотправитель Из вГрузоотправители Цикл
                    НомерСтрокиГрОт = НомерСтрокиГрОт + 1;
                    Если Не ( ЗначениеЗаполнено(цГрузоотправитель.КодСтраны) И ЗначениеЗаполнено(цГрузоотправитель.УНП) И ЗначениеЗаполнено(цГрузоотправитель.Наименование) И ЗначениеЗаполнено(цГрузоотправитель.АдресОтправки) ) Тогда
                        врТекстОшибки = "Стр. гр. отпр. [" + НомерСтрокиГрОт + "] Если указан вид документа ТТН-1 в разделе 30 ""Условия поставки""
                                        |, то в разделе ""Грузоотправители"" должны быть заполнены все поля";
                        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "Грузоотправители")
                    КонецЕсли;
                КонецЦикла;
                ~лЕстьГрузополучатель:
                НомерСтрокиГрОт = 0;
                Для каждого цГрузополучатель Из вГрузополучатели Цикл
                    НомерСтрокиГрОт = НомерСтрокиГрОт + 1;
                    Если Не ( ЗначениеЗаполнено(цГрузополучатель.КодСтраны) И ЗначениеЗаполнено(цГрузополучатель.УНП) И ЗначениеЗаполнено(цГрузополучатель.Наименование) И ЗначениеЗаполнено(цГрузополучатель.АдресДоставки) ) Тогда
                        врТекстОшибки = "Стр. гр. отпр. [" + НомерСтрокиГрОт + "] Если указан вид документа ТТН-1 в разделе 30 ""Условия поставки""
                                        |, то в разделе ""Грузополучатели"" должны быть заполнены все поля";
                        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "Грузополучатели")
                    КонецЕсли;
                КонецЦикла;
            КонецЕсли;
        КонецЦикла;
	КонецЕсли;
	
	// сервис не принимает документы с видом ТТН-1 без хотя бы одного грузоотправителя и грузополучателя
	Если цКодБланкаТТН1 И Не ( лЕстьГрузоотправитель И лЕстьГрузополучатель ) Тогда
		вОтказ = Истина;
		Если вТекстСообщения <> Неопределено Тогда
			врТекстОшибки = "Если указан вид документа <ТТН-1>, то должы быть указаны грузоотправитель и грузополучатель";
			ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "Грузоотправители")
		КонецЕсли
	КонецЕсли;
    
    // Правило-35
    Если ( лЕстьГрузоотправитель Или лЕстьГрузополучатель ) И Не ( ЗначениеЗаполнено(вОбъект.ДоговорНомер) И ЗначениеЗаполнено(вОбъект.ДоговорДата) И лЕстьДокументы ) Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если указан грузоотправитель или грузополучатель, то должны быть заполнены договор и дата договора (контракта) на поставку товаров (выполнения
                                            | работ, оказания услуг), передачу имущественных прав и присутствовать хотя бы один документ подтверждения поставки" )
        КонецЕсли
    КонецЕсли;
	
	лПравило22_1 = Ложь;
	
    // Проверка таблицы товаров
    Для каждого цСтрокаТовара Из вТовары Цикл
		
		// Текст ошибок для полей товаров указывать в одну строку (при выводе в табличный документ поиск по "Стр["
		
        // Обязательность заполнения-17
        Если Не ЗначениеЗаполнено(цСтрокаТовара.Товар) Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Товар> обязательно для заполнения", "ТоварыТовар")
            КонецЕсли;
        КонецЕсли;
        
        // Обязательность заполнения-18
        Если Не ЗначениеЗаполнено(цСтрокаТовара.Стоимость) Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Стоимость> обязательно для заполнения", "ТоварыСтоимость")
            КонецЕсли;
        КонецЕсли;
        
        // Обязательность заполнения-19
        Если Не ЗначениеЗаполнено(цСтрокаТовара.СтавкаНДС) Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <НДС ставка (значение)> обязательно для заполнения", "ТоварыСтавкаНДС")
            КонецЕсли;
        КонецЕсли;
        
        Если Не ЗначениеЗаполнено(цСтрокаТовара.ПроцентНДС) И цСтрокаТовара.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС") И цСтрокаТовара.СтавкаНДС <> ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <НДС ставка (процент)> обязательно для заполнения", "ТоварыСтавкаНДС")
            КонецЕсли;
        КонецЕсли;
        
        // Обязательность заполнения-20
        Если Не ЗначениеЗаполнено(цСтрокаТовара.ТипСтавкиНДС) Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <НДС ставка (тип)> обязательно для заполнения", "ТоварыСтавкаНДС")
            КонецЕсли;
        КонецЕсли;
        
        // Обязательность заполнения-21
        Если Не ЗначениеЗаполнено(цСтрокаТовара.СуммаНДС) Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <НДС сумма> обязательно для заполнения", "ТоварыСуммаНДС")
            КонецЕсли;
        КонецЕсли;
        
        // Обязательность заполнения-22
        Если Не ЗначениеЗаполнено(цСтрокаТовара.СтоимостьСНДС) Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Стоимость товаров с учётом НДС> обязательно для заполнения", "ТоварыСтоимостьСНДС")
            КонецЕсли;
        КонецЕсли;
        
        // Обязательность заполнения-23
        // ...
        // Обязательность заполнения-26
        //   проверка наличия итоговых сумма таблицы
        
        цЗаполненКодТНВЭДЕАЭС    = ЗначениеЗаполнено(цСтрокаТовара.КодТНВЭДЕАЭС);
        цЗаполненКодОКЭД         = ЗначениеЗаполнено(цСтрокаТовара.КодОКЭД);
		цНецЗаполненКодТНВЭДЕАЭС = ( Не цЗаполненКодТНВЭДЕАЭС );
		
		// Правило-8
		Если ( вОбъект.ПоставщикВзаимозависимоеЛицо Или вОбъект.ПолучательВзаимозависимоеЛицо ) И цНецЗаполненКодТНВЭДЕАЭС И Не цЗаполненКодОКЭД Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                ОтразитьОшибку(вТекстСообщения, "Стр[" + цСтрокаТовара.НомерСтроки + "] Если указан признак взаимозависимого лица у продавца или получателя, то поля <Код ТН ВЭД ТС> или <Код ОКЭД> являются обязательными для заполнения всех строк", "ТоварыКодТНВЭДЕАЭС")
            КонецЕсли;
		КонецЕсли;
		
		// Правило-40
        Если цЗаполненКодОКЭД И цЗаполненКодТНВЭДЕАЭС Тогда
            вОтказ = Истина;
            Если вТекстСообщения <> Неопределено Тогда
                врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Код ТН ВЭД ЕАЭС> и поле <Код ОКЭД> являются взаимоисключающими друг друга. Т.е. хотя бы одно из полей должно оставаться пустым";
                ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКодТНВЭДЕАЭС")
            КонецЕсли;
        КонецЕсли;
		
		// Правило-41
		лСтавкаФиксированная = ( цСтрокаТовара.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Фиксированная") );
		лСтавкаФиксированная10 = ( лСтавкаФиксированная И цСтрокаТовара.ПроцентНДС = 10 );
		Если лСтатусыИностраннаяОрганизацияПокупатель И цНецЗаполненКодТНВЭДЕАЭС И лСтавкаФиксированная10 Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Код ТН ВЭД ЕАЭС> обязательно для заполнения, если указана ставка НДС 10% при статусах поставщика-получателя <Иностранная организация> - <Покупатель>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКодТНВЭДЕАЭС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-41.1
		Если лСтатусыИностраннаяОрганизацияПокупатель И цНецЗаполненКодТНВЭДЕАЭС И цСтрокаТовара.СуммаАкциза Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Код ТН ВЭД ЕАЭС> обязательно для заполнения, если указана сумма акциза при статусах поставщика-получателя <Иностранная организация> - <Покупатель>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКодТНВЭДЕАЭС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-41.2
		лЗаполненРегНомерВыпускаИлиРеквизитыЗаявленияОВвозеТоваров = ( ЗначениеЗаполнено(вОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров) Или лРеквизитыЗаявленияОВвозеТоваров );
		Если лЗаполненРегНомерВыпускаИлиРеквизитыЗаявленияОВвозеТоваров И цНецЗаполненКодТНВЭДЕАЭС И цСтрокаТовара.СуммаАкциза Тогда//лСтатусыИностраннаяОрганизацияПокупатель И цНецЗаполненКодТНВЭДЕАЭС И цСтрокаТовара.СуммаАкциза Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Код ТН ВЭД ЕАЭС> обязательно для заполнения если не указана сумма акциза,  заполнены поля 13 ""Регистрационный номер выпуска товаров"" или 14 ""Реквизитызаявления о ввозе товаров и уплате косвенных налогов""";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКодТНВЭДЕАЭС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-41.3
		Если лСтатусыИностраннаяОрганизацияПокупатель И цНецЗаполненКодТНВЭДЕАЭС И Не цСтрокаТовара.СуммаАкциза И лСтавкаФиксированная И цСтрокаТовара.ПроцентНДС <> 10 Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Код ТН ВЭД ЕАЭС> обязательно для заполнения, при заполненном поле <Регистрационный номер выпуска товаров (поставщик)> или <Реквизиты заявления о ввозе товаров и уплате косвенных налогов> если указана сумма акциза при статусах поставщика-получателя <Иностранная организация> - <Покупатель>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКодТНВЭДЕАЭС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-42, Правило-43, Правило-44 отсутствуют на 15.08.2016
		
		// Правило-44
		Если лСтатусыИностраннаяОрганизацияПокупатель И лСтатусыПосредничество И цНецЗаполненКодТНВЭДЕАЭС Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <Код ТН ВЭД ЕАЭС> обязательно для заполнения, при заполненном поле <Регистрационный номер выпуска товаров (поставщик)> или <Реквизиты заявления о ввозе товаров и уплате косвенных налогов> при статусах поставщика-получателя <Продавец> - <Покупатель>, <Посредник> - <Потребитель>, <Заказчик (застройщик)> - <Потребитель>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКодТНВЭДЕАЭС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-45 отсутствует на 15.08.2016
		
		// Правило-46
		Если цСтрокаТовара.Цена < 0 Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Цена (тариф) за единицу товара (раобты, услуги) имущественных прав без учета НДС не должна быть отридцательной";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыЦена")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-47
		Если цСтрокаТовара.СуммаНДС < 0 И цСтрокаТовара.СуммаАкциза > 0 Или цСтрокаТовара.СуммаНДС > 0 И цСтрокаТовара.СуммаАкциза < 0 Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Поле <НДС сумма> и <В том числе сумма акциза> должны быть одного знака (если они есть)";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСуммаНДС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-48
		Если ( цСтрокаТовара.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Ноль") Или цСтрокаТовара.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.БезНДС") )
			И цСтрокаТовара.ПроцентНДС Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Если указана ставка <НДС 0%> или <Без НДС>, то в поле <НДС сумма> должен прописываться 0";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСтавкаНДС")
		    КонецЕсли;
		КонецЕсли;
		
		//BUG Правило-49 по перевыставлению (нету статуса "Выставлен. Начато аннулирование")
		
		// Правило-50
		Если цСтрокаТовара.СуммаАкциза < 0 И цСтрокаТовара.СуммаАкциза < цСтрокаТовара.Стоимость
			Или цСтрокаТовара.СуммаАкциза > 0 И цСтрокаТовара.СуммаАкциза > цСтрокаТовара.Стоимость Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] <В том числе сумма акциза> должна быть не больше суммы, указанной в графе <Стоимость товаров> (по модулю)";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСуммаАкциза")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-51 отсутствует на 15.08.2016
		
		// Правило-52
		Если лСтатусыИностраннаяОрганизацияПокупатель И Не цСтрокаТовара.ВвознойНДС Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Если указан статус поставщика <Иностранная организация>, а статус получателя - <Покупатель>, то в графе 12 должен быть указан <Ввозной НДС>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСуммаНДС")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-53
		Если лСтатусПоставщика <> ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация") И цСтрокаТовара.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
			И Не ( цСтрокаТовара.ВычетВПолномОбъеме Или цСтрокаТовара.ОсвобождениеОтНДС Или цСтрокаТовара.РеализацияЗаПределамиРБ ) Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Если в ЭСЧФ указан любой статус поставщика, кроме <Иностранная организация>, и для товарной строки указана ставка НДС <Без НДС>, то для этой строки в графе 12 должен быть указан один из признаков: <Вычет в полном объёме>, <Освобождение от НДС>, <Реализация за пределами РБ>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыДополнительныеСведения")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-53.1
		Если лСтатусПоставщика = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация") И цСтрокаТовара.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС")
			И Не цСтрокаТовара.ОсвобождениеОтНДС Тогда
		    вОтказ = Истина;
		    Если вТекстСообщения <> Неопределено Тогда
		        врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Если в ЭСЧФ указан статус поставщика <Иностранная организация> и для товарной строки указана ставка НДС <Без НДС>, то для этой строки в графе 12 должен быть указан признак <Освобождение от НДС>";
		        ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыДополнительныеСведения")
		    КонецЕсли;
		КонецЕсли;
		
		// Правило-54
		Если лЭтоИсходныйИсправленный  Тогда
			
			Если цСтрокаТовара.Количество < 0 Тогда
				вОтказ = Истина;
				Если вТекстСообщения <> Неопределено Тогда
					врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Количество товара Исходного или Исправленного ЭСЧФ не должны быть отридцательными";
					ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыКоличество")
				КонецЕсли;
			КонецЕсли;
			
			Если цСтрокаТовара.Цена < 0 Тогда
				вОтказ = Истина;
				Если вТекстСообщения <> Неопределено Тогда
					врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Цена товара Исходного или Исправленного ЭСЧФ не должны быть отридцательными";
					ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыЦена")
				КонецЕсли;
			КонецЕсли;
			
			Если цСтрокаТовара.Стоимость < 0 Тогда
				вОтказ = Истина;
				Если вТекстСообщения <> Неопределено Тогда
					врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Стоимость товара Исходного или Исправленного ЭСЧФ не должны быть отридцательными";
					ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСтоимость")
				КонецЕсли;
			КонецЕсли;
			
			Если цСтрокаТовара.СуммаАкциза < 0 Тогда
				вОтказ = Истина;
				Если вТекстСообщения <> Неопределено Тогда
					врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Сумма акциза товара Исходного или Исправленного ЭСЧФ не должны быть отридцательными";
					ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСуммаАкциза")
				КонецЕсли;
			КонецЕсли;
			
			Если цСтрокаТовара.СуммаНДС < 0 Тогда
				вОтказ = Истина;
				Если вТекстСообщения <> Неопределено Тогда
					врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Сумма НДС товара Исходного или Исправленного ЭСЧФ не должны быть отридцательными";
					ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСуммаНДС")
				КонецЕсли;
			КонецЕсли;
			
			Если цСтрокаТовара.СтоимостьСНДС < 0 Тогда
				вОтказ = Истина;
				Если вТекстСообщения <> Неопределено Тогда
					врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Стоимость с НДС товара Исходного или Исправленного ЭСЧФ не должны быть отридцательными";
					ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыСтоимостьСНДС")
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Правило-55 можно не проверять, т.к. итоговые суммы заполняются с исп. ф-ции "Итог" по соотв. колонке
		
		// Органичение формата-7
		Если цСтрокаТовара.ПроцентНДС > 100 Тогда
			вОтказ = Истина;
			Если вТекстСообщения <> Неопределено Тогда
				врТекстОшибки = "Стр[" + цСтрокаТовара.НомерСтроки + "] Процент НДС не может быть больше 100";
				ОтразитьОшибку(вТекстСообщения, врТекстОшибки, "ТоварыПроцентНДС")
			КонецЕсли;
		КонецЕсли;
		
		лПравило22_1 = ( лПравило22_1 Или цЗаполненКодТНВЭДЕАЭС И цСтрокаТовара.СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0") );
		
    КонецЦикла;
    
    // Правило-22.1
	Если лСтатусыПродавецПокупатель И Не лСтранаПолучателяРБ И лПравило22_1 И Не ( ЗначениеЗаполнено(вОбъект.ПолучательНомерДекларацииНаТовары)
							Или ЗначениеЗаполнено(вОбъект.ПолучательНомерЗаявленияОВвозеТоваров) И ЗначениеЗаполнено(вОбъект.ПолучательДатаЗаявленияОВвозеТоваров) )
		Тогда
        вОтказ = Истина;
        Если вТекстСообщения <> Неопределено Тогда
            ОтразитьОшибку(вТекстСообщения, "Если в полях статусов поставщика-получателя проставлены <Продавец>-<Покупатель> и, при этом, указана страна покупателя любая, кроме РБ,
											| а также, хотя бы для одной строки заполнен <Код ТН ВЭД> и ставка НДС <Ноль>, то <Регистрационный номер выпуска товаров (получатель)>
											| или <Реквизиты заявления о ввозе товаров и уплате косвенных налогов (получатель)> обязательны для заполнения")
        КонецЕсли
	КонецЕсли;
	
	// Правило-56
	// касается входящего документа поставщика
	
	// Правило-57
	// касается входящего документа поставщика
	
	Возврат Не вОтказ

КонецФункции // ЭСЧФСоответствуетПротоколу()

////////////////////////////////////////////////////////////////////////////////
//
// Функция ЭСЧФСоответствуетПротоколуВх
//
// Описание:
//  проверяет возможность подписания входящего документа согласно протокола обмена (правил)
//
// Параметры (название, тип, дифференцированное значение)
//  Документ - ДокументСсылка.ЭлектронныйСчетФактураПолученный - номер входящего документа
//  Отказ - Булево - значение, противоположное возвращаемому
//  Ошибки - Массив, Строка - ошибки проверки
//
// Возвращаемое значение:
//  Булево - результат проверки
//
Функция ЭСЧФСоответствуетПротоколуВх( Документ, Отказ = Ложь, Ошибки = Неопределено ) Экспорт

	Если Документ.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") Тогда
		
		// Правило-56
		
		КвитанцияДокумента = РегистрыСведений.КвитанцииВходящих.СоздатьМенеджерЗаписи();
		КвитанцияДокумента.Год    = Документ.НомерГод;
		КвитанцияДокумента.Объект = Документ.НомерОбъект;
		КвитанцияДокумента.Номер  = Документ.НомерНомер;
		КвитанцияДокумента.Прочитать();
		
		Если Не КвитанцияДокумента.Выбран() И Ошибки <> Неопределено Тогда
			
			ОтразитьОшибку(Ошибки, "Статус не найден", "КЭСЧФ");
			
		ИначеЕсли КвитанцияДокумента.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании") Тогда
			
			// найти неаннулированные с номером в поле 11 или 12 из 5-го поля данного документа
			ЗапросПоНомеруПродавцаИлиКомитента = Новый Запрос;
			ЗапросПоНомеруПродавцаИлиКомитента.УстановитьПараметр("Номер", Документ.КЭСЧФ);
			МассивСтатусов = Новый Массив;
			МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Аннулирован"));
			МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленАннулированПоставшиком"));
			ЗапросПоНомеруПродавцаИлиКомитента.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
			ЗапросПоНомеруПродавцаИлиКомитента.Текст = "ВЫБРАТЬ
			|	ЭлектронныйСчетФактураПолученный.Номер,
			|	КвитанцииВходящих.Статус,
			|	КвитанцииВходящих.ДатаСостояния
			|ИЗ
			|	Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КвитанцииВходящих КАК КвитанцииВходящих
			|		ПО ЭлектронныйСчетФактураПолученный.НомерГод = КвитанцииВходящих.Год
			|			И ЭлектронныйСчетФактураПолученный.НомерОбъект = КвитанцииВходящих.Объект
			|			И ЭлектронныйСчетФактураПолученный.НомерНомер = КвитанцииВходящих.Номер
			|ГДЕ
			|	(ЭлектронныйСчетФактураПолученный.ПоставщикНомерСчетаКомитента = &Номер
			|			ИЛИ ЭлектронныйСчетФактураПолученный.ПоставщикНомерСчетаПродавца = &Номер)
			|	И НЕ КвитанцииВходящих.Статус В (&МассивСтатусов)";
			
			РезультатЗапросаПоНомеруПродавцаИлиКомитента = ЗапросПоНомеруПродавцаИлиКомитента.Выполнить();
			
			Если Не РезультатЗапросаПоНомеруПродавцаИлиКомитента.Пустой() Тогда
				Отказ = Истина;
				Если Ошибки <> Неопределено Тогда
					ВыборкаРезультатаЗапросаПоНомеруПродавцаИлиКомитента = РезультатЗапросаПоНомеруПродавцаИлиКомитента.Выбрать();
					ОтразитьОшибку(Ошибки, "Получатель может подписать исправленный со статусом ""На согласовании"" только тогда,
											| когда в БД нет неаннулированных ЭСЧФ, в которых в 11 или 12 поле указан номер из 5
											| поля данного исправленного ЭСЧФ со статусом ""На согласовании"".", "КЭСЧФ");
					Пока ВыборкаРезультатаЗапросаПоНомеруПродавцаИлиКомитента.Следующий() Цикл
						ОтразитьОшибку(Ошибки, "Ссылается на документ № " + ВыборкаРезультатаЗапросаПоНомеруПродавцаИлиКомитента.Номер + " со статусом " + ВыборкаРезультатаЗапросаПоНомеруПродавцаИлиКомитента.Статус
												+ " от " + ВыборкаРезультатаЗапросаПоНомеруПродавцаИлиКомитента.ДатаСостояния, "КЭСЧФ");
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Правило-57
		
		ЗапросИсправленныйНаСогласовании = Новый Запрос;
		ЗапросИсправленныйНаСогласовании.УстановитьПараметр("КЭСЧФ", Документ.Номер);
		ЗапросИсправленныйНаСогласовании.УстановитьПараметр("НаСогласовании", ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании"));
		ЗапросИсправленныйНаСогласовании.Текст = "ВЫБРАТЬ
		|	ЭлектронныйСчетФактураПолученный.Ссылка КАК СсылкаНаИсправленныйНаСогласовании
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КвитанцииВходящих КАК КвитанцииВходящих
		|		ПО ЭлектронныйСчетФактураПолученный.НомерГод = КвитанцииВходящих.Год
		|			И ЭлектронныйСчетФактураПолученный.НомерОбъект = КвитанцииВходящих.Объект
		|			И ЭлектронныйСчетФактураПолученный.НомерНомер = КвитанцииВходящих.Номер
		|ГДЕ
		|	ЭлектронныйСчетФактураПолученный.КЭСЧФ = &КЭСЧФ
		|	И КвитанцииВходящих.Статус = &НаСогласовании";
		
		РезультатЗапросаИсправленногоНаСогласовании = ЗапросИсправленныйНаСогласовании.Выполнить();
		
		Если Не РезультатЗапросаИсправленногоНаСогласовании.Пустой() Тогда
			Отказ = Истина;
			Если Ошибки <> Неопределено Тогда
				ВыборкаИсправленногоНаСогласовании = РезультатЗапросаИсправленногоНаСогласовании.Выбрать();
				ВыборкаИсправленногоНаСогласовании.Следующий();
				ОтразитьОшибку(Ошибки, "Получатель не может дать согласие на аннулирование ЭСЧФ, если к данному ЭСЧФ есть исправленный ""на согласовании""
										| (" + СокрЛП(ВыборкаИсправленногоНаСогласовании.СсылкаНаИсправленныйНаСогласовании) + "). При подписании получателем исправленного
										| ЭСЧФ, исходный ЭСЧФ должен быть аннулирован автоматически", "КЭСЧФ");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции //ЭСЧФСоответствуетПротоколуВх

// Возвращает результат проверки корректрости статусов поставщика и получателя
//
// Параметры:
//  СтатусПоставщика  - ПеречислениеСсылка.СтатусыПоставщикаЭСЧФ - статус поставщика
//  СтатусПолучателя  - ПеречислениеСсылка.СтатусыПолучателяЭСЧФ - статус получателя
//
// Возвращаемое значение:
//   Булево   - корректны ли статусы
//
Функция СтатусыПоставщикаИПолучателяСоответствуют(СтатусПоставщика, СтатусПолучателя) Экспорт

    СтатусыПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ;
    СтатусыПолучателя = Перечисления.СтатусыПолучателяЭСЧФ;
    
    // Данные согласно таблице соответствия статусов документа описания xml, xsd-схем и правил заполнения полей
    Возврат СтатусПоставщика = СтатусыПоставщика.ПлательщикПередающийОборотыПоРеализации
                И СтатусПолучателя = СтатусыПолучателя.ПлательщикПолучающийОборотыПоРеализации
            Или СтатусПолучателя = СтатусыПолучателя.Потребитель И (СтатусПоставщика = СтатусыПоставщика.Заказчик
                                                                    Или СтатусПоставщика = СтатусыПоставщика.Посредник
                                                                    Или СтатусПоставщика = СтатусыПоставщика.Комиссионер
                                                                    Или СтатусПоставщика = СтатусыПоставщика.Продавец)
            Или СтатусПоставщика = СтатусыПоставщика.ИностраннаяОрганизация И СтатусПолучателя = СтатусыПолучателя.ПокупательОбъектовУИностраннойОрганизации
            Или СтатусПолучателя = СтатусыПолучателя.Покупатель И (СтатусПоставщика = СтатусыПоставщика.ИностраннаяОрганизация
                                                                   Или СтатусПоставщика = СтатусыПоставщика.ДоверительныйУправляющий
                                                                   Или СтатусПоставщика = СтатусыПоставщика.Комиссионер
                                                                   Или СтатусПоставщика = СтатусыПоставщика.Продавец)
            Или СтатусПоставщика = СтатусыПоставщика.ПлательщикПередающийНалоговыеВычеты
                И СтатусПолучателя = СтатусыПолучателя.ПокупательПолучающийНалоговыеВычеты
            Или СтатусПоставщика = СтатусыПоставщика.Комиссионер И (СтатусПолучателя = СтатусыПолучателя.Комитент
                                                                    Или СтатусПолучателя = СтатусыПолучателя.Комиссионер)
            Или СтатусПолучателя = СтатусыПолучателя.Комиссионер И (СтатусПоставщика = СтатусыПоставщика.Продавец
                                                                    Или СтатусПоставщика = СтатусыПоставщика.Комитент)

КонецФункции // СтатусыОтправителяИПолучателяСоответствуют()

// Попытка записи объекта-XDTO в файл
//
// Параметры:
//  вОбъектXDTO  - ОбъектXDTO - объект для записи
//  вЗаписьXML  - ЗаписьXML - поток вывода
//  вТекстОшибки  - Строка, Неопределено - переменная для записи ошибки в случае неудачи
//  вФабрикаXDTO  - ФабрикаXDTO, Неопределено - фабрика для записи объекта в файл; если не передана, используется переменная глобального контекста
//
// Возвращаемое значение:
//   Булево   - результат совершения операции
//
Функция ЗаписатьДанныеВФайлXML(вОбъектXDTO, вЗаписьXML, вФабрикаXDTO, вТекстОшибки = Неопределено) Экспорт

    Попытка
        вФабрикаXDTO.ЗаписатьXML(вЗаписьXML, вОбъектXDTO, "issuance", );
        Возврат Истина
    Исключение
        Если вТекстОшибки <> Неопределено Тогда
            врТекстОшибки = ОписаниеОшибки();
            ОтразитьОшибку(вТекстОшибки, врТекстОшибки)
        КонецЕсли;
        Возврат Ложь
    КонецПопытки;

КонецФункции // ЗаписатьДанныеВФайлXML()

// Возвращает объект ЗаписьXML для выгрузки электронного счета-фактуры
//
// Параметры:
//  вНомер  - Строка - данная переменная будет использована в качестве имени файла. Передавать без расширения (только номер по протоколу)
//  вОтказ  - Булево - признак ошибки (не обязательный параметр)
//  вТекстОшибки  - Строка - переменная, в которую будет записан текст ошибки
//
// Возвращаемое значение:
//   ЗаписьXML   - объект для записи в файл во временном каталоге
//   Неопределено   - в случае возникновения ошибки. Дополнительно об этом сигнализирует переменная <вОтказ>
//
Функция ПолучитьОбъектЗаписиВФайлXML(вОтказ = Ложь, вТекстОшибки = Неопределено, вИмяФайла = Неопределено) Экспорт

    Если Не ЗначениеЗаполнено(вИмяФайла) Тогда
        вИмяФайла = ПолучитьИмяВременногоФайла("xml")
    КонецЕсли;
    
    лЗаписьXML = Новый ЗаписьXML;
    Попытка
        лЗаписьXML.ОткрытьФайл(вИмяФайла, "UTF-8")
    Исключение
        вОтказ = Истина;
        Если вТекстОшибки <> Неопределено Тогда
            врОписаниеОшибки = "Ошибка открытия файла по причине: " + ОписаниеОшибки();
            ОтразитьОшибку(вТекстОшибки, врОписаниеОшибки)
        КонецЕсли;
    КонецПопытки;
    
    Если вОтказ Тогда
        Возврат Неопределено
    КонецЕсли;
    
    Возврат лЗаписьXML

КонецФункции // ПолучитьОбъектЗаписиВФайлXML()

// Входит ли в перечень товаров согласно Указа Президента Республики Беларусь от 21 июня 2007 г. №287 "О налогообложении продовольственных товаров и товаров для детей"
//
// Параметры:
//  Код  - Строка - код ТН ВЭД ЕАЭС в формате '9999999999'
//
// Возвращаемое значение:
//   Булево   - результат проверки
//
Функция ВходитВПеречень287(Код) Экспорт

    Первый = Лев(Код, 4);
    Второй = Лев(Код, 6);
    Третий = Лев(Код, 9);
    Возврат  Код = "0101210000"
                 Или Второй = "010221"
                 Или Код = "0103100000"
                 Или Код = "0104101000"
                 Или Код = "0104201000"
                 Или Первый = "0105"
                 Или Код = "0106141090"
                 Или Первый = "0201"
                 Или Первый = "0202"
                 Или Первый = "0203"
                 Или Первый = "0204"
                 И Не Второй = "020450"
                 Или Второй = "020500"
                 Или Первый = "0206"
                 И Не ( Код = "0206101000"
                 Или Код = "0206220001"
                 Или Код = "0206291000"
                 Или Код = "0206300001"
                 Или Код = "0206300003"
                 Или Код = "0206410001"
                 Или Код = "0206490001"
                 Или Второй = "020680"
                 Или Второй = "020690"
                 ) Или Первый = "0207"
                 И Не ( Третий = "020743000"
                 Или Третий = "020745930"
                 Или Третий = "020753000"
                 Или Третий = "020755930"
                 ) Или Второй = "020810"
                 Или Код = "0209101100"
                 Или Код = "0209101900"
                 Или Второй = "160100"
                 Или Второй = "160232"
                 Или Второй = "160239"
                 Или Второй = "160241"
                 Или Второй = "160242"
                 Или Второй = "160249"
                 Или Второй = "160250"
                 Или Первый = "0401"
                 Или Первый = "0402"
                 Или Первый = "0403"
                 Или Первый = "0404"
                 Или Второй = "040510"
                 Или Второй = "040520"
                 Или Второй = "040610"
                 Или Второй = "040630"
                 И Не Код = "0406301000"
                 Или Код = "0406906900"
                 Или Код = "0406908600"
                 Или Третий = "040690990"
                 Или Третий = "151211910"
                 Или Код = "1512199002"
                 Или Код = "1512199009"
                 Или Третий = "151411900"
                 Или Третий = "151419900"
                 Или Третий = "151491900"
                 Или Третий = "151499900"
                 Или Первый = "1517"
                 Или Код = "2106909804"
                 Или Первый = "2302"
                 Или Первый = "2303"
                 Или Второй = "230990"
                 Или Первый = "1201"
                 Или Второй = "120400"
                 Или Первый = "1205"
                 Или Второй = "120600"
                 Или Код = "2304000001"
                 Или Код = "2304000009"
                 Или Первый = "2306"
                 И Не ( Код = "2306500000"
                 Или Код = "2306600000"
                 ) Или Первый = "1905"
                 И Не Код = "1905905500"
                 Или Код = "2102103100"
                 Или Код = "2102103900"
                 Или Код = "1704906100"
                 Или Код = "1704906500"
                 Или Код = "1704907100"
                 Или Код = "1704907500"
                 Или Второй = "100630"
                 Или Код = "1006400000"
                 Или Второй = "110100"
                 Или Первый = "1102"
                 Или Первый = "1103"
                 Или Первый = "1104"
                 Или Первый = "1105"
                 Или Код = "1106100000"
                 Или Код = "1107101100"
                 Или Код = "1107109100"
                 Или Первый = "1208"
                 Или Первый = "1902"
                 Или Код = "1602100010"
                 Или Код = "1702500000"
                 Или Код = "1901100000"
                 Или Код = "2104200010"
                 Или Первый = "2202"
                 И Не Код = "2202901001"
                 Или Второй = "290544"
                 Или Второй = "382460"
                 Или Первый = "0701"
                 Или Третий = "070200000"
                 Или Код = "0703101900"
                 Или Код = "1212210000"
                 Или Первый = "2001"
                 Или Первый = "2002"
                 Или Первый = "2003"
                 Или Первый = "2004"
                 Или Первый = "2005"
                 Или Первый = "2006"
                 Или Первый = "2006"
                 Или Первый = "2008"
                 Или Первый = "2009"
                 И Не Код = "2005202000"
                 Или Первый = "1701"
                 Или Код = "0409000000"
                 Или Код = "0407210000"
                 Или Код = "0407291000"
                 Или Код = "0407901000"
                 Или Код = "0408118000"
                 Или Код = "0408198100"
                 Или Код = "0408198900"
                 Или Код = "0408918000"
                 Или Код = "0408998000"
                 Или Первый = "0302"
                 Или Первый = "0303"
                 Или Первый = "0304"
                 Или Первый = "0305"
                 Или Первый = "1604"
                 И Не ( Код = "1604110000"
                 Или Код = "1604141600"
                 Или Код = "1604160000"
                 Или Код = "1604191000"
                 Или Код = "1604193100"
                 Или Код = "1604199710"
                 Или Код = "1604201000"
                 Или Код = "1604203000"
                 Или Код = "1604204000"
                 Или Код = "1604209010"
                 Или Код = "1604310000"
                 Или Код = "16043200"
                 ) Или Код = "3407000000"
                 Или Код = "3922100000"
                 Или Код = "3926100000"
                 Или Первый = "4202"
                 Или Код = "4421909800"
                 Или Код = "9619002100"
                 Или Код = "9619003100"
                 Или Код = "9619003900"
                 Или Код = "9619005101"
                 Или Код = "9619005901"
                 Или Код = "9619009001"
                 Или Код = "4820105000"
                 Или Код = "4820200000"
                 Или Код = "4820300000"
                 Или Код = "4820900000"
                 Или Код = "6101209000"
                 Или Код = "6101309000"
                 Или Код = "6101908000"
                 Или Код = "6102109000"
                 Или Код = "6102209000"
                 Или Код = "6102309000"
                 Или Код = "6102909000"
                 Или Первый = "6103"
                 Или Первый = "6104"
                 Или Первый = "6105"
                 Или Первый = "6106"
                 Или Первый = "6107"
                 Или Первый = "6108"
                 Или Первый = "6109"
                 Или Первый = "6110"
                 Или Первый = "6111"
                 Или Первый = "6112"
                 Или Первый = "6115"
                 Или Первый = "6116"
                 Или Первый = "6201"
                 Или Первый = "6202"
                 Или Первый = "6203"
                 Или Первый = "6204"
                 Или Первый = "6205"
                 Или Первый = "6206"
                 Или Первый = "6207"
                 Или Первый = "6208"
                 Или Первый = "6209"
                 Или Первый = "6211"
                 Или Код = "6216000000"
                 Или Первый = "6401"
                 Или Первый = "6402"
                 И Не ( Второй = "640212"
                 Или Код = "6402190000"
                 ) Или Первый = "6403"
                 И Не Код = "6403190000"
                 Или Первый = "6404"
                 И Не Код = "6404110000"
                 Или Первый = "6405"
                 Или Код = "6504000000"
                 Или Первый = "6506"
                 Или Второй = "871500"
                 Или Первый = "8716"
                 Или Код = "9403202009"
                 Или Третий = "940350000"
                 Или Код = "9403700009"
                 Или Второй = "940421"
                 Или Второй = "940429"
                 Или Второй = "950300"
                 Или Второй = "950490"

КонецФункции // ВходитВПеречень287()

// Заполняет структуру реквизитами ЭСЧФ (проверки на наличие полей не производятся, поэтому использовать до заполнения реальными данными)
//
// Параметры:
//  Структура  - Структура - структура для заполенния
//  Тип  - ПеречислениеСсылка.ТипыЭСЧФ - тип электронного счёта-фактуры
//
Процедура ЗаполнитьСтруктуруПолейЭСЧФ(Структура, Тип) Экспорт

	Структура.Вставить("НомерЭСЧФ");
	Структура.Вставить("ДатаВыставленияЭСЧФ");
	Структура.Вставить("ДатаСовершенияОперацииЭСЧФ");
	Структура.Вставить("ТипЭСЧФ");
	
	//Если Тип = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") Тогда//Перечисления.ТипыЭСЧФ.Дополнительный Тогда
		Структура.Вставить("КЭСЧФ");
		Структура.Вставить("ОтобразитьПолучателю");
	//ИначеЕсли Тип = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") Тогда//Перечисления.ТипыЭСЧФ.Исправленный Тогда
		Структура.Вставить("КЭСЧФ");
		Структура.Вставить("ДатаАннулированияЭСЧФ");
	//КонецЕсли;
	
	//Если Тип <> ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") Тогда//Перечисления.ТипыЭСЧФ.Дополнительный Тогда
		Структура.Вставить("ПоставщикСтатус");
		Структура.Вставить("ПоставщикВзаимозависимоеЛицо");
		Структура.Вставить("ПоставщикРезидентОффшорнойЗоны");
		Структура.Вставить("ПоставщикСделкаСТоварамиПоПеречню");
		Структура.Вставить("ПоставщикВходитВПереченьКрупныхПлательщиков");
		Структура.Вставить("ПоставщикКодСтраны");
		Структура.Вставить("ПоставщикУНП");
		Структура.Вставить("ПоставщикКодФилиала");
		Структура.Вставить("Поставщик");
		Структура.Вставить("ПоставщикЮридическийАдрес");
		Структура.Вставить("ПоставщикНомерСчетаКомитента");
		Структура.Вставить("ПоставщикДатаВыпискиКомитента");
		Структура.Вставить("ПоставщикНомерСчетаПродавца");
		Структура.Вставить("ПоставщикДатаВыпискиПродавца");
		Структура.Вставить("ПоставщикРегистрационныйНомерВыпускаТоваров");
		Структура.Вставить("ПоставщикДатаВыпускаТовара");
		Структура.Вставить("ПоставщикДатаВыдачиРазрешенияНаУбытие");
		Структура.Вставить("ПоставщикНомерЗаявленияОВвозеТоваров");
		Структура.Вставить("ПоставщикДатаЗаявленияОВвозеТоваров");
		Структура.Вставить("ПолучательСтатус");
		Структура.Вставить("ПолучательВзаимозависимоеЛицо");
		Структура.Вставить("ПолучательРезидентОффшорнойЗоны");
		Структура.Вставить("ПолучательСделкаСТоварамиПоПеречню");
		Структура.Вставить("ПолучательВходитВПереченьКрупныхПлательщиков");
		Структура.Вставить("ПолучательУНП");
		Структура.Вставить("ПолучательКодСтраны");
		Структура.Вставить("ПолучательКодФилиала");
		Структура.Вставить("Получатель");
		Структура.Вставить("ПолучательЮридическийАдрес");
		Структура.Вставить("ПолучательНомерДекларацииНаТовары");
		Структура.Вставить("ПолучательНомерЗаявленияОВвозеТоваров");
		Структура.Вставить("ПолучательДатаЗаявленияОВвозеТоваров");
		Структура.Вставить("ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров");
		Структура.Вставить("ДоговорНомер");
		Структура.Вставить("ДоговорДата");
		Структура.Вставить("ДополнительныеСведения");
		
	//КонецЕсли;

КонецПроцедуры // ДополнитьСтруктуруПолейЭСЧФ()

// Возвращает таблицу значений с колонками, соответствующими таблице товаров ЭСЧФ
//
// Возвращаемое значение:
//   ТаблицаЗначений   - пустая таблица товаров
//
Функция ПолучитьТаблицуТоваровЭСЧФ() Экспорт

	ТаблицаЗначений = Новый ТаблицаЗначений;
	КвалификаторНомерСтроки = Новый КвалификаторыЧисла(10);
	ОписаниеТиповНомерСтроки = Новый ОписаниеТипов("Число", КвалификаторНомерСтроки);
	ТаблицаЗначений.Колонки.Добавить("НомерСтроки", ОписаниеТиповНомерСтроки);
	КвалификаторТовар = Новый КвалификаторыСтроки(200);
	ТипыТоваров = Новый Массив;
	ТипыТоваров.Добавить(Тип("СправочникСсылка.Номенклатура"));
	ТипыТоваров.Добавить(Тип("СправочникСсылка.ОсновныеСредства"));
	ТипыТоваров.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	ТипыТоваров.Добавить(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	ТипыТоваров.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	ТипыТоваров.Добавить(Тип("Строка"));
	ОписаниеТиповТовар = Новый ОписаниеТипов(ТипыТоваров, КвалификаторТовар);
	ТаблицаЗначений.Колонки.Добавить("Товар", ОписаниеТиповТовар);
	ОписаниеТиповКодТНВЭД = Новый ОписаниеТипов("СправочникСсылка.КлассификаторТНВЭДТС");
	ТаблицаЗначений.Колонки.Добавить("КодТНВЭДЕАЭС", ОписаниеТиповКодТНВЭД);
	ОписаниеТиповКодОКЭД = Новый ОписаниеТипов("СправочникСсылка.КлассификаторОКЭД");
	ТаблицаЗначений.Колонки.Добавить("КодОКЭД", ОписаниеТиповКодОКЭД);
	ОписаниеТиповЕдиницаИзмерения = Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения");
	ТаблицаЗначений.Колонки.Добавить("ЕдиницаИзмерения", ОписаниеТиповЕдиницаИзмерения);
	КвалификаторКоличество = Новый КвалификаторыЧисла(26, 6);
	ОписаниеТиповКоличество = Новый ОписаниеТипов("Число", КвалификаторКоличество);
	ТаблицаЗначений.Колонки.Добавить("Количество", ОписаниеТиповКоличество);
	КвалификаторЦена = Новый КвалификаторыЧисла(24, 4, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТиповЦена = Новый ОписаниеТипов("Число", КвалификаторЦена);
	ТаблицаЗначений.Колонки.Добавить("Цена", ОписаниеТиповЦена);
	КвалификаторСуммы = Новый КвалификаторыЧисла(22, 2);
	ОписаниеТиповСуммы = Новый ОписаниеТипов("Число", КвалификаторСуммы);
	ТаблицаЗначений.Колонки.Добавить("Стоимость", ОписаниеТиповСуммы);
	ТаблицаЗначений.Колонки.Добавить("СуммаАкциза", ОписаниеТиповСуммы);
	ОписаниеТиповСтавкаНДС = Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС");
	ТаблицаЗначений.Колонки.Добавить("СтавкаНДС", ОписаниеТиповСтавкаНДС);
	ТаблицаЗначений.Колонки.Добавить("СуммаНДС", ОписаниеТиповСуммы);
	ТаблицаЗначений.Колонки.Добавить("СтоимостьСНДС", ОписаниеТиповСуммы);
	ОписаниеТиповТипСтавкиНДС = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыСтавокНДСЭСЧФ");
	ТаблицаЗначений.Колонки.Добавить("ТипСтавкиНДС", ОписаниеТиповТипСтавкиНДС);
	ОписаниеБулево = Новый ОписаниеТипов("Булево");
	ТаблицаЗначений.Колонки.Добавить("ВычетВПолномОбъеме", ОписаниеБулево);
	ТаблицаЗначений.Колонки.Добавить("ОсвобождениеОтНДС", ОписаниеБулево);
	ТаблицаЗначений.Колонки.Добавить("РеализацияЗаПределамиРБ", ОписаниеБулево);
	ТаблицаЗначений.Колонки.Добавить("ВвознойНДС", ОписаниеБулево);
	КвалификаторПроцент = Новый КвалификаторыЧисла(7, 4, ДопустимыйЗнак.Неотрицательный);
	ОписаниеТиповПроцент = Новый ОписаниеТипов("Число", КвалификаторПроцент);
	ТаблицаЗначений.Колонки.Добавить("ПроцентНДС", ОписаниеТиповПроцент);
	
	Возврат ТаблицаЗначений

КонецФункции

// Возвращает таблицу значений с колонками, соответствующими таблице грузоотправителей/грузополучателей ЭСЧФ
//
// Параметры:
//  Грузоотправитель - Булево - таблица грузоотправителя
// Возвращаемое значение:
//   ТаблицаЗначений   - пустая таблица грузоотправителей/грузополучателей
//
Функция ПолучитьТаблицуГрузоотправителиГрузополучателиЭСЧФ( Грузоотправитель = Истина ) Экспорт

    ТаблицаЗначений = Новый ТаблицаЗначений;
    КвалификаторКодСтраны = Новый КвалификаторыСтроки(3, ДопустимаяДлина.Фиксированная);
    ОписаниеТиповКодСтраны = Новый ОписаниеТипов("Строка", , КвалификаторКодСтраны);
    ТаблицаЗначений.Колонки.Добавить("КодСтраны", ОписаниеТиповКодСтраны);
    КвалификаторУНП = Новый КвалификаторыСтроки(9, ДопустимаяДлина.Фиксированная);
    ОписаниеТиповУНП = Новый ОписаниеТипов("Строка", , КвалификаторУНП);
    ТаблицаЗначений.Колонки.Добавить("УНП", ОписаниеТиповУНП);
    КвалификаторНаименование = Новый КвалификаторыСтроки(100);
    ОписаниеТиповНаименование = Новый ОписаниеТипов("Строка", КвалификаторНаименование);
    ТаблицаЗначений.Колонки.Добавить("Наименование", ОписаниеТиповНаименование);
    КвалификаторАдрес = Новый КвалификаторыСтроки(200);
    ОписаниеТиповАдрес = Новый ОписаниеТипов("Строка", КвалификаторАдрес);
    Если Грузоотправитель Тогда
        ТаблицаЗначений.Колонки.Добавить("АдресОтправки", ОписаниеТиповАдрес)
    Иначе
        ТаблицаЗначений.Колонки.Добавить("АдресДоставки", ОписаниеТиповАдрес)
    КонецЕсли;
    
    Возврат ТаблицаЗначений

КонецФункции // ПолучитьТаблицуГрузоотправителиГрузополучателиЭСЧФ()

// Возвращает таблицу значений с колонками, соответствующими таблице документов, подтверждающих поставку ЭСЧФ
//
// Возвращаемое значение:
//   ТаблицаЗначений   - пустая таблица документов, подтверждающих поставку
//
Функция ПолучитьТаблицуДокументовПоставкиЭСЧФ() Экспорт

	ТаблицаЗначений = Новый ТаблицаЗначений;
	КвалификаторВидаДокумента = Новый КвалификаторыЧисла(5, 0);
	ОписаниеТиповВидаДокумента = Новый ОписаниеТипов("СправочникСсылка.БланкиДокументов");//"Число", КвалификаторВидаДокумента);
	ТаблицаЗначений.Колонки.Добавить("ТипБСО", ОписаниеТиповВидаДокумента);
	КвалификаторДата = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата", КвалификаторДата);
	ТаблицаЗначений.Колонки.Добавить("Дата", ОписаниеТиповДата);
	//КвалификаторКодТипаБланка = Новый КвалификаторыСтроки(10);
	ОписаниеТиповКодТипаБланка = Новый ОписаниеТипов("СправочникСсылка.ТипыБСО");//"Строка", КвалификаторКодТипаБланка);
	ТаблицаЗначений.Колонки.Добавить("КодТипаБланка", ОписаниеТиповКодТипаБланка);
	КвалификаторСерия = Новый КвалификаторыСтроки(20);
	ОписаниеСерия = Новый ОписаниеТипов("Строка", КвалификаторСерия);
	ТаблицаЗначений.Колонки.Добавить("Серия", ОписаниеСерия);
	ТаблицаЗначений.Колонки.Добавить("Номер", ОписаниеСерия);
	
	Возврат ТаблицаЗначений

КонецФункции // ПолучитьТаблицуДокументовПоставкиЭСЧФ()

// Получает пакет XDTO по индексу или имени
//
// Параметры:
//  вФабрикаXDTO  - ФабрикаXDTO - фабрика-XDTO для получения пакетов
//  вURIПространстваИмен  - Строка, Число - URI пространства имен или индекс
//
// Возвращаемое значение:
//   ПакетXDTO   - пакет по имени или индексу
//
Функция ПолучитьПакетФабрикиXDTO(вФабрикаXDTO, вURIПространстваИмен) Экспорт

    Возврат вФабрикаXDTO.Получить(вURIПространстваИмен)

КонецФункции // ПолучитьПакетФабрикиXDTO()

// Формирует xml-документ, подписывает, и отправляет на портал
//
// Параметры:
//  Данные  - ДокументСсылка.ЭлектронныйСчетФактураВыданный, Структура - данные для работы
//  Отказ  - Булево - признак ошибки при обработке
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//  ФабрикаЭСЧФ  - ФабрикаXDTO - фабрика XDTO на основании схемы ИМНС или неопределено,
//                                 если не верны входные данные или файл схемы не найден
//  ОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  Товары  - Коллекция - таблица по товарам
//  Грузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  Грузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  Документы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  ЭтоИсходящийДокумент  - Булево - признак исходящего документа
//  Принят  - Булево - был ли документ принят или нет
//  ТекстОтвета  - Строка - строка с текстовой информацией ответа сервиса
//  ИмяФайлаОтвета  - Строка - имя файла сохраненной квитанции
//
Процедура СформироватьПодписатьОтправитьДокумент(Данные, Отказ = Ложь, ТекстОшибки = Неопределено, ФабрикаЭСЧФ = Неопределено, ОтправительУНП, Товары
                                                 , Грузоотправители = Неопределено, Грузополучатели = Неопределено, Документы = Неопределено, ЭтоИсходящийДокумент = Истина
                                                 , Принят, ТекстОтвета, ИмяФайлаОтвета = Неопределено) Экспорт
	
	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
    EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
    Если EInvVatService = Неопределено Тогда
        Возврат
    КонецЕсли;
    #КонецЕсли
    
    Если ФабрикаЭСЧФ = Неопределено Тогда
        ФабрикаЭСЧФ = ПолучитьФабрикуXDTO(Данные.ТипЭСЧФ)
    КонецЕсли;
    
    ЭлектронныйДокумент = ПолучитьОбъектДокументаXDTO(ФабрикаЭСЧФ);
    ЗаполнитьДаннымиОбъектXDTO(Данные, ЭлектронныйДокумент, ФабрикаЭСЧФ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент);
    
    ИмяФайлаДекларации = "";
    ОбъектЗаписи = ПолучитьОбъектЗаписиВФайлXML(Отказ, ТекстОшибки, ИмяФайлаДекларации);
    
    Если Отказ Или Не ЗаписатьДанныеВФайлXML(ЭлектронныйДокумент, ОбъектЗаписи, ФабрикаЭСЧФ, ТекстОшибки) Тогда
        ОбъектЗаписи.Закрыть();
        Возврат
    КонецЕсли;
    
    InvVatXml = EInvVatService.CreateEDoc();
    ОбъектЗаписи.Закрыть();
    res = InvVatXml.Document.LoadFromFile(ИмяФайлаДекларации);
    Если res <> 0 Тогда
        Отказ = Истина;
        Если ТекстОшибки <> Неопределено Тогда
            ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
        КонецЕсли;
        Возврат
    КонецЕсли;
    
	//Проверка XML файла на соответствие  xsd -схеме
	InvVatType = InvVatXml.Document.GetXmlNodeValue("issuance/general/documentType");
	Если InvVatType = "ORIGINAL" Тогда
	    xsd = "MNSATI_original.xsd";
	ИначеЕсли InvVatType = "FIXED" Тогда
	    xsd = "MNSATI_fixed.xsd";
	ИначеЕсли InvVatType = "ADDITIONAL" Тогда
	    xsd = "MNSATI_additional.xsd";
	ИначеЕсли InvVatType = "ADD_NO_REFERENCE" Тогда
	    xsd = "MNSATI_add_no_reference.xsd";
	Иначе
	    Если ТекстОшибки <> Неопределено Тогда
	        Отказ = Истина;
	        врТекстОшибки = "Файл " + ИмяФайлаДекларации + " содержит неверный тип документа";
	        ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
	    КонецЕсли;
	    Возврат
	КонецЕсли;
    
    // проверяется компонентой в любом случае на стороне клиента
    // + занимает много времени
    // + уже должен быть проверен "ЭСЧФСоответствуетПротоколу"
    res = InvVatXml.Document.ValidateXML(ПараметрыСеанса.XSD + xsd, 0);
    Если res <> 0 Тогда
        Если ТекстОшибки <> Неопределено Тогда
            ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
        КонецЕсли;
        Возврат
    КонецЕсли;
    
    //Выработка подписи
    res = InvVatXml.Sign(0);
    Если res <> 0 Тогда
        Отказ = Истина;
        Если ТекстОшибки <> Неопределено Тогда
            ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
        КонецЕсли;
        Возврат
    КонецЕсли;
    
    //Сохранение подписанного файла
    ИмяФайлаКвитанции = ПолучитьИмяВременногоФайла("xml");
    res = InvVatXml.SaveToFile( ИмяФайлаКвитанции );
    Если res <> 0 Тогда
        Отказ = Истина;
        Если ТекстОшибки <> Неопределено Тогда
            ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
        КонецЕсли;
        Возврат
    КонецЕсли;
    
    //Отправка подписанного документа на портал ЭСФЧ
    res = EInvVatService.SendEDoc(InvVatXml);
    Если res <> 0 Тогда
        Отказ = Истина;
        Если ТекстОшибки <> Неопределено Тогда
            ОтразитьОшибку(ТекстОшибки, EInvVatService.LastError);
        КонецЕсли;
        Возврат
    КонецЕсли;
    
    // Ответ от портала ЭСФЧ будет сохранен в фале с расширением ".xml"
    InvVatTicket = EInvVatService.Ticket;
    Принят = ( InvVatTicket.Accepted = 0 );
	ТекстОтвета = InvVatTicket.Message;
    Если Не Принят Тогда
        Если ТекстОшибки <> Неопределено Тогда
            врТекстОшибки = ТекстОтвета;
            ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры // СформироватьПодписатьОтправитьДокумент()

// Раскладывает "НомерЭСЧФ" на составляющие
//
// Параметры:
//  НомерЭСЧФ  - Строка(25) - уникальный номер электронного счета-фактуры
//  Год  - Число(4,0) - год из номера
//  УНП  - Строка(9) - УНП из номера
//  Номе  - Число(10,0) - номер с начала года из номера
//
Процедура РазложитьНомер(НомерЭСЧФ, Год, УНП, Номер) Экспорт

    УНП    = Лев(НомерЭСЧФ, 9);
    Год    = Число(Сред(НомерЭСЧФ, 11, 4));
    Номер  = Число(Прав(НомерЭСЧФ, 10));

КонецПроцедуры

// Преображует переданные данные в корректный номер ЭСЧФ
//
// Параметры:
//  УНП  - Строка(9) - УНП белорусского субъекта хозяйствования
//  Номер  - Число(10,0) - номер электронного счета-фактуры с начала года
//  Год  - Число(4,0) - год электронного счета-фактуры
//
// Возвращаемое значение:
//   Строка(25)   - номер электронного счета-фактуры в формате 'UU9999999-9999-9999999999'
//
Функция СформироватьНомерЭСЧФ(УНП, Год, Номер) Экспорт

    Возврат УНП + "-" + Формат(Год, "ЧЦ=4; ЧГ=0") + "-" + Формат(Номер, "ЧЦ=10; ЧВН=; ЧГ=0")

КонецФункции // СформироватьНомерЭСЧФ()

// Возвращает массив типов документов, которые не нужно обрабатывать
//
// Возвращаемое значение:
//   Массив   - типы документов, которые не нужно обрабатывать (загружаются авто.)
//
Функция ТипыДокументовРеализацииНеОбрабатывать() Экспорт

    Типы = Новый Массив;
    Если Метаданные.Документы.Найти("ЭкспортируемыеПроводкиПекарня") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ЭкспортируемыеПроводкиПекарня"))
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_ПоступлениеТоваровУслуг") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_ПоступлениеТоваровУслуг"));
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_ВозвратТоваровПоставщику") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_ВозвратТоваровПоставщику"));
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_ПереоценкаТоваровВРознице") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_ПереоценкаТоваровВРознице"));
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_ПеремещениеТоваров") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_ПеремещениеТоваров"));
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_РеализацияТоваров") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_РеализацияТоваров"));
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_ПеремещениеСРозничногоСкладаНаОптовый") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_ПеремещениеСРозничногоСкладаНаОптовый"));
    КонецЕсли;
    Если Метаданные.Документы.Найти("ю_02_ВозвратОтПокупателя") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ю_02_ВозвратОтПокупателя"));
    КонецЕсли;
    // ручные операции также пока не обрабатываем
    Если Метаданные.Документы.Найти("ОперацияБух") <> Неопределено Тогда
        Типы.Добавить(Тип("ДокументСсылка.ОперацияБух"));
    КонецЕсли;
    
    Возврат Типы

КонецФункции // ТипыДокументовРеализацииНеОбрабатывать()

// Заполняет таблицу данными по товарам из переданного документа
//
// Параметры:
//  Документ  - ДокументСсылка - документ для выборки товаров
//  Таблица  - ТаблицаЗначений - таблица товаров, соответствующая таблице товаров ЭСЧФ
//  СтавкаНДС  - ПеречислениеСсылка.СтавкиНДС - ставка НДС для отбора строк
//  Товары  - Булево - выбирать данные о товарах
//  Услуги  - Булево - выбирать данные о услугах
//  ВозвратнаяТара  - Булево - выбирать данные о возвратной таре
//  ОС  - Булево - выбирать данные о основных средствах
//  НМА  - Булево - выбирать данные о НМА
//  ВвознойНДС  - Булево - если это ввозной НДС (статус поставщика - "Иностранная организация",
//                         а статус получателя "Покупатель")
//  РеализацияЗаПределамиРБ  - Булево - если это реализация на экспорт
//  ВычетВПолномОбъеме  - Булево - если нужно отразить вычет в полном объёме
//
Процедура ПолучитьДанныеПоТоварам(Документ, Таблица, СтавкаНДС = Неопределено, Товары = Истина, Услуги = Истина, ВозвратнаяТара = Истина, ОС = Истина, НМА = Истина, ВвознойНДС = Ложь
                                 , РеализацияЗаПределамиРБ = Ложь, ВычетВПолномОбъеме = Ложь, ОсвобождениеОтНДС = Ложь) Экспорт

    МетаданныеДокумента = Документ.Метаданные();
    ИмяДокумента = МетаданныеДокумента.Имя;
    БезНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.БезНДС");
    РасчетнаяСтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.РасчетнаяСтавка");
    НДС0 = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС0");
    ДобавитьПсевдонимыПолей = Истина;
    ДобавитьУсловиеНаСтавкуНДС = ( СтавкаНДС <> Неопределено );
    СуммаВключаетНДС = ( МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено И Документ.СуммаВключаетНДС );
    Запрос = Новый Запрос;
    Запрос.УстановитьПараметр("СуммаВключаетНДС", СуммаВключаетНДС);
    ТекстЗапроса = "";
    ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
    ВалютаДокумента = ?(МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено, Документ.ВалютаДокумента, ВалютаРегламентированногоУчета);
    
	Если НМА И ИмяДокумента = "ПередачаНМА" Тогда
		
		Если ДобавитьУсловиеНаСтавкуНДС И Документ.СтавкаНДС <> СтавкаНДС Тогда
			Возврат
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	0 КАК Таблица,
		|	1 КАК НомерСтроки,
		|	ПередачаНМА.НематериальныйАктив КАК Товар,
		|	ПередачаНМА.НематериальныйАктив.КодТНВЭДТС КАК КодТНВЭДЕАЭС,
		|	NULL КАК КодОКЭД,
		|	&Штука КАК ЕдиницаИзмерения,
		|	1 КАК Количество,
		|	ПередачаНМА.Сумма КАК Цена,
		|	ПередачаНМА.Сумма КАК Стоимость,
		|	ПередачаНМА.СтавкаНДС КАК СтавкаНДС,
		|	ПередачаНМА.СуммаНДС КАК СуммаНДС,
		|	ВЫБОР
		|		КОГДА &СуммаВключаетНДС
		|			ТОГДА ПередачаНМА.Сумма
		|		ИНАЧЕ ПередачаНМА.Сумма + ПередачаНМА.СуммаНДС
		|	КОНЕЦ КАК СтоимостьСНДС
		|ИЗ
		|	Документ.ПередачаНМА КАК ПередачаНМА
		|ГДЕ
		|	ПередачаНМА.Ссылка = &Ссылка
		|	И ПередачаНМА.СтавкаНДС <> &БезНДС";
		
		Перейти ~ВыполнениеЗапроса
		
	КонецЕсли;
    
    Если ОС И ИмяДокумента = "ПередачаОС" Тогда//МетаданныеДокумента.ТабличныеЧасти.Найти("ОС") <> Неопределено Тогда
        
        ТекстЗапроса = ТекстЗапроса +
        "ВЫБРАТЬ
        |   1 КАК Таблица,
        |   ОС.НомерСтроки КАК НомерСтроки,
        |   ОС.ОсновноеСредство КАК Товар,
        |   ОС.ОсновноеСредство.КодТНВЭДТС КАК КодТНВЭДЕАЭС,
        |   NULL КАК КодОКЭД,
        |   &Штука КАК ЕдиницаИзмерения,
        |   1 КАК Количество,
        |   ОС.СтоимостьБУ КАК Цена,
        |   ОС.Сумма КАК Стоимость,
        |   ОС.СтавкаНДС КАК СтавкаНДС,
        |   ОС.СуммаНДС КАК СуммаНДС,
        |   ВЫБОР
        |       КОГДА &СуммаВключаетНДС
        |           ТОГДА ОС.Сумма
        |       ИНАЧЕ ОС.Сумма + ОС.СуммаНДС
        |   КОНЕЦ КАК СтоимостьСНДС
        |ИЗ
        |   Документ.ПередачаОС.ОС КАК ОС
        |ГДЕ
        |   ОС.Ссылка = &Ссылка" + ?(ДобавитьУсловиеНаСтавкуНДС, " И ОС.СтавкаНДС = &СтавкаНДС", "");
        
        Перейти ~ВыполнениеЗапроса
        
    КонецЕсли;
    
    Если Товары И МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда
        
        ДобавитьПсевдонимыПолей = Ложь;
        ТекстЗапроса = ТекстЗапроса +
        "ВЫБРАТЬ
        |   2 КАК Таблица,
        |   Товары.НомерСтроки КАК НомерСтроки,
        |   Товары.Номенклатура КАК Товар,
        |   Товары.Номенклатура.КодТНВЭДТС КАК КодТНВЭДЕАЭС,
        |   Товары.Номенклатура.КодОКЭД КАК КодОКЭД,
        |   Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |   Товары.Количество КАК Количество,
        |   Товары.Цена КАК Цена,
        |   Товары.Сумма КАК Стоимость,
        |   Товары.СтавкаНДС КАК СтавкаНДС,
        |   Товары.СуммаНДС КАК СуммаНДС,
        |   ВЫБОР
        |       КОГДА &СуммаВключаетНДС
        |           ТОГДА Товары.Сумма
        |       ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
        |   КОНЕЦ КАК СтоимостьСНДС
        |ИЗ
        |   Документ." + ИмяДокумента + ".Товары КАК Товары
        |ГДЕ
        |   Товары.Ссылка = &Ссылка" + ?(ДобавитьУсловиеНаСтавкуНДС, " И Товары.СтавкаНДС = &СтавкаНДС", "")
        
    КонецЕсли;
    
    Если Услуги И МетаданныеДокумента.ТабличныеЧасти.Найти("Услуги") <> Неопределено Тогда
        
        Если Не ДобавитьПсевдонимыПолей Тогда
            ТекстЗапроса = ТекстЗапроса + "
            |
            |ОБЪЕДИНИТЬ ВСЕ
            |
            |"
        КонецЕсли;
        
        ТекстЗапроса = ТекстЗапроса + 
        "ВЫБРАТЬ
        |   3" + ?(ДобавитьПсевдонимыПолей, " КАК Таблица" , "") + ",
        |   Услуги.НомерСтроки" + ?(ДобавитьПсевдонимыПолей, " КАК НомерСтроки" , "") + ",
        |   Услуги.Номенклатура" + ?(ДобавитьПсевдонимыПолей, " КАК Товар" , "") + ",
        |   Услуги.Номенклатура.КодТНВЭДТС" + ?(ДобавитьПсевдонимыПолей, " КАК КодТНВЭДЕАЭС" , "") + ",
        |   Услуги.Номенклатура.КодОКЭД" + ?(ДобавитьПсевдонимыПолей, " КАК КодОКЭД" , "") + ",
        |   NULL" + ?(ДобавитьПсевдонимыПолей, " КАК ЕдиницаИзмерения" , "") + ",
        |   Услуги.Количество" + ?(ДобавитьПсевдонимыПолей, " КАК Количество" , "") + ",
        |   Услуги.Цена" + ?(ДобавитьПсевдонимыПолей, " КАК Цена" , "") + ",
        |   Услуги.Сумма" + ?(ДобавитьПсевдонимыПолей, " КАК Стоимость" , "") + ",
        |   Услуги.СтавкаНДС" + ?(ДобавитьПсевдонимыПолей, " КАК СтавкаНДС" , "") + ",
        |   Услуги.СуммаНДС" + ?(ДобавитьПсевдонимыПолей, " КАК СуммаНДС" , "") + ",
        |   ВЫБОР
        |       КОГДА &СуммаВключаетНДС
        |           ТОГДА Услуги.Сумма
        |       ИНАЧЕ Услуги.Сумма + Услуги.СуммаНДС
        |   КОНЕЦ" + ?(ДобавитьПсевдонимыПолей, " КАК СтоимостьСНДС" , "") + "
        |ИЗ
        |   Документ." + ИмяДокумента + ".Услуги КАК Услуги
        |ГДЕ
        |   Услуги.Ссылка = &Ссылка" + ?(ДобавитьУсловиеНаСтавкуНДС, " И Услуги.СтавкаНДС = &СтавкаНДС", "");
        ДобавитьПсевдонимыПолей = Ложь;
        
    КонецЕсли;
    
    Если ВозвратнаяТара И МетаданныеДокумента.ТабличныеЧасти.Найти("ВозвратнаяТара") <> Неопределено
        И ( Не ДобавитьУсловиеНаСтавкуНДС Или ДобавитьУсловиеНаСтавкуНДС И СтавкаНДС = БезНДС ) Тогда
        
        Если Не ДобавитьПсевдонимыПолей Тогда
            ТекстЗапроса = ТекстЗапроса + "
            |
            |ОБЪЕДИНИТЬ ВСЕ
            |
            |"
        КонецЕсли;
        
        ТекстЗапроса = ТекстЗапроса +
        "ВЫБРАТЬ
        |   4" + ?(ДобавитьПсевдонимыПолей, " КАК Таблица" , "") + ",
        |   ВозвратнаяТара.НомерСтроки" + ?(ДобавитьПсевдонимыПолей, " КАК НомерСтроки" , "") + ",
        |   ВозвратнаяТара.Номенклатура" + ?(ДобавитьПсевдонимыПолей, " КАК Товар" , "") + ",
        |   ВозвратнаяТара.Номенклатура.КодТНВЭДТС" + ?(ДобавитьПсевдонимыПолей, " КАК КодТНВЭДЕАЭС" , "") + ",
        |   ВозвратнаяТара.Номенклатура.КодОКЭД" + ?(ДобавитьПсевдонимыПолей, " КАК КодОКЭД" , "") + ",
        |   NULL" + ?(ДобавитьПсевдонимыПолей, " КАК ЕдиницаИзмерения" , "") + ",
        |   ВозвратнаяТара.Количество" + ?(ДобавитьПсевдонимыПолей, " КАК Количество" , "") + ",
        |   ВозвратнаяТара.Цена" + ?(ДобавитьПсевдонимыПолей, " КАК Цена" , "") + ",
        |   ВозвратнаяТара.Сумма" + ?(ДобавитьПсевдонимыПолей, " КАК Стоимость" , "") + ",
        |   &БезНДС" + ?(ДобавитьПсевдонимыПолей, " КАК СтавкаНДС" , "") + ",
        |   0" + ?(ДобавитьПсевдонимыПолей, " КАК СуммаНДС" , "") + ",
        |   ВозвратнаяТара.Сумма" + ?(ДобавитьПсевдонимыПолей, " КАК СтоимостьСНДС" , "") + "
        |ИЗ
        |   Документ." + ИмяДокумента + ".ВозвратнаяТара КАК ВозвратнаяТара
        |ГДЕ
        |   ВозвратнаяТара.Ссылка = &Ссылка";
        ДобавитьПсевдонимыПолей = Ложь;
        
    КонецЕсли;
    
~ВыполнениеЗапроса:
    // Если текст запроса пустой, то что-то определенно пошло не так
    Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
        //// Выбираем по документу реализации
        //// Предполагается что в документе только обороты по счетам 90 и 91
        //Запрос.УстановитьПараметр("Период", Документ.МоментВремени());
        //ТекстЗапроса = "ВЫБРАТЬ
        //|    ВЫБОР
        //|        КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.НоменклатурныеГруппы
        //|            ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
        //|        КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
        //|            ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
        //|    КОНЕЦ КАК Товар,
        //|    ВЫБОР
        //|        КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2 ССЫЛКА Перечисление.СтавкиНДС
        //|            ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
        //|        КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2 ССЫЛКА Перечисление.СтавкиНДС
        //|            ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
        //|    КОНЕЦ КАК СтавкаНДС,
        //|    ВЫБОР
        //|        КОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1 ССЫЛКА Справочник.НоменклатурныеГруппы
        //|            ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
        //|    КОНЕЦ КАК Цена,
        //|    ВЫБОР
        //|        КОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1 ССЫЛКА Справочник.НоменклатурныеГруппы
        //|            ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
        //|    КОНЕЦ КАК СуммаНДС
        //|ПОМЕСТИТЬ Суммы
        //|ИЗ
        //|    РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&Период, &Период, Регистратор = &Ссылка, , ) КАК ХозрасчетныйДвиженияССубконто
        //|;
        //|
        //|////////////////////////////////////////////////////////////////////////////////
        //|ВЫБРАТЬ
        //|    Суммы.Товар КАК Товар,
        //|    NULL КАК КодТНВЭДТС,
        //|    NULL КАК КодОКЭД,
        //|    Суммы.СтавкаНДС КАК СтавкаНДС,
        //|    СУММА(Суммы.Цена) КАК Цена,
        //|    СУММА(Суммы.СуммаНДС) КАК СуммаНДС,
        //|    NULL КАК ЕдиницаИзмерения,
        //|    СУММА(0) КАК Количество,
        //|    СУММА(Суммы.Цена) КАК Стоимость,
        //|    СУММА(Суммы.Цена + Суммы.СуммаНДС) КАК СтоимостьСНДС
        //|ИЗ
        //|    Суммы КАК Суммы
        //|
        //|СГРУППИРОВАТЬ ПО
        //|    Суммы.Товар,
        //|    Суммы.СтавкаНДС";
        Возврат
    КонецЕсли;
    // Выполнение запроса
    Запрос.Текст = ТекстЗапроса;
    Запрос.УстановитьПараметр("Ссылка", Документ);
    Запрос.УстановитьПараметр("БезНДС", БезНДС);
    Запрос.УстановитьПараметр("Штука", Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796"));
    Если СтавкаНДС <> Неопределено Тогда
        Запрос.УстановитьПараметр("СтавкаНДС", СтавкаНДС);
    КонецЕсли;
    
    Результат = Запрос.Выполнить();
    Если Результат.Пустой() Тогда
        Возврат
    КонецЕсли;
    
    Добавить = 0;
    Таб      = 0;
    
    Если ВалютаДокумента <> ВалютаРегламентированногоУчета Тогда
        Курс = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Документ.Дата);
    Иначе
        Курс = Неопределено
    КонецЕсли;
    
    Выборка = Результат.Выбрать();
    Пока Выборка.Следующий() Цикл
		
		Если Выборка.Цена = 0 Тогда
			Продолжить;
		КонецЕсли;
		
        Если Выборка.Таблица <> Таб Тогда
            Добавить = Добавить + Таблица.Количество()
        КонецЕсли;
        
        Таб = Выборка.Таблица;
        
        НоваяСтрока = Таблица.Добавить();
        Если ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "НомерСтроки");
        Иначе
            ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка,, "НомерСтроки, Цена, СуммаНДС, Стоимость, СтоимостьСНДС");
            НоваяСтрока.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Цена, ВалютаРегламентированногоУчета, ВалютаДокумента, 1, Курс.Курс,, Курс.Кратность);
            НоваяСтрока.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СуммаНДС, ВалютаРегламентированногоУчета, ВалютаДокумента, 1, Курс.Курс,, Курс.Кратность);
            НоваяСтрока.Стоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Стоимость, ВалютаРегламентированногоУчета, ВалютаДокумента, 1, Курс.Курс,, Курс.Кратность);
            НоваяСтрока.СтоимостьСНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.СтоимостьСНДС, ВалютаРегламентированногоУчета, ВалютаДокумента, 1, Курс.Курс,, Курс.Кратность);
        КонецЕсли;
        НоваяСтрока.ПроцентНДС  = УчетНДС.ПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС);
        НоваяСтрока.НомерСтроки = Выборка.НомерСтроки + Добавить;
        
        Если Выборка.СтавкаНДС = РасчетнаяСтавкаНДС Тогда
            НоваяСтрока.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Расчетная")
        ИначеЕсли Выборка.СтавкаНДС = БезНДС Тогда
            НоваяСтрока.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.БезНДС");
            НоваяСтрока.ОсвобождениеОтНДС = Истина;
        ИначеЕсли Выборка.СтавкаНДС = НДС0 Тогда
            НоваяСтрока.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Ноль")
        Иначе
            НоваяСтрока.ТипСтавкиНДС = ПредопределенноеЗначение("Перечисление.ТипыСтавокНДСЭСЧФ.Фиксированная")
        КонецЕсли;
        
        НоваяСтрока.ВвознойНДС              = ВвознойНДС;
        НоваяСтрока.РеализацияЗаПределамиРБ = РеализацияЗаПределамиРБ;
        НоваяСтрока.ВычетВПолномОбъеме      = ВычетВПолномОбъеме;
        НоваяСтрока.ОсвобождениеОтНДС       = ОсвобождениеОтНДС;
        
    КонецЦикла;

КонецПроцедуры // ПолучитьДанныеПоТоварм()

// Заполняет структуру ЭСЧФ значениями полей документа
//
// Параметры:
//  Документ  - ДокументСсылка - документ для выборки товаров
//  Структура  - Структура - структура для заполнения свойств
//  Контрагент  - СправочникСсылка.Контрагенты - контрагент
//              ! в случае отсутствия подбирается и устанавливается в переменную
//  Договор  - СправочникСсылка.ДоговорыКонтрагентов - договор контрагента
//              ! в случае отсутствия подбирается и устанавливается в переменную
//  Исходящий  - Булево - признак исходящего документа
//  СделкаПоПеречню  - Булево - признак сделки по перечню согласно указа №287 от 21 июня 2007
//  ПоставщикСтатус  - ПеречислениеСсылка.СтатусыПоставщикаЭСЧФ - статус поставщика
//  ПолучательСтатус  - ПеречислениеСсылка.СтатусыПолучателяЭСЧФ - статус получателя
//
Процедура ПолучитьЗначенияПолей(Документ, Структура, Контрагент = Неопределено, Договор = Неопределено, Исходящий = Истина
                                , СделкаПоПеречню = Ложь, ПоставщикСтатус = Неопределено, ПолучательСтатус = Неопределено) Экспорт

    Перем СтатусПоставщика, СтатусПолучателя;
    
    Если Не ЗначениеЗаполнено(Контрагент) И Документ.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
        Контрагент = Документ.Контрагент
    КонецЕсли;
    Если Не ЗначениеЗаполнено(Договор) И Документ.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
        Договор = Документ.ДоговорКонтрагента
    КонецЕсли;
    Если Контрагент = Неопределено Или Договор = Неопределено Тогда
        Запрос = Новый Запрос("ВЫБРАТЬ
                              | ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
                              | ХозрасчетныйОбороты.Субконто2 КАК Договор
                              |ИЗ
                              | РегистрБухгалтерии.Хозрасчетный.Обороты(&МоментВремени, &МоментВремени, Регистратор, , &ВидыСубконто, , , ) КАК ХозрасчетныйОбороты
                              |ГДЕ
                              | ХозрасчетныйОбороты.Регистратор = &Регистратор");
        Запрос.УстановитьПараметр("МоментВремени", Документ.МоментВремени());
        ВидыСубконто = Новый Массив;
        ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
        ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
        Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
        Запрос.УстановитьПараметр("Регистратор", Документ);
        Результат = Запрос.Выполнить();
        Если Результат.Пустой() Тогда
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = "Не удалось найти контрагента и договор в проводках <" + Документ + ">";
            Сообщение.Сообщить();
            Возврат
        КонецЕсли;
        Выборка = Результат.Выбрать();
        Если Выборка.Следующий() Тогда
            Если Не ЗначениеЗаполнено(Контрагент) И ЗначениеЗаполнено(Выборка.Контрагент) Тогда
                Контрагент = Выборка.Контрагент
            ИначеЕсли Не ЗначениеЗаполнено(Контрагент) Тогда
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = "Не удалось найти контрагента в проводках <" + Документ + ">";
                Сообщение.Сообщить();
                Возврат
            КонецЕсли;
            Если Не ЗначениеЗаполнено(Договор) И ЗначениеЗаполнено(Выборка.Договор) Тогда
                Договор = Выборка.Договор
            ИначеЕсли Не ЗначениеЗаполнено(Договор) Тогда
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = "Не удалось найти договор контрагента в проводках <" + Документ + ">";
                Сообщение.Сообщить();
                Возврат
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    // т.к. куча контрагентов без страны регистрации и не указан флаг "Резидент РБ"
    Если Исходящий Тогда
        Поставщик  = Документ.Организация;
        Получатель = Контрагент;
        Если Поставщик.СтранаРегистрации.Пустая() Тогда//И Поставщик.РезидентРБ Тогда
            ПоставщикКодСтраны = "112"
        Иначе
            ПоставщикКодСтраны = Поставщик.СтранаРегистрации.Код
        КонецЕсли;
        Если Получатель.СтранаРегистрации.Пустая() Тогда// И Получатель.РезидентРБ Тогда
            ПолучательКодСтраны = "112"
        Иначе
            ПолучательКодСтраны = Получатель.СтранаРегистрации.Код
        КонецЕсли;
        ПоставщикВзаимозависимоеЛицо  = ЭСЧФсервер.Взаимозависимы(Документ.Дата, Поставщик.ИНН, Получатель.ИНН);
        ПолучательВзаимозависимоеЛицо = Ложь;
    Иначе
        Получатель = Документ.Организация;
        Поставщик  = Контрагент;
        Если Поставщик.СтранаРегистрации.Пустая() Тогда// И Поставщик.РезидентРБ Тогда
            ПолучательКодСтраны = "112"
        Иначе
            ПолучательКодСтраны = Поставщик.СтранаРегистрации.Код
        КонецЕсли;
        Если Получатель.СтранаРегистрации.Пустая() Тогда// И Получатель.РезидентРБ Тогда
            ПоставщикКодСтраны = "112"
        Иначе
            ПоставщикКодСтраны = Получатель.СтранаРегистрации.Код;
        КонецЕсли;
        ПоставщикВзаимозависимоеЛицо  = Ложь;
        ПолучательВзаимозависимоеЛицо = ЭСЧФсервер.Взаимозависимы(Документ.Дата, Получатель.ИНН, Поставщик.ИНН);
    КонецЕсли;
    
    ВидДоговора = Договор.ВидДоговора;
    ПоставщикУНП  = СокрЛП(Поставщик.ИНН);
    ПолучательУНП = СокрЛП(Получатель.ИНН);
    
    Структура.Вставить("ПоставщикВзаимозависимоеЛицо", ПоставщикВзаимозависимоеЛицо);
    Структура.Вставить("ПоставщикРезидентОффшорнойЗоны", Поставщик.РезидентОффшорнойЗоны);
    Структура.Вставить("ПоставщикСделкаСТоварамиПоПеречню", Исходящий И СделкаПоПеречню);
    Структура.Вставить("ПоставщикВходитВПереченьКрупныхПлательщиков"
                       , ЭСЧФсервер.ВходитВПереченьКрупныхПлательщиков(Документ.Дата, ПолучательУНП));
    //Если Не Поставщик.РезидентРБ Тогда
        Структура.Вставить("ПоставщикКодСтраны", ПоставщикКодСтраны);
    //Иначе
    //    Структура.Вставить("ПоставщикКодСтраны", "");
    //КонецЕсли;
    Структура.Вставить("ПоставщикУНП", ПоставщикУНП);
    //Структура.Вставить("ПоставщикКодФилиала");
    Структура.Вставить("Поставщик", Поставщик.НаименованиеПолное);
    Структура.Вставить("ПоставщикЮридическийАдрес"
                       , УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Поставщик, "Юридический"));
    Если ЗначениеЗаполнено(ПоставщикСтатус) Тогда
        СтатусПоставщика = ПоставщикСтатус
    ИначеЕсли Не Поставщик.РезидентРБ Тогда
        СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация
    ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
        СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Комиссионер
    ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
        СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Комитент
    ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
        СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Заказчик
    Иначе//Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
        СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Продавец
    КонецЕсли;
    Структура.Вставить("ПоставщикСтатус", СтатусПоставщика);
    Если ЗначениеЗаполнено(ПолучательСтатус) Тогда
        СтатусПолучателя = ПолучательСтатус
    ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем И Исходящий Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Покупатель
    ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком И Не Исходящий Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Покупатель
    ИначеЕсли СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Заказчик Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Потребитель
    ИначеЕсли СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Комитент Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Комиссионер
    ИначеЕсли СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация И Получатель.РезидентРБ Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.ПокупательОбъектовУИностраннойОрганизации
    ИначеЕсли СтатусПоставщика = Перечисления.СтатусыПоставщикаЭСЧФ.Продавец И ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Комиссионер
    ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером И Исходящий Тогда
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Комиссионер
    Иначе
        СтатусПолучателя = Перечисления.СтатусыПолучателяЭСЧФ.Покупатель
    КонецЕсли;
    Структура.Вставить("ПолучательСтатус", СтатусПолучателя);
    //! остальные статусы пока никак не учитываются и нет возможности определить по реквизитам
    //? если поставщик - комиссионер, то найти номер счета комитента во входящих ЭСЧФ
    //Структура.Вставить("ПоставщикНомерСчетаКомитента");
    //Структура.Вставить("ПоставщикДатаВыпискиКомитента");
    //Структура.Вставить("ПоставщикНомерСчетаПродавца");
    //Структура.Вставить("ПоставщикДатаВыпискиПродавца");
    //Структура.Вставить("ПоставщикРегистрационныйНомерВыпускаТоваров");
    //Структура.Вставить("ПоставщикДатаВыпускаТовара");
    //Структура.Вставить("ПоставщикДатаВыдачиРазрешенияНаУбытие");
    //Структура.Вставить("ПоставщикНомерЗаявленияОВвозеТоваров");
    //Структура.Вставить("ПоставщикДатаЗаявленияОВвозеТоваров");
    Структура.Вставить("ПолучательВзаимозависимоеЛицо", ПолучательВзаимозависимоеЛицо);
    Структура.Вставить("ПолучательРезидентОффшорнойЗоны", Получатель.РезидентОффшорнойЗоны);
    Структура.Вставить("ПолучательСделкаСТоварамиПоПеречню", Не Исходящий И СделкаПоПеречню);
    Структура.Вставить("ПолучательВходитВПереченьКрупныхПлательщиков"
                       , ЭСЧФсервер.ВходитВПереченьКрупныхПлательщиков(Документ.Дата, ПолучательУНП));
    Структура.Вставить("ПолучательУНП", ПолучательУНП);
    //Если Не Получатель.РезидентРБ Тогда
    //    Структура.Вставить("ПолучательКодСтраны", ПолучательКодСтраны);
    //Иначе
    //    Структура.Вставить("ПолучательКодСтраны", "");
    //КонецЕсли;
    Структура.Вставить("ПолучательКодСтраны", ПолучательКодСтраны);
    //Структура.Вставить("ПолучательКодФилиала");
    Структура.Вставить("Получатель", Получатель.НаименованиеПолное);
    Структура.Вставить("ПолучательЮридическийАдрес"
                       , УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Получатель, "Юридический"));
    //Структура.Вставить("ПолучательНомерДекларацииНаТовары");
    //Структура.Вставить("ПолучательНомерЗаявленияОВвозеТоваров");
    //Структура.Вставить("ПолучательДатаЗаявленияОВвозеТоваров");
    //Структура.Вставить("ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров");
    //Структура.Вставить("ДоговорНомер", Договор.Наименование);
    Структура.Вставить("ДоговорНомер", Договор.НомерДоговора);
    Структура.Вставить("ДоговорДата",  Договор.ДатаДоговора);
    //Структура.Вставить("ДополнительныеСведения");

КонецПроцедуры // ПолучитьЗначенияПолей()

// Добавляет строку в таблицу документов поставки по реквизитам переданного документа
//
// Параметры:
//  Документ  - ДокументСсылка - документ для поиска реквизитов
//  Таблица  - ТаблицаЗначений - таблица, соответстующая таблице документов поставки ЭСЧФ
//  ТипБСО  - СправочникСсылка.БланкиДокументов - тип бланка документа
//  НомерНакладной  - Строка - номер документа
//  СерияБланка  - Строка - серия документа
//  Исходящий  - Булево - найти реквизиты исходящего документа
//  КодБланка  - СправочникСсылка.ТипыБСО - тип бланка
//  Дата  - Дата - дата бланка
//
Процедура ДобавитьДокументПоставки(Документ, Таблица, ТипБСО = Неопределено, НомерНакладной = Неопределено
                                   , СерияБланка = Неопределено, ИсходящийБланк = Истина, КодБланка = Неопределено, Дата = Неопределено) Экспорт

    МетаданныеДокумента = Документ.Метаданные();
    
    Если ТипБСО = Неопределено Тогда
        ЕстьРеквизитТипБСО  = ( МетаданныеДокумента.Реквизиты.Найти("ТипБСО") <> Неопределено );
        Если ЕстьРеквизитТипБСО И ТипЗнч(Документ.ТипБСО) = Тип("СправочникСсылка.БланкиДокументов") Тогда
            ТипБСО = Документ.ТипБСО
        ИначеЕсли ЕстьРеквизитТипБСО Тогда
            ТипБСО = Документ.ТипБСО.ТипБСО
        КонецЕсли;
    Иначе
        ЕстьРеквизитТипБСО = Истина;
    КонецЕсли;
    
    Если КодБланка = Неопределено Тогда
        КодТипаБланка = ?(ЕстьРеквизитТипБСО, ТипБСО.ТипБСО, Справочники.ТипыБСО.Другое)
    Иначе
        КодТипаБланка = КодБланка
    КонецЕсли;
    
    БланкНакладная = ( КодТипаБланка = Справочники.ТипыБСО.ТН2 Или КодТипаБланка = Справочники.ТипыБСО.ТТН1 );
    
    Если ИсходящийБланк Тогда
        
        Если НомерНакладной <> Неопределено Тогда
            ЕстьНомерНакладной = ЗначениеЗаполнено(НомерНакладной);
        Иначе
            ЕстьНомерНакладной = ( МетаданныеДокумента.Реквизиты.Найти("НомерНакладной") <> Неопределено );
            Если БланкНакладная И ЕстьНомерНакладной Тогда
                НомерНакладной = Документ.НомерНакладной
            ИначеЕсли Не БланкНакладная Тогда
                НомерНакладной = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ)
            КонецЕсли;
        КонецЕсли;
        
        Если СерияБланка <> Неопределено Тогда
            ЕстьСерияБланка = ЗначениеЗаполнено(СерияБланка);
        Иначе
            ЕстьСерияБланка = ( МетаданныеДокумента.Реквизиты.Найти("СерияБланка") <> Неопределено );
            Если ЕстьСерияБланка Тогда
                СерияБланка = Документ.СерияБланка
            КонецЕсли;
        КонецЕсли;
        
        Если Дата = Неопределено Тогда
            ДатаИсходящего = Документ.Дата;
        Иначе
            ДатаИсходящего = Дата
        КонецЕсли;
        
    КонецЕсли;
    
    // добавление исходящего бланка
    Если ИсходящийБланк И ЕстьНомерНакладной И ( Не БланкНакладная Или ЕстьСерияБланка ) Тогда//И ЗначениеЗаполнено(Документ.НомерНакладной)
        //И МетаданныеДокумента.Реквизиты.Найти("СерияБланка") <> Неопределено// И ЗначениеЗаполнено(Документ.СерияБланка)
        //Тогда
        
        НоваяСтрока = Таблица.Добавить();
        НоваяСтрока.КодТипаБланка = КодТипаБланка;
        НоваяСтрока.Дата   = ДатаИсходящего;
		НоваяСтрока.ТипБСО = ТипБСО;
		Если БланкНакладная Тогда
            НоваяСтрока.Серия  = СокрЛП(СерияБланка);
			Попытка
			//{[-](фрагмент удален)Макей Евгений Владимирович 18.11.2016 16:03:40
			//НоваяСтрока.Номер  = Формат(Число(СтрЗаменить(СтрЗаменить(НомерНакладной, Символ(32), ""), Символ(160), "")), "ЧЦ=7; ЧДЦ=; ЧВН=; ЧГ=0");;//СтрЗаменить(НомерНакладной, " ", "");
			//}Макей Евгений Владимирович 18.11.2016 16:03:40
			//{[+](фрагмент добавлен), Макей Евгений Владимирович 18.11.2016 16:03:46
			НоваяСтрока.Номер = НомерНакладной( НомерНакладной );
			//}Макей Евгений Владимирович 18.11.2016 16:03:46
			Исключение
            НоваяСтрока.Номер  = "";
            КонецПопытки
        Иначе
            НоваяСтрока.Номер  = НомерНакладной;
        КонецЕсли;
        
        Возврат
        
    ИначеЕсли ИсходящийБланк Тогда
        
        Возврат
        
    КонецЕсли;
    // добавление исходящего бланка
    // скорее всего вообще не понадобиться, т.к. такие документы должны быть на основании вх. ЭСЧФ
    Если Не ИсходящийБланк И МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено И ЗначениеЗаполнено(Документ.НомерВходящегоДокумента)
        И МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено И ЗначениеЗаполнено(Документ.ДатаВходящегоДокумента)
        Тогда
        
        // разбить номер вх. на номер и серию бланка
        ДлинаНомера = СтрДлина(Документ.НомерВходящегоДокумента);
        лСерия = "";
        лНомер = "";
        лЦифра = Ложь;
        Для к = 1 По ДлинаНомера Цикл
            цСимвол = Сред(Документ.НомерВходящегоДокумента, к, 1);
            цКодСимвола = КодСимвола(цСимвол);
            лТекЦифра = ( цКодСимвола >= 48 И цКодСимвола <= 57 );
            // если в реквизите и серия, и номер, и еще что-то
            Если СтрДлина(лСерия) И СтрДлина(лНомер) И лТекЦифра <> лЦифра Тогда
                Прервать;
            КонецЕсли;
            Если лТекЦифра Тогда
                лНомер = лНомер + цСимвол
            Иначе
                лСерия = лСерия + цСимвол
            КонецЕсли;
            лЦифра = лТекЦифра
        КонецЦикла;
        НоваяСтрока = Таблица.Добавить();
        НоваяСтрока.Серия  = лСерия;
        НоваяСтрока.Номер  = лНомер;
        Если Дата = Неопределено Тогда
            НоваяСтрока.Дата = Документ.ДатаВходящегоДокумента
        Иначе
            НоваяСтрока.Дата = Дата
        КонецЕсли;
        НоваяСтрока.КодТипаБланка = КодТипаБланка;
        Если БланкНакладная Тогда
            НоваяСтрока.ТипБСО = ТипБСО
        КонецЕсли
        
    КонецЕсли;

КонецПроцедуры // ДобавитьДокументПоставки()

// Добавляет строку грузоотправителя в таблицу
//
// Параметры:
//  Документ  - ДокументСсылка - документ для поиска реквизитов
//  Грузоотправители  - ТаблицаЗначений - таблица, соответстующая таблице грузоотправителей ЭСЧФ
//  Грузополучатели  - ТаблицаЗначений - таблица, соответстующая таблице грузополучателей ЭСЧФ
//  Исходящий  - Булево - признак исходящего документа
//
Процедура ДобавитьГрузоотправителяГрузополучателя(Документ, Грузоотправители, Грузополучатели, Исходящий = Истина) Экспорт

    // инициализация переменных
    МетаданныеДокумента  = Документ.Метаданные();
    ЕстьГрузоотправитель = ( МетаданныеДокумента.Реквизиты.Найти("Грузоотправитель") <> Неопределено );
    ЕстьГрузополучатель  = ( МетаданныеДокумента.Реквизиты.Найти("Грузополучатель") <> Неопределено );
    ЕстьПунктПогрузки    = ( МетаданныеДокумента.Реквизиты.Найти("ПунктПогрузки") <> Неопределено );
    ЕстьПунктРазгрузки   = ( МетаданныеДокумента.Реквизиты.Найти("ПунктРазгрузки") <> Неопределено );
    // добавим грузоотправителя
    Если Исходящий И ЕстьГрузоотправитель И ЗначениеЗаполнено(Документ.Грузоотправитель) Тогда
        Грузоотправитель = Документ.Грузоотправитель
    ИначеЕсли Исходящий Тогда
        Грузоотправитель = Документ.Организация;
    ИначеЕсли Не Исходящий И ЕстьГрузополучатель И ЗначениеЗаполнено(Документ.Грузополучатель) Тогда
        Грузоотправитель = Документ.Грузополучатель
    ИначеЕсли Не Исходящий Тогда
        Грузоотправитель = Документ.Контрагент
    Иначе
        // не верный тип документы
        Возврат
    КонецЕсли;
    // заполним адрес
    Если Исходящий И ЕстьПунктПогрузки И ЗначениеЗаполнено(Документ.ПунктПогрузки) Тогда
        АдресОтправки = Документ.ПунктПогрузки
    ИначеЕсли Не Исходящий И ЕстьПунктРазгрузки И ЗначениеЗаполнено(Документ.ПунктРазгрузки) Тогда
        АдресОтправки = Документ.ПунктРазгрузки;
    Иначе
        // просто не заполняем таблицу грузоотправителей
        //АдресОтправки = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Грузоотправитель, "Юридический");
        Перейти ~Грузополучатели;
    КонецЕсли;
    // заполним остальные реквизиты
    Если Грузоотправитель.СтранаРегистрации.Пустая() Тогда
        оКодСтраны = "112"
    Иначе
        оКодСтраны = Грузоотправитель.СтранаРегистрации.Код
    КонецЕсли;
    НоваяСтрока = Грузоотправители.Добавить();
    НоваяСтрока.КодСтраны = оКодСтраны;
    НоваяСтрока.УНП = Грузоотправитель.ИНН;
    НоваяСтрока.Наименование = Грузоотправитель.НаименованиеПолное;
    НоваяСтрока.АдресОтправки = АдресОтправки;
    
    ~Грузополучатели:
    // добавим грузополучателя
    Если Не Исходящий И ЕстьГрузоотправитель И ЗначениеЗаполнено(Документ.Грузоотправитель) Тогда
        Грузополучатель = Документ.Грузоотправитель
    ИначеЕсли Не Исходящий Тогда
        Грузополучатель = Документ.Организация;
    ИначеЕсли Исходящий И ЕстьГрузополучатель И ЗначениеЗаполнено(Документ.Грузополучатель) Тогда
        Грузополучатель = Документ.Грузополучатель
    ИначеЕсли Исходящий Тогда
        Грузополучатель = Документ.Контрагент
    Иначе
        // не верный тип документы
        Возврат
    КонецЕсли;
    // заполним адрес
    Если Не Исходящий И ЕстьПунктПогрузки И ЗначениеЗаполнено(Документ.ПунктПогрузки) Тогда
        АдресДоставки = Документ.ПунктПогрузки
    ИначеЕсли Исходящий И ЕстьПунктРазгрузки И ЗначениеЗаполнено(Документ.ПунктРазгрузки) Тогда
        АдресДоставки = Документ.ПунктРазгрузки
    Иначе
        // просто не заполняем таблицу грузоотправителей
        //АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьАдресИзКонтактнойИнформации(Грузополучатель, "Юридический");
        Возврат
    КонецЕсли;
    // заполним остальные реквизиты
    Если Грузополучатель.СтранаРегистрации.Пустая() Тогда
        пКодСтраны = "112"
    Иначе
        пКодСтраны = Грузополучатель.СтранаРегистрации.Код
    КонецЕсли;
    НоваяСтрока = Грузополучатели.Добавить();
    НоваяСтрока.КодСтраны = пКодСтраны;
    НоваяСтрока.УНП = Грузополучатель.ИНН;
    НоваяСтрока.Наименование = Грузополучатель.НаименованиеПолное;
    НоваяСтрока.АдресДоставки = АдресДоставки;

КонецПроцедуры // ДобавитьГрузоотправителяГрузополучателя

////////////////////////////////////////////////////////////////////////////////
//
// Функция СделкаСТоварамиПоПеречнюУказа287
//
// Описание:
//  проверяет таблуцу товаров на предмент вхождения в перечень указа №287
//
// Параметры (название, тип, дифференцированное значение)
//  Товары - ТаблицаЗначений - таблица товаров для проверки
//
// Возвращаемое значение: 
//
Функция СделкаСТоварамиПоПеречнюУказа287(Товары) Экспорт

    Для каждого цСтрока Из Товары Цикл
        Если ВходитВПеречень287(цСтрока.КодТНВЭДЕАЭС.Код) Тогда
            Возврат Истина;
        КонецЕсли;
    КонецЦикла;
    // значит, нету таких товаров
    Возврат Ложь

КонецФункции //СделкаСТоварамиПоПеречнюУказа287

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ОтразитьВыставлениеДокумента
//
// Описание:
//  отражает запись в ИБ о выставлении ЭСЧФ
//
// Параметры (название, тип, дифференцированное значение)
//  Документ - ДокументСсылка - ссылка на выставленный документ
//  Дата - Дата - дата выставления
//  Номер - Строка(25) - номер ЭСЧФ
//  Год - Число(4) - год из номера
//  УНП - Строка(9) - УНП
//  Номер - Число(10) - номер ЭСЧФ с начала года
//  ЭлектронныйДокумент - СправочникСсылка.ДокументыОбмена - электронный документ, сохраненный при выставлении
//  Исходящий - Булево - это исходящий документ
//  Принят - Булево - принят ли документ при выставлении
//  ТекстОтвета - Строка(300) - текст ответа сервиса
//
Процедура ОтразитьВыставлениеДокумента(Документ, Дата, НомерЭСЧФ = Неопределено, Год = Неопределено, УНП = Неопределено, Номер = Неопределено
										, ЭлектронныйДокумент = Неопределено, Исходящий = Истина, Принят = Истина, ТекстОтвета = Неопределено) Экспорт

	Если Исходящий Тогда
		МенеджерВыставление = РегистрыСведений.ВыставленныеДокументы.СоздатьМенеджерЗаписи();
	Иначе
		МенеджерВыставление = РегистрыСведений.ВыставленныеДокументыВходящие.СоздатьМенеджерЗаписи()
	КонецЕсли;
	Если НомерЭСЧФ <> Неопределено Тогда
		РазложитьНомер(НомерЭСЧФ, МенеджерВыставление.Год, МенеджерВыставление.Объект, МенеджерВыставление.Номер)
	Иначе
		МенеджерВыставление.Год    = Год;
		МенеджерВыставление.Объект = УНП;
		МенеджерВыставление.Номер  = Номер;
	КонецЕсли;
	МенеджерВыставление.ДатаВыставления = Дата;
	МенеджерВыставление.Документ = Документ;
	МенеджерВыставление.ЭлектронныйДокумент = ЭлектронныйДокумент;
	МенеджерВыставление.Принят = Принят;
	МенеджерВыставление.Комментарий = ТекстОтвета;
	МенеджерВыставление.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	МенеджерВыставление.Записать(Истина);

КонецПроцедуры //ОтразитьВыставлениеДокумента

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьДатуВыставленияПоНомеру
//
// Описание:
//  возвращает дату выставления ЭСЧФ или пустую дату, в случае отсутствия информации
//
//
// Параметры (название, тип, дифференцированное значение)
//  Номер - Строка(25) - номер ЭСЧФ
//  Исходящий - Булево - признак исходящего документа
//  Принят - Булево - будет записан статус документа (принят или нет)
//
// Возвращаемое значение: Дата - дата выставления ЭСЧФ
//
Функция ПолучитьДатуВыставленияПоНомеру(Номер, Исходящий = Истина, Принят = Неопределено) Экспорт

    Отбор = Новый Структура("Год, Объект, Номер");
    РазложитьНомер(Номер, Отбор.Год, Отбор.Объект, Отбор.Номер);
	
	Если Исходящий Тогда
        Запись = РегистрыСведений.ВыставленныеДокументы.Получить(Отбор);
    Иначе
        Запись = РегистрыСведений.ВыставленныеДокументыВходящие.Получить(Отбор);
	КонецЕсли;
	
	Принят = Запись.Принят;
	
    Возврат Запись.ДатаВыставления

КонецФункции //ПолучитьДатуВыставленияПоНомеру

////////////////////////////////////////////////////////////////////////////////
//
// Функция СтатусыПерегрузитьКвитанцию
//
// Описание:
//  возвращает массив статусов документов, которые являются ошибками, и требуется
//  повторно опросить сервер
//
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Массив - массив элементов типа ПеречислениеСсылка.СтатусыЭСЧФ
//
Функция СтатусыПерегрузитьКвитанцию() Экспорт

    Массив = Новый Массив;
    Массив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Ошибка"));
    Массив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НеНайден"));
    Массив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработке"));
    Массив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработкеОшибка"));
    Массив.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании"));
    Возврат Массив

КонецФункции //СтатусыПерегрузитьКвитанцию

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыгрузитьДокументВФайлДиалог
//
// Описание:
//  выгружает электронный счет-фактуру в файл
//
// Параметры (название, тип, дифференцированное значение)
//  Документ - ДокументСсылка.ЭлектронныйСчетФактураВыданный, ДокументСсылка.ЭлектронныйСчетФактураПолученный, Структура
//           - документ для выгрузки
//  ПолноеИмяФайла - Строка - полное имя выгруженного файла
//                            П.С. если требуется непосредственно выгрузить в этот файл, то передать полное имя,
//                            если требуется получить имя файла - пустую строку
//  Отказ  - Булево - признак ошибки при обработке
//  ОтправительУНП  - Строка(9) - УНП составителя счета-фактуры
//  Товары  - Коллекция - таблица по товарам
//  Грузоотправители  - Коллекция, Неопределено - таблица грузоотправителей
//  Грузополучатели  - Коллекция, Неопределено - таблица грузополучателей
//  Документы  - Коллекция, Неопределено - таблица документов, подтверждающих поставку
//  ЭтоИсходящийДокумент  - Булево - признак исходящего документа
//
Процедура ВыгрузитьДокументВФайлДиалог(Документ, ПолноеИмяФайла = Неопределено, Отказ = Ложь, ОтправительУНП, Товары
                                       , Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент) Экспорт

    ТребуетсяВыборФайла = ( Не ЗначениеЗаполнено(ПолноеИмяФайла) );
    ВыбранФайл = ( Не ТребуетсяВыборФайла );
    
    #Если Клиент Тогда
    Если ТребуетсяВыборФайла Тогда
        
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
        Диалог.Расширение = ".xml";
        Диалог.Фильтр = "XML-файл (*.xml)|*.xml";
        Диалог.ПолноеИмяФайла = Документ.НомерЭСЧФ;
        Диалог.Заголовок = "Выгрузка счета во внешний файл";
        Диалог.ПредварительныйПросмотр = Ложь;
        Диалог.МножественныйВыбор = Ложь;
        Диалог.ПроверятьСуществованиеФайла = Истина;
        
        ВыбранФайл = Диалог.Выбрать();
        
    КонецЕсли;
    #КонецЕсли
    
    Если Не ТребуетсяВыборФайла Или ВыбранФайл Тогда
        
        ТекстОшибки = "";
        
        ФабрикаЭСЧФ = ПолучитьФабрикуXDTO(Документ.ТипЭСЧФ);
        ЭлектронныйДокумент = ПолучитьОбъектДокументаXDTO(ФабрикаЭСЧФ);
        ЗаполнитьДаннымиОбъектXDTO(Документ, ЭлектронныйДокумент, ФабрикаЭСЧФ, ОтправительУНП, Товары, Грузоотправители, Грузополучатели, Документы, ЭтоИсходящийДокумент);
        
        #Если Клиент Тогда
        Если ТребуетсяВыборФайла Тогда
            ПолноеИмяФайла = Диалог.ПолноеИмяФайла
        КонецЕсли;
        #КонецЕсли
        
        ОбъектЗаписи = ПолучитьОбъектЗаписиВФайлXML(Отказ, ТекстОшибки, ПолноеИмяФайла);
        
        Если Отказ Или Не ЗаписатьДанныеВФайлXML(ЭлектронныйДокумент, ОбъектЗаписи, ФабрикаЭСЧФ, ТекстОшибки) Тогда
            //ОбъектЗаписи.Закрыть();
            #Если Клиент Тогда
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = ТекстОшибки;
            Сообщение.Сообщить();
            #КонецЕсли
            Возврат
        КонецЕсли;
        
        #Если Клиент Тогда
        Если ТребуетсяВыборФайла Тогда
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = "Документ сохранён в файл: " + ПолноеИмяФайла;
            Сообщение.Сообщить();
        КонецЕсли
        #КонецЕсли
        
    Иначе
        
        #Если Клиент Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Файл не выбран";
        Сообщение.Сообщить();
        #КонецЕсли
        Отказ = Истина;
        
    КонецЕсли;

КонецПроцедуры //ВыгрузитьДокументВФайлДиалог

////////////////////////////////////////////////////////////////////////////////
//
// Функция УниверсальноеВремяСтр
//
// Описание:
//  возвращает строку UTC
//
//
// Параметры (название, тип, дифференцированное значение)
//  Дата - Дата (ЧастиДаты.ДатаВремя) - дата для получения времени
//  ЧасовойПояс - Строка - идентификатор часового пояса
//
// Возвращаемое значение:
//  Строка - представление даты в виде универсального времени
//
Функция УниверсальноеВремяСтр(Дата, ЧасовойПояс = "Europe/Minsk") Экспорт
	Возврат Формат(Дата, "ДФ=yyyy-MM-dd" + Символ(84) + "hh:mm:ss") + ?( ЧасовойПояс = "Europe/Minsk", "" , ЧасовойПояс )
КонецФункции //УниверсальноеВремяСтр

////////////////////////////////////////////////////////////////////////////////
//
// Функция ПолучитьНомераВходящихДокументов
//
// Описание:
//  возвращает номера входящих документов начиная с даты
//
//
// Параметры (название, тип, дифференцированное значение)
//  ДатаНачала - Дата - дата/время с которого нужно получить документы
//  ДатаОкончания - Дата - будет записана дата окончания из ответа веб-сервиса
//
// Возвращаемое значение:
//  Массив - массив номеров ЭСЧФ
//  Неопределено - в случае неудачи
//  Ошибки - массив ошибок (или строка)
//
Функция ПолучитьНомераВходящихДокументов(ДатаНачала, ДатаОкончания = Неопределено, Ошибки = Неопределено) Экспорт

    #Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
    EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
    Если EInvVatService = Неопределено Тогда
        Возврат Неопределено
    КонецЕсли;
    #КонецЕсли
    InvList = EInvVatService.GetList(УниверсальноеВремяСтр(ДатаНачала));
    Если InvList = Неопределено Тогда
		//#Если Клиент Тогда
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "Ошибка получения списка ЭСЧФ: " + EInvVatService.LastError;
		//Сообщение.Сообщить();
		//#КонецЕсли
		Если Ошибки <> Неопределено Тогда
			ОтразитьОшибку(Ошибки, "Ошибка получения списка ЭСЧФ: " + EInvVatService.LastError);
		КонецЕсли;
        ДатаОкончания = Неопределено;
        Возврат Неопределено
    Иначе
        #Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
        ДатаОкончания = ЭСЧФсервер.ПолучитьВремяИзUtc(InvList.ToDate);
		#Иначе
	    ДатаСтр = InvList.ToDate;
	    Дата = Лев(ДатаСтр, 10);
	    Год = Число(Лев(Дата, 4));
	    Месяц = Число(Сред(Дата, 6, 2));
	    День = Число(Прав(Дата, 2));
	    Время = Сред(ДатаСтр, 12, 8);
	    Часы = Число(Лев(Время, 2));
	    Минуты = Число(Сред(Время, 4, 2));
	    Секунды = Число(Прав(Время, 2));
	    ЧасовойПояс = Прав(ДатаСтр, СтрДлина(ДатаСтр) - 19);
	    Если Лев(ЧасовойПояс, 1) = "+" Тогда
	        ЧасыСм = Число(Сред(ЧасовойПояс, 2, 2));
	        МинутыСм = Число(Прав(ЧасовойПояс, 2));
	    Иначе
	        ЧасыСм = 0;
	        МинутыСм = 0;
		КонецЕсли;
		Если ПустаяСтрока(ЧасовойПояс) Тогда
			ДатаОкончания = Дата(Год, Месяц, День, Часы, Минуты, Секунды)
		Иначе
	    	ДатаОкончания = УниверсальноеВремя(Дата(Год, Месяц, День, Часы, Минуты, Секунды) + ( ЧасыСм * 60 + МинутыСм ) * 60)
		КонецЕсли;
		//Сообщение = Новый СообщениеПользователю;
		//Сообщение.Текст = "Документы до: " + ДатаОкончания + Символы.ПС + "Количество: " + InvList.Count;
		//Сообщение.Сообщить();
        #КонецЕсли
    КонецЕсли;
    
    Массив = Новый Массив;
    КоличествоДокументов = InvList.Count;
	
	Пока КоличествоДокументов > 0 Цикл
		КоличествоДокументов = КоличествоДокументов - 1;
        Массив.Добавить(InvList.GetItemAttribute(КоличествоДокументов, "document/number"))
    КонецЦикла;
    
    Возврат Массив

КонецФункции //ПолучитьНомераВходящихДокументов

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ЗагрузитьЭлектронныеДокументы
//
// Описание:
//	производит загрузку документов с портала в базу
//
//
// Параметры (название, тип, дифференцированное значение)
//	Номера - ТаблицаЗначений - описание колонок и получение таблицы с ЭСЧФсервер.ТаблицаДанныхЗагрузкиДокументовСПортала() (или в ЭСЧФклиентПовтИсп)
//	Организация - СправочникСсылка.Организации - организация для отражения документов
//	ПерезаписыватьИмеющиеся - Булево - если документ найден по идентификатору, и указан этот флаг,
//							то документ будет перезаписан
//	ОбменТовары - Булево - загружать ли в документ таблицу товаров
//	ОбменГрузоотправителиГрузополучатели - Булево - загружать ли в документ грузоотправителей и грузополучателей
//	ОбменДокументыПоставки - Булево - загружать ли в документ документы подтверждения;
//						   в противном случае будет загружен первый документ в реквизиты
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе:
//                     0 - не нужно
//                     > 0 - сохранить
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Ошибки - Массив, Строка - информация об ошибка при работе
//
Процедура ЗагрузитьЭлектронныеДокументы(Номера, Организация, ПерезаписыватьИмеющиеся = Ложь, ОбменТовары = Ложь, ОбменГрузоотправителиГрузополучатели = Ложь
										, ОбменДокументыПоставки = Ложь, СохранитьДокумент = Неопределено, РасположениеФайлов = Неопределено, Ошибки = Неопределено) Экспорт

	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
		Если EInvVatService = Неопределено Тогда
			Возврат
		КонецЕсли;
	#КонецЕсли
	
	Если СохранитьДокумент = Неопределено Тогда
		СохранитьДокумент = ПараметрыСеанса.СохранениеДокументов
	КонецЕсли;
	
	Если РасположениеФайлов = Неопределено Тогда
		РасположениеФайлов = ПараметрыСеанса.РасположениеВходящихФайлов
	КонецЕсли;
	
	ДатаОтражения = ТекущаяДатаСеанса();
	
	Для каждого Номер Из Номера Цикл
		
		// получаем документ с портала
		Документ = EInvVatService.GetEDoc(Номер.Номер);
		// можем не получить результата
		Если Документ = Неопределено Тогда
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Ошибка получения документа по номеру """ + Номер.Номер + """ по причине: " + EInvVatService.LastError);
			КонецЕсли;
			Продолжить
		КонецЕсли;
		// Загрузка документа в справочник
		// ищем документ по идентификатору
		Идентификатор = Документ.GetXmlNodeAttribute("e-document/document/id");
		//Ссылка = Справочники.ДокументыОбмена.НайтиПоНаименованию(Идентификатор);
		
		ЗапросДокументОбмена = Новый Запрос("ВЫБРАТЬ
		|	ДокументыОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыОбмена КАК ДокументыОбмена
		|ГДЕ
		|	ДокументыОбмена.Код = &Номер
		|	И ДокументыОбмена.Статус = &Статус
		|	И ДокументыОбмена.РасположениеФайла <> 0");
		
		ЗапросДокументОбмена.УстановитьПараметр("Номер",  Номер.Номер);
		ЗапросДокументОбмена.УстановитьПараметр("Статус", ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ПустаяСсылка"));
		
		РезультатЗапросаДокументОбмена = ЗапросДокументОбмена.Выполнить();
		
		Если РезультатЗапросаДокументОбмена.Пустой() Тогда
			Ссылка = ПредопределенноеЗначение("Справочник.ДокументыОбмена.ПустаяСсылка");
		Иначе
			ВыборкаРезультатаЗапросаДокументОбмена = РезультатЗапросаДокументОбмена.Выбрать();
			ВыборкаРезультатаЗапросаДокументОбмена.Следующий();
			Ссылка = ВыборкаРезультатаЗапросаДокументОбмена.Ссылка;
		КонецЕсли;
		
		// пропускаем, если не нужно перегрузить принудительно
		Если Не Ссылка.Пустая() И Не ПерезаписыватьИмеющиеся Тогда
			Номер.ДокументОбмена = Ссылка;
			Перейти ~ЗагрузкаДокумента;
		// иначе перезаписываем элемент
		ИначеЕсли Не Ссылка.Пустая() И СохранитьДокумент Тогда
			Объект = Ссылка.ПолучитьОбъект();
		// иначе записываем новый элемент
		ИначеЕсли СохранитьДокумент Тогда
			Объект = Справочники.ДокументыОбмена.СоздатьЭлемент();
		Иначе
			// если не нужно сохранять входящий документ, то переходим к проведению
			Перейти ~ЗагрузкаДокумента;
		КонецЕсли;
		
		Объект.Код = Номер.Номер;
		Объект.Наименование = Идентификатор;
		Объект.ДатаСостояния = ТекущаяДата();
		Объект.contentType = Документ.GetXmlNodeAttribute("e-document/document/contentType");
		Объект.contentEncoding = Документ.GetXmlNodeAttribute("e-document/document/contentEncoding");
		Объект.РасположениеФайла = РасположениеФайлов;
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 9:48:39
		//КоличествоПодписей = Документ.GetSignCount;
		//Объект.КоличествоПодписей = КоличествоПодписей;
		//КоличествоВерныхПодписей = 0;
		//ТекстОшибкиПроверкиПодписей = "";
		//}Макей Евгений Владимирович 02.11.2016 9:48:39
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 9:47:22
		//Для й=0 По КоличествоПодписей-1 Цикл
		//	ПодписьВерна = ( Документ.VerifySign(й, 0) = 0 );
		//	Если ПодписьВерна Тогда
		//		КоличествоВерныхПодписей = КоличествоВерныхПодписей + 1
		//	Иначе
		//		УНП = Документ.GetSignProperty(й, "1.3.6.1.4.1.12656.106.104", 0);
		//		Наименование = Документ.GetSignProperty(й, "2.5.4.3", 0);
		//		Фамилия = Документ.GetSignProperty(й, "2.5.4.4", 0);
		//		ИмяОтчество = Документ.GetSignProperty(й, "2.5.4.41", 0);
		//		ДатаПодписания = Документ.GetSignProperty(й, "SIGNDATE", 0);
		//		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + "№" + (й+1) + " от " + ДатаПодписания
		//										+ Символы.ПС + Наименование + Символы.ПС + УНП + Символы.ПС + Фамилия + " " + ИмяОтчество
		//										+ Символы.ПС + EInvVatService.LastError + Символы.ПС;
		//	КонецЕсли;
		//КонецЦикла;
		//}Макей Евгений Владимирович 02.11.2016 9:47:22
		//{[+](фрагмент добавлен), Макей Евгений Владимирович 02.11.2016 9:47:27
		ПолучитьИнформациюОПодписяхДокумента(Документ, Объект.КоличествоПодписей, Объект.КоличествоВерныхПодписей, Объект.ТекстОшибкиПроверкиПодписей);
		//}Макей Евгений Владимирович 02.11.2016 9:47:27
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 9:48:29
		//Объект.ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей;
		//Объект.КоличествоВерныхПодписей = КоличествоВерныхПодписей;
		//}Макей Евгений Владимирович 02.11.2016 9:48:29
		
		Если РасположениеФайлов = 2 Тогда
			ИмяФайла = Номер.Номер + ".in.xml";//".in." + Идентификатор + ".xml";
			ИмяВременногоФайла = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + ИмяФайла;
		Иначе
			ИмяФайла = "";
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		КонецЕсли;
		Рез = Документ.SaveToFile(ИмяВременногоФайла);
		
		Если Рез = 0 И РасположениеФайлов = 1 Тогда
			Объект.ХранилищеЗначения = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла));
		ИначеЕсли Рез = 0 И РасположениеФайлов = 2 Тогда
			// не удалось сохранить файл на диске
			Объект.ИмяФайлаДокумента = ИмяФайла;
		ИначеЕсли Рез <> 0 Тогда
			Объект.РасположениеФайла = 0;
			Объект.ИмяФайлаДокумента = ИмяФайла;
		КонецЕсли;
		
		Попытка
			Объект.Записать();
			Ссылка = Объект.Ссылка;
			Номер.ДокументОбмена = Объект.Ссылка;
		Исключение
			//#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
			//ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение, Объект.Метаданные(), Ссылка, ОписаниеОшибки());
			//#Иначе
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОписаниеОшибки();
			//Сообщение.Сообщить();
			//#КонецЕсли
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
		
		~ЗагрузкаДокумента:
		// Загрузка документа в базу
		ДокументСылка = Документы.ЭлектронныйСчетФактураПолученный.НайтиПоНомеру(Номер.Номер);
		// пропускаем, если не нужно перегрузить принудительно
		Если Не ДокументСылка.Пустая() И Не ПерезаписыватьИмеющиеся Тогда
			Номер.ВходящийДокумент = ДокументСылка;
			Продолжить;
		// иначе перезаписываем элемент
		ИначеЕсли Не ДокументСылка.Пустая() Тогда
			ДокументОбъект = ДокументСылка.ПолучитьОбъект()
		// иначе записываем новый элемент
		Иначе
			ДокументОбъект = Документы.ЭлектронныйСчетФактураПолученный.СоздатьДокумент()
		КонецЕсли;
			
		// заполняем реквизиты из эл. документа
		ДокументОбъект.Номер = Номер.Номер;
		ДокументОбъект.ОтправительУНП = Документ.Document.GetXmlNodeAttribute("issuance/sender");
		ДокументОбъект.ДатаВыставленияЭСЧФ = кДата(Документ.Document.GetXmlNodeValue("issuance/general/dateIssuance"));
		ДокументОбъект.ДатаСовершенияОперацииЭСЧФ = кДата(Документ.Document.GetXmlNodeValue("issuance/general/dateTransaction"));
		ДокументОбъект.Дата = ДатаОтражения;//ДокументОбъект.ДатаСовершенияОперацииЭСЧФ;
		
		// приведём тип ко внутреннему представлению
		ЭтоДополнительныйЭСЧФ = Ложь;
		ТипЭСЧФстр = Документ.Document.GetXmlNodeValue("issuance/general/documentType");
		Если ТипЭСЧФстр = "ORIGINAL" Тогда
			ДокументОбъект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный")
		ИначеЕсли ТипЭСЧФстр = "ADDITIONAL" Тогда
			ЭтоДополнительныйЭСЧФ = Истина;
			ДокументОбъект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный")
		ИначеЕсли ТипЭСЧФстр = "FIXED" Тогда
			ДокументОбъект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный")
		ИначеЕсли ТипЭСЧФстр = "ADD_NO_REFERENCE" Тогда
			ДокументОбъект.ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.ДополнительныйБезСсылки")
		КонецЕсли;
		
		ДокументОбъект.КЭСЧФ = Документ.Document.GetXmlNodeValue("issuance/general/invoice");
		Если Не ЭтоДополнительныйЭСЧФ Тогда
			ДокументОбъект.ДатаАннулированияЭСЧФ = Документ.Document.GetXmlNodeValue("issuance/general/dateCancelled");
		КонецЕсли;
		
		// реквизиты поставкщика
		Если Не ЭтоДополнительныйЭСЧФ Тогда
			// приведём тип ко внутреннему представлению
			ПоставщикСтатус = Документ.Document.GetXmlNodeValue("issuance/provider/providerStatus");
			Если ПустаяСтрока(ПоставщикСтатус) Или ПоставщикСтатус = "SELLER" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Продавец")
			ИначеЕсли ПоставщикСтатус = "CONSIGNOR" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Комитент")
			ИначеЕсли ПоставщикСтатус = "COMMISSIONAIRE" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Комиссионер")
			ИначеЕсли ПоставщикСтатус = "TAX_DEDUCTION_PAYER" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийНалоговыеВычеты")
			ИначеЕсли ПоставщикСтатус = "TRUSTEE" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ДоверительныйУправляющий")
			ИначеЕсли ПоставщикСтатус = "FOREIGN_ORGANIZATION" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ИностраннаяОрганизация")
			ИначеЕсли ПоставщикСтатус = "AGENT" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Посредник")
			ИначеЕсли ПоставщикСтатус = "DEVELOPER" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Заказчик")
			ИначеЕсли ПоставщикСтатус = "TURNOVERS_ON_SALE_PAYER" Тогда
				ДокументОбъект.ПоставщикСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.ПлательщикПередающийОборотыПоРеализации")
			КонецЕсли;
			ДокументОбъект.ПоставщикВзаимозависимоеЛицо = кБулево(Документ.Document.GetXmlNodeValue("issuance/provider/dependentPerson"));
			ДокументОбъект.ПоставщикРезидентОффшорнойЗоны = кБулево(Документ.Document.GetXmlNodeValue("issuance/provider/residentsOfOffshore"));
			ДокументОбъект.ПоставщикСделкаСТоварамиПоПеречню = кБулево(Документ.Document.GetXmlNodeValue("issuance/provider/specialDealGoods"));
			ДокументОбъект.ПоставщикВходитВПереченьКрупныхПлательщиков = кБулево(Документ.Document.GetXmlNodeValue("issuance/provider/bigCompany"));
			ДокументОбъект.ПоставщикКодСтраны = Документ.Document.GetXmlNodeValue("issuance/provider/countryCode");
			ДокументОбъект.ПоставщикУНП = Документ.Document.GetXmlNodeValue("issuance/provider/unp");
			ДокументОбъект.Поставщик = Документ.Document.GetXmlNodeValue("issuance/provider/name");
			ДокументОбъект.ПоставщикЮридическийАдрес = Документ.Document.GetXmlNodeValue("issuance/provider/address");
			ДокументОбъект.ПоставщикКодФилиала = Документ.Document.GetXmlNodeValue("issuance/provider/branchCode");
			ДокументОбъект.ПоставщикНомерСчетаКомитента = Документ.Document.GetXmlNodeValue("issuance/provider/principal/number");
			ДокументОбъект.ПоставщикДатаВыпискиКомитента = кДата(Документ.Document.GetXmlNodeValue("issuance/provider/principal/date"));
			ДокументОбъект.ПоставщикНомерСчетаПродавца = Документ.Document.GetXmlNodeValue("issuance/provider/vendor/number");
			ДокументОбъект.ПоставщикДатаВыпискиПродавца = кДата(Документ.Document.GetXmlNodeValue("issuance/provider/vendor/date"));
			ДокументОбъект.ПоставщикРегистрационныйНомерВыпускаТоваров = Документ.Document.GetXmlNodeValue("issuance/provider/declaration");
			ДокументОбъект.ПоставщикДатаВыпускаТовара = кДата(Документ.Document.GetXmlNodeValue("issuance/provider/dateRelease"));
			ДокументОбъект.ПоставщикДатаВыдачиРазрешенияНаУбытие = кДата(Документ.Document.GetXmlNodeValue("issuance/provider/dateActualExport"));
			ДокументОбъект.ПоставщикНомерЗаявленияОВвозеТоваров = Документ.Document.GetXmlNodeValue("issuance/provider/taxes/number");
			ДокументОбъект.ПоставщикДатаЗаявленияОВвозеТоваров = кДата(Документ.Document.GetXmlNodeValue("issuance/provider/taxes/date"));
			// реквизиты получателя
			ПолучательСтатус = Документ.Document.GetXmlNodeValue("issuance/recipient/recipientStatus");
			Если ПустаяСтрока(ПолучательСтатус) Или ПолучательСтатус = "CUSTOMER" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Покупатель")
			ИначеЕсли ПолучательСтатус = "CONSUMER" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Потребитель")
			ИначеЕсли ПолучательСтатус = "CONSIGNOR" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Комитент")
			ИначеЕсли ПолучательСтатус = "COMMISSIONAIRE" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Комиссионер")
			ИначеЕсли ПолучательСтатус = "TAX_DEDUCTION_RECIPIENT" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.ПокупательПолучающийНалоговыеВычеты")
			ИначеЕсли ПолучательСтатус = "FOREIGN_ORGANIZATION_BUYER" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.ПокупательОбъектовУИностраннойОрганизации")
			ИначеЕсли ПолучательСтатус = "TURNOVERS_ON_SALE_RECIPIENT" Тогда
				ДокументОбъект.ПолучательСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.ПлательщикПолучающийОборотыПоРеализации")
			КонецЕсли;
			ДокументОбъект.ПолучательВзаимозависимоеЛицо = кБулево(Документ.Document.GetXmlNodeValue("issuance/recipient/dependentPerson"));
			ДокументОбъект.ПолучательРезидентОффшорнойЗоны = кБулево(Документ.Document.GetXmlNodeValue("issuance/recipient/residentsOfOffshore"));
			ДокументОбъект.ПолучательСделкаСТоварамиПоПеречню = кБулево(Документ.Document.GetXmlNodeValue("issuance/recipient/specialDealGoods"));
			ДокументОбъект.ПолучательВходитВПереченьКрупныхПлательщиков = кБулево(Документ.Document.GetXmlNodeValue("issuance/recipient/bigCompany"));
			ДокументОбъект.ПолучательКодСтраны = Документ.Document.GetXmlNodeValue("issuance/recipient/countryCode");
			ДокументОбъект.ПолучательУНП = Документ.Document.GetXmlNodeValue("issuance/recipient/unp");
			ДокументОбъект.Получатель = Документ.Document.GetXmlNodeValue("issuance/recipient/name");
			ДокументОбъект.ПолучательЮридическийАдрес = Документ.Document.GetXmlNodeValue("issuance/recipient/address");
			ДокументОбъект.ПолучательКодФилиала = Документ.Document.GetXmlNodeValue("issuance/recipient/branchCode");
			ДокументОбъект.ПолучательНомерДекларацииНаТовары = Документ.Document.GetXmlNodeValue("issuance/recipient/declaration");
			ДокументОбъект.ПолучательНомерЗаявленияОВвозеТоваров = Документ.Document.GetXmlNodeValue("issuance/recipient/taxes/number");
			ДокументОбъект.ПолучательДатаЗаявленияОВвозеТоваров = кДата(Документ.Document.GetXmlNodeValue("issuance/recipient/taxes/date"));
			ДокументОбъект.ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров = кДата(Документ.Document.GetXmlNodeValue("issuance/recipient/dateImport"));
			
			ДокументОбъект.ДоговорНомер = Документ.Document.GetXmlNodeValue("issuance/deliveryCondition/contract/number");
			ДокументОбъект.ДоговорДата = кДата(Документ.Document.GetXmlNodeValue("issuance/deliveryCondition/contract/date"));
			ДокументОбъект.ДополнительныеСведения = Документ.Document.GetXmlNodeValue("issuance/deliveryCondition/contract/description");
		КонецЕсли;
		
		ДокументОбъект.ИтогоСтоимостьСНДС = Число(Документ.Document.GetXmlNodeAttribute("issuance/roster/totalCostVat"));
		ДокументОбъект.ИтогоСуммаАкциза = Число(Документ.Document.GetXmlNodeAttribute("issuance/roster/totalExcise"));
		ДокументОбъект.ИтогоСуммаНДС = Число(Документ.Document.GetXmlNodeAttribute("issuance/roster/totalVat"));
		ДокументОбъект.ИтогоСтоимость = Число(Документ.Document.GetXmlNodeAttribute("issuance/roster/totalCost"));
		
		Если Не ЭтоДополнительныйЭСЧФ Тогда
			ДокументОбъект.НакладнаяНомер = Документ.Document.GetXmlNodeValue("issuance/deliveryCondition/contract/documents/document/number");
			ДокументОбъект.НакладнаяДата = кДата(Документ.Document.GetXmlNodeValue("issuance/deliveryCondition/contract/documents/document/date"));
			ДокументОбъект.НакладнаяСерия = Документ.Document.GetXmlNodeValue("issuance/deliveryCondition/contract/documents/document/seria");
		КонецЕсли;
		
		ДокументОбъект.ОбменТовары = ОбменТовары;
		ДокументОбъект.ОбменГрузоотправителиГрузополучатели = ОбменГрузоотправителиГрузополучатели;
		ДокументОбъект.ОбменДокументыПоставки = ОбменДокументыПоставки;
		
		ДокументОбъект.ЭлектронныйДокумент = Ссылка;
		ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЭСЧФ.Покупка");
		ДокументОбъект.Организация = Организация;
				
		ЗапросКонтрагент = Новый Запрос;
		ЗапросКонтрагент.УстановитьПараметр("ИНН", СокрЛП(ДокументОбъект.ОтправительУНП));//ПоставщикУНП));
		ЗапросКонтрагент.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН";
		ВыборкаКонтрагент = ЗапросКонтрагент.Выполнить().Выбрать();
		Если ВыборкаКонтрагент.Следующий() Тогда
			ДокументОбъект.Контрагент = ВыборкаКонтрагент.Ссылка
		КонецЕсли;
		
		Если Не ДокументОбъект.Контрагент.Пустая() И Не ЭтоДополнительныйЭСЧФ Тогда// Тогда
			
			ЗапросДоговор = Новый Запрос;
			ЗапросДоговор.УстановитьПараметр("Владелец", ДокументОбъект.Контрагент);
			ЗапросДоговор.УстановитьПараметр("ДатаДоговора", ДокументОбъект.ДоговорДата);
			ЗапросДоговор.УстановитьПараметр("Наименование", ДокументОбъект.ДоговорНомер);
			ЗапросДоговор.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Ссылка
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Владелец
			|	И ДоговорыКонтрагентов.ДатаДоговора = &ДатаДоговора
			|	И (ДоговорыКонтрагентов.НомерДоговора = &Наименование
			|			ИЛИ ДоговорыКонтрагентов.Наименование ПОДОБНО ""%"" + &Наименование + ""%"")";
			ВыборкаДоговор = ЗапросДоговор.Выполнить().Выбрать();
			Если ВыборкаДоговор.Следующий() Тогда
				ДокументОбъект.ДоговорКонтрагента = ВыборкаДоговор.Ссылка
			КонецЕсли;
			
		КонецЕсли;
		
		// адреса отправки/доставки
		Если Не ЭтоДополнительныйЭСЧФ Тогда
			ДокументОбъект.АдресДоставки = Документ.Document.GetXmlNodeValue("issuance/senderReceiver/consignees/consignee/address");
			ДокументОбъект.АдресОтправки = Документ.Document.GetXmlNodeValue("issuance/senderReceiver/consignors/consignor/address");
		КонецЕсли;
		
		ДокументОбъект.Ответственный = глЗначениеПеременной("глТекущийПользователь");
		
		//TODO нужно выгрузить в файл, т.к. достать данные из списка не получиться
		Если ОбменТовары Или ОбменГрузоотправителиГрузополучатели Или ОбменДокументыПоставки Тогда
			//// получаем ЧтнениеXML для доступа к реквизитам вх. документа
			//ЧтениеДокумента = Новый ЧтениеXML;
			//Попытка
			//	ИмяВременногоФайлаВнутреннегоДокумента = ПолучитьИмяВременногоФайла("xml");
			//	Документ.Document.SaveToFile(ИмяВременногоФайлаВнутреннегоДокумента);
			//	ЧтениеДокумента.ОткрытьФайл(ИмяВременногоФайлаВнутреннегоДокумента);
			//Исключение
			//	#Если Сервер Тогда
			//	ЗаписьЖурналаРегистрации("EInvVatService.FS", УровеньЖурналаРегистрации.Предупреждение,,, ОписаниеОшибки());
			//	#Иначе
			//	Сообщение = Новый СообщениеПользователю;
			//	Сообщение.Текст = ОписаниеОшибки();
			//	Сообщение.Сообщить();
			//	#КонецЕсли
			//	Если ВходящиеДокументы <> Неопределено Тогда
			//		ВходящиеДокументы.Добавить(Неопределено)
			//	КонецЕсли;
			//	Возврат
			//КонецПопытки;
		КонецЕсли;
		
		Если ДокументОбъект.ОбменТовары Тогда
			//	
		КонецЕсли;
		
		Если ДокументОбъект.ОбменГрузоотправителиГрузополучатели Тогда
			//	
		КонецЕсли;
		
		Если ДокументОбъект.ОбменДокументыПоставки Тогда
			//	
		КонецЕсли;
		
		Если Не ДокументОбъект.Контрагент.Пустая() Тогда
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Номер.ВходящийДокумент = ДокументОбъект.Ссылка;
				Продолжить;
			Исключение
				Если Не ДокументОбъект.Ссылка.Пустая() Тогда
					Номер.ВходящийДокумент = ДокументОбъект.Ссылка;
				КонецЕсли;
				//#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				//	ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение, ДокументОбъект.Метаданные(), ДокументОбъект.Ссылка, ОписаниеОшибки());
				//#Иначе
				//	Сообщение = Новый СообщениеПользователю;
				//	Сообщение.Текст = ОписаниеОшибки();
				//	Сообщение.Сообщить();
				//#КонецЕсли
				Если Ошибки <> Неопределено Тогда
					ОтразитьОшибку(Ошибки, ОписаниеОшибки());
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Номер.ВходящийДокумент = ДокументОбъект.Ссылка;
		Исключение
			//#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
			//ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение, ДокументОбъект.Метаданные(), ДокументОбъект.Ссылка, ОписаниеОшибки());
			//#Иначе
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ОписаниеОшибки();
			//Сообщение.Сообщить();
			//#КонецЕсли
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, ОписаниеОшибки());
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла

КонецПроцедуры //ЗагрузитьЭлектронныеДокументы

////////////////////////////////////////////////////////////////////////////////
//
// Функция кБулево
//
// Описание:
//	конструктор типа "Булево" по строке
//
//
// Параметры (название, тип, дифференцированное значение)
//	Значение - Строка - строка, которую необходимо привести к типу "Булево"
//
// Возвращаемое значение:
//
Функция кБулево(Значение)
	Возврат ВРЕГ(СокрЛП(Значение)) = "TRUE"
КонецФункции //кБулево

////////////////////////////////////////////////////////////////////////////////
//
// Функция кДата
//
// Описание:
//	конструктор типа "Дата" по строке
//
//
// Параметры (название, тип, дифференцированное значение)
//	Значение - Строка - строка, которую необходимо привести к типу "Дата"
//
// Возвращаемое значение:
//
Функция кДата(Значение)

	лЗначение = СокрЛП(Значение);
	СтрДлина = СтрДлина(лЗначение);
	
	Если СтрДлина = 10 Тогда
		Возврат Дата(Лев(лЗначение, 4), Сред(лЗначение, 6, 2), Прав(лЗначение, 2))
	ИначеЕсли СтрДлина > 10 Тогда
		Дата = Лев(лЗначение, 10);
		Год = Число(Лев(Дата, 4));
		Месяц = Число(Сред(Дата, 6, 2));
		День = Число(Прав(Дата, 2));
		Время = Сред(лЗначение, 12, 8);
		Часы = Число(Лев(Время, 2));
		Минуты = Число(Сред(Время, 4, 2));
		Секунды = Число(Прав(Время, 2));
		ЧасовойПояс = Прав(лЗначение, 5);
		Если СтрДлина > 19 Тогда
			Возврат УниверсальноеВремя(Дата(Год, Месяц, День, Часы, Минуты, Секунды), ЧасовойПояс);
		Иначе
			Возврат Дата(Год, Месяц, День, Часы, Минуты, Секунды);
		КонецЕсли;
	Иначе
		Возврат Дата(1, 1, 1)
	КонецЕсли;

КонецФункции //кДата

// Обновляет статус электронного счета-фактуры на портале по номеру
//
// Параметры:
//  Номер  - Строка(25) - номер электронного счета-фактуры
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе;
//                     0 - не нужно в любом случае
//                     1 - сохранить в случае получения статуса, отличного от: NOT_FOUND, ERROR
//                     2 - сохранить в любом случае
//  ДатаСостояния  - Дата - будет записана дата состояния
//  Статус  - ПеречислениеСсылка.СтатусыЭСЧФ - будет записан статус документа
//  ТекстОтвета  - Строка - строка с текстовой информацией ответа сервиса
//  ТекстОшибки  - Строка, Массив - переменная для записи ошибки в случае неудачи
//  ЭлектронныйДокумент  - СправочникСсылка.ДокументыОбмена - будет записана ссылка на сохраненный в базе документ обмена
//  ПерезаписыватьИмеющиеся  - Булево - следует ли перезависывать найденный в базе по ИД документ
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Исходящий - Булево - это квитанция исходящего документа
//
Функция ОбновитьДанныеОСтатусеДокумента(Номер, СохранитьДокумент = Неопределено, ДатаСостояния = Неопределено, Статус = Неопределено, ТекстОтвета = Неопределено
										, ТекстОшибки = Неопределено, ЭлектронныйДокумент = Неопределено, ПерезаписыватьИмеющиеся = Ложь, РасположениеФайлов = Неопределено, Исходящий = Истина) Экспорт

	Перем ДатаПодписания; // дата подписания имеет смысл только если сохраняем документ, т.к. квитанция генерируется каждый раз при обращении
	
	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
		Если EInvVatService = Неопределено Тогда
			Возврат Ложь
		КонецЕсли;
	#КонецЕсли
	
	Если ДатаСостояния = Неопределено Тогда
		ДатаСостояния = ТекущаяДатаСеанса()
	КонецЕсли;
	
	// попытка получения статуса документа
	EDocStatusInfo = EInvVatService.GetStatus(Номер);
	
	Если EDocStatusInfo = Неопределено Тогда
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = "Ошибка при получении статуса счета-фактуры № " + Номер + ": " + EInvVatService.LastError;
			ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
		КонецЕсли;
		Возврат Ложь
		// после обновления компоненты до 1.2.8 иногда получаю пустой EDocStatusInfo вместо Неопределено (лучше пропустить релиз)	
	ИначеЕсли ПустаяСтрока(EDocStatusInfo.Status) Или ПустаяСтрока(EDocStatusInfo.Since) Тогда
		// Комментарий фирмы 1С
		// Отличие в показе значений в Табло и в диалоге вычисления выражения в том, что при показе диалога платформа получает значения всех свойств и в том порядке, как они перечислены в ITypeInfo или в IDispatchEx.
		Попытка
			tmp = EDocStatusInfo.SaveToFile
		Исключение КонецПопытки;
		Попытка
			tmp = EDocStatusInfo.Verify;
			tmp = EDocStatusInfo.Message;
			tmp = EDocStatusInfo.Since;
			tmp = EDocStatusInfo.Status;
		Исключение КонецПопытки;
		Если ПустаяСтрока(EDocStatusInfo.Status) Или ПустаяСтрока(EDocStatusInfo.Since) Тогда
			Если ТекстОшибки <> Неопределено Тогда
				врТекстОшибки = "Ошибка компоненты.";
				ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
			КонецЕсли;
			Возврат Ложь
		КонецЕсли;
	КонецЕсли;
	
	// проверка полученного документа
	res = EDocStatusInfo.Verify;
	Если res <> 0 Тогда
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = "Ошибка проверки полученного документа: " + EInvVatService.LastError + " (Код " + res + ")";
			ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
		КонецЕсли;
		Возврат Ложь
	КонецЕсли;
	// отразим основную информацию
	ДатаСтр = EDocStatusInfo.Since;
	Дата = Лев(ДатаСтр, 10);
	Год = Число(Лев(Дата, 4));
	Месяц = Число(Сред(Дата, 6, 2));
	День = Число(Прав(Дата, 2));
	Время = Сред(ДатаСтр, 12, 8);
	Часы = Число(Лев(Время, 2));
	Минуты = Число(Сред(Время, 4, 2));
	Секунды = Число(Прав(Время, 2));
	ЧасовойПояс = Прав(ДатаСтр, СтрДлина(ДатаСтр) - 19);
	#Если Клиент Тогда
		Если Лев(ЧасовойПояс, 1) = "+" Тогда
			ЧасыСм = Число(Сред(ЧасовойПояс, 2, 2));
			МинутыСм = Число(Прав(ЧасовойПояс, 2));
		Иначе
			ЧасыСм = 0;
			МинутыСм = 0;
		КонецЕсли;
		Если ПустаяСтрока(ЧасовойПояс) Тогда
			ДатаСостояния = Дата(Год, Месяц, День, Часы, Минуты, Секунды)
		Иначе
			ДатаСостояния = УниверсальноеВремя(Дата(Год, Месяц, День, Часы, Минуты, Секунды) + ( ЧасыСм * 60 + МинутыСм ) * 60)
		КонецЕсли;
	#Иначе
		Если ПустаяСтрока(ЧасовойПояс) Тогда
			ДатаСостояния = Дата(Год, Месяц, День, Часы, Минуты, Секунды)
		Иначе
			ДатаСостояния = УниверсальноеВремя(Дата(Год, Месяц, День, Часы, Минуты, Секунды), ЧасовойПояс)
		КонецЕсли;
	#КонецЕсли
	Проверка = ( res = 0 );
	// отражение информации о статусе документа
	ТекстОтвета = EDocStatusInfo.Message;
	СтатусДокумента = EDocStatusInfo.Status;
	// преобразуем статус во внутреннее представление
	Отказ = Ложь;
	Комментарий = "";
	Если СтатусДокумента = "IN_PROGRESS" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработке")
	ИначеЕсли СтатусДокумента = "COMPLETED" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Выставлен")
	ИначеЕсли СтатусДокумента = "COMPLETED_SIGNED" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленПодписанПолучателем")
	ИначеЕсли СтатусДокумента = "ON_AGREEMENT" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании")
	ИначеЕсли СтатусДокумента = "CANCELLED" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Аннулирован")
	ИначеЕсли СтатусДокумента = "IN_PROGRESS_ERROR" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработкеОшибка")
	ИначеЕсли СтатусДокумента = "ON_AGREEMENT_CANCEL" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленАннулированПоставшиком")
	ИначеЕсли СтатусДокумента = "NOT_FOUND" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НеНайден");
		Комментарий = ТекстОтвета;
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = "Документ <" + Номер + "> не найден на портале";
			ОтразитьОшибку(ТекстОшибки, врТекстОшибки)
		КонецЕсли;
	ИначеЕсли СтатусДокумента = "ERROR" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Ошибка");
		Комментарий = ТекстОтвета;
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = ТекстОтвета;
			ОтразитьОшибку(ТекстОшибки, врТекстОшибки)
		КонецЕсли;
	ИначеЕсли СтатусДокумента = "DENIED" Тогда
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Отказано");
		Комментарий = ТекстОтвета;
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = ТекстОтвета;
			ОтразитьОшибку(ТекстОшибки, врТекстОшибки)
		КонецЕсли;
	Иначе
		Отказ = Истина;
		НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ПустаяСсылка");
		Если ТекстОшибки <> Неопределено Тогда
			врТекстОшибки = "Неизвестный статус документа: " + СтатусДокумента;
			ОтразитьОшибку(ТекстОшибки, врТекстОшибки)
		КонецЕсли;
	КонецЕсли;
	
	// перегружаем статус документа, только если он изменился
	Если НовыйСтатус = Статус Тогда
		Если Исходящий Тогда
			МенеджерЗаписи = РегистрыСведений.Квитанции.СоздатьМенеджерЗаписи()
		Иначе
			МенеджерЗаписи = РегистрыСведений.КвитанцииВходящих.СоздатьМенеджерЗаписи()
		КонецЕсли;
		РазложитьНомер(Номер, МенеджерЗаписи.Год, МенеджерЗаписи.Объект, МенеджерЗаписи.Номер);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ДатаОтражения = ТекущаяДатаСеанса();
			МенеджерЗаписи.Записать(Истина);
			Перейти ~ВыходИзПроцедуры;
		Иначе
			Статус = НовыйСтатус;
		КонецЕсли;
	Иначе
		Статус = НовыйСтатус;
	КонецЕсли;
	
	Если СохранитьДокумент = Неопределено Тогда
		СохранитьДокумент = ПараметрыСеанса.СохранениеДокументов
	КонецЕсли;
	
	Если РасположениеФайлов = Неопределено Тогда
		РасположениеФайлов = ПараметрыСеанса.РасположениеВходящихФайлов
	КонецЕсли;
	
	Если СохранитьДокумент = 2 Или ( СохранитьДокумент = 1 И СтатусДокумента <> "ERROR" И СтатусДокумента <> "NOT_FOUND" ) Тогда
		
		Если РасположениеФайлов = 2 Тогда
			ИмяФайла = Номер + ".status." + СтатусДокумента + ".xml";//Номер + ".status." + Формат(ДатаСостояния, "ДФ=yyyyMMddHHmmss; ДП=NO_DATE") + "." + СтатусДокумента + ".xml";
			ИмяВременногоФайла = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + ИмяФайла;
		Иначе
			ИмяФайла = "";
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
		КонецЕсли;
		Рез = EDocStatusInfo.SaveToFile(ИмяВременногоФайла);
		
		// если не удалось сохранить файл, то не сохраняем лишний элемент справочника "ДокументыОбмена",
		// т.к. эта информация в любом случае будет отражена в регистре сведений
		Если Рез <> 0 Тогда
			Если ТекстОшибки <> Неопределено Тогда
				врТекстОшибки = "Ошибка сохранения файла: " + EInvVatService.LastError;
				ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
			КонецЕсли;
			Перейти ~ОтражениеСтатуса
		КонецЕсли;
		
		Документ = EInvVatService.CreateEDoc();
		
		Если Документ = Неопределено Тогда
			Если ТекстОшибки <> Неопределено Тогда
				врТекстОшибки = "Ошибка создания EDocument: " + EInvVatService.LastError;
				ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
			КонецЕсли;
			Перейти ~ОтражениеСтатуса
		КонецЕсли;
		
		Рез = Документ.LoadFromFile(ИмяВременногоФайла);
		Если Рез <> 0 Тогда
			Если ТекстОшибки <> Неопределено Тогда
				врТекстОшибки = "Ошибка загрузки из файла: " + EInvVatService.LastError;
				ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
			КонецЕсли;
			Перейти ~ОтражениеСтатуса
		КонецЕсли;
		
		Идентификатор = Документ.GetXmlNodeAttribute("e-document/document/id");
		//Ссылка = Справочники.ДокументыОбмена.НайтиПоНаименованию(Идентификатор);
		
		ЗапросДокументОбмена = Новый Запрос("ВЫБРАТЬ
		|	ДокументыОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДокументыОбмена КАК ДокументыОбмена
		|ГДЕ
		|	ДокументыОбмена.Код = &Номер
		|	И ДокументыОбмена.Статус = &Статус
		|	И ДокументыОбмена.РасположениеФайла <> 0");
		
		ЗапросДокументОбмена.УстановитьПараметр("Номер",  Номер);
		ЗапросДокументОбмена.УстановитьПараметр("Статус", Статус);
		
		РезультатЗапросаДокументОбмена = ЗапросДокументОбмена.Выполнить();
		
		Если РезультатЗапросаДокументОбмена.Пустой() Тогда
			Ссылка = ПредопределенноеЗначение("Справочник.ДокументыОбмена.ПустаяСсылка");
		Иначе
			ВыборкаРезультатаЗапросаДокументОбмена = РезультатЗапросаДокументОбмена.Выбрать();
			ВыборкаРезультатаЗапросаДокументОбмена.Следующий();
			Ссылка = ВыборкаРезультатаЗапросаДокументОбмена.Ссылка;
		КонецЕсли;
		
		// пропускаем, если не нужно перегрузить принудительно
		Если Не Ссылка.Пустая() И Не ПерезаписыватьИмеющиеся Тогда
			ЭлектронныйДокумент = Ссылка;
			Перейти ~ОтражениеСтатуса
		ИначеЕсли Не Ссылка.Пустая() Тогда
			//{[+](фрагмент добавлен), Макей Евгений Владимирович 01.11.2016 17:15:12
			//Объект.ТекстОшибкиПроверкиПодписей = "";
			//}Макей Евгений Владимирович 01.11.2016 17:15:12
			Объект = Ссылка.ПолучитьОбъект()
			// иначе записываем новый элемент
		Иначе
			Объект = Справочники.ДокументыОбмена.СоздатьЭлемент()
		КонецЕсли;
		
		Объект.РасположениеФайла = РасположениеФайлов;
		Объект.ИмяФайлаДокумента = ИмяФайла;
		Если РасположениеФайлов = 1 Тогда
			Объект.ХранилищеЗначения = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяВременногоФайла));
		КонецЕсли;
		Объект.Статус = Статус;
		Объект.Код = Номер;
		Объект.Наименование = Идентификатор;
		Объект.ДатаСостояния = ДатаСостояния;
		Объект.contentType = Документ.GetXmlNodeAttribute("e-document/document/contentType");
		Объект.contentEncoding = Документ.GetXmlNodeAttribute("e-document/document/contentEncoding");
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 01.11.2016 17:13:00
		//КоличествоПодписей = Документ.GetSignCount;
		//Объект.КоличествоПодписей = КоличествоПодписей;
		//КоличествоВерныхПодписей = 0;
		//ТекстОшибкиПроверкиПодписей = "";
		//
		//Для й=0 По КоличествоПодписей-1 Цикл
		//	ПодписьВерна = ( Документ.VerifySign(й, 0) = 0 );
		//	Если ПодписьВерна Тогда
		//		КоличествоВерныхПодписей = КоличествоВерныхПодписей + 1
		//	Иначе
		//		УНП = Документ.GetSignProperty(й, "1.3.6.1.4.1.12656.106.104", 0);
		//		Наименование = Документ.GetSignProperty(й, "2.5.4.3", 0);
		//		Фамилия = Документ.GetSignProperty(й, "2.5.4.4", 0);
		//		ИмяОтчество = Документ.GetSignProperty(й, "2.5.4.41", 0);
		//		ДатаПодписания = Документ.GetSignProperty(й, "SIGNDATE", 0);
		//		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + "№" + (й+1) + " от " + ДатаПодписания
		//		+ Символы.ПС + Наименование + Символы.ПС + УНП + Символы.ПС + Фамилия + " " + ИмяОтчество
		//		+ Символы.ПС + EInvVatService.LastError + Символы.ПС;
		//	КонецЕсли;
		//КонецЦикла;
		//}Макей Евгений Владимирович 01.11.2016 17:13:00
		//{[+](фрагмент добавлен), Макей Евгений Владимирович 01.11.2016 17:13:07
		ДатаПодписания = Дата(1,1,1);
		ПолучитьИнформациюОПодписяхДокумента(Документ, Объект.КоличествоПодписей, Объект.КоличествоВерныхПодписей, Объект.ТекстОшибкиПроверкиПодписей, ТекстОшибки, ДатаПодписания);
		//}Макей Евгений Владимирович 01.11.2016 17:13:07
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 01.11.2016 17:14:39
		//Объект.ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей;
		//Объект.КоличествоВерныхПодписей = КоличествоВерныхПодписей;
		//}Макей Евгений Владимирович 01.11.2016 17:14:39
		
		Попытка
			Объект.Записать();
			ЭлектронныйДокумент = Объект.Ссылка
		Исключение
			ЭлектронныйДокумент = Неопределено;
			Если ТекстОшибки <> Неопределено Тогда
				врТекстОшибки = ОписаниеОшибки();
				ОтразитьОшибку(ТекстОшибки, врТекстОшибки);
			КонецЕсли;
		КонецПопытки;
		
	КонецЕсли;
	
	~ОтражениеСтатуса:
	// отражаем статус документа в ИБ
	Если Не Отказ Тогда
		Если Исходящий Тогда
			НеЗаменятьКомментарийЕслиНетНового = Ложь;
			МенеджерЗаписи = РегистрыСведений.Квитанции.СоздатьМенеджерЗаписи()
		Иначе
			НеЗаменятьКомментарийЕслиНетНового = Истина;
			МенеджерЗаписи = РегистрыСведений.КвитанцииВходящих.СоздатьМенеджерЗаписи()
		КонецЕсли;
		РазложитьНомер(Номер, МенеджерЗаписи.Год, МенеджерЗаписи.Объект, МенеджерЗаписи.Номер);
		Если НеЗаменятьКомментарийЕслиНетНового Тогда
			МенеджерЗаписи.Прочитать();
			Если Не МенеджерЗаписи.Выбран() Или Не ПустаяСтрока(Комментарий) Тогда
				// иногда пользователи оставляют комментарии, и если нет новой информации, то можно их оставить
				МенеджерЗаписи.Комментарий = Комментарий;
			КонецЕсли;
		Иначе
			МенеджерЗаписи.Комментарий = Комментарий;
		КонецЕсли;
		РазложитьНомер(Номер, МенеджерЗаписи.Год, МенеджерЗаписи.Объект, МенеджерЗаписи.Номер);
		МенеджерЗаписи.Статус = Статус;
		МенеджерЗаписи.ДатаСостояния = ДатаСостояния;
		МенеджерЗаписи.Проверка = Проверка;
		//МенеджерЗаписи.Комментарий = Комментарий;
		МенеджерЗаписи.ЭлектронныйДокумент = ЭлектронныйДокумент;
		МенеджерЗаписи.Ответственный = ПараметрыСеанса.ТекущийПользователь;
		МенеджерЗаписи.ДатаОтражения = ТекущаяДатаСеанса();
		МенеджерЗаписи.ПодписанИМНС = ДатаПодписания;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	~ВыходИзПроцедуры:
	// данные отражены
	Возврат Истина

КонецФункции // ОбновитьДанныеОстатусеДокумента()

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыгрузитьДокументы
//
// Описание:
//  производит выгрузку документов обмена во внешние файлы
//
// Параметры (название, тип, дифференцированное значение)
//  ДокументыОбмена - Массив (элементы: СправочникСсылка.ДокументыОбмена) - массив документов для выгрузки
//  Каталог - Строка(0) - путь выгрузки файлов
//  ИзменятьРасположение - Булево - требуется ли изменить реквизиты элемента (расположение, имя файла)
//                                  или просто выгрузить
//  Ошибки - Строка, Массив - переменная для записи ошибки в случае неудачи
//
Процедура ВыгрузитьДокументы(ДокументыОбмена, Каталог, ИзменятьРасположение = Ложь, Ошибки = Неопределено) Экспорт
    
    Если Прав(Каталог, 1) <> "\" И Найти(Каталог, "\") Тогда
        Приемник = Каталог + "\"
    ИначеЕсли Прав(Каталог, 1) <> "/" И Найти(Каталог, "/") Тогда
        Приемник = Каталог + "/"
    Иначе
        Приемник = Каталог
    КонецЕсли;
    
    Для каждого Документ Из ДокументыОбмена Цикл
        
        Если Не ЗначениеЗаполнено(Документ) Тогда
            Если Ошибки <> Неопределено Тогда
                ОтразитьОшибку(Ошибки, "Не выбран файл для выгрузки")
            КонецЕсли;
            Продолжить;
        КонецЕсли;
        
        // если документ расположен на диске, то просто копируем в каталог
        Если Документ.РасположениеФайла = 2 Тогда
            
            ИмяФайла = Документ.ИмяФайлаДокумента;
            
            Попытка
                КопироватьФайл(ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + ИмяФайла, Приемник + ИмяФайла);
            Исключение
                Если Ошибки <> Неопределено Тогда
                    ОтразитьОшибку(Ошибки, "Ошибка копирования файла " + Документ + " по причине: " + ОписаниеОшибки())
                КонецЕсли;
            КонецПопытки;
            
            Перейти ~ИзменятьРасположение;
            
        ИначеЕсли Документ.РасположениеФайла = 1 И ЗначениеЗаполнено(Документ.Статус) Тогда
            
            Если Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработке") Тогда
                СтатусДокумента = "IN_PROGRESS"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Выставлен") Тогда
                СтатусДокумента = "COMPLETED"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленПодписанПолучателем") Тогда
                СтатусДокумента = "COMPLETED_SIGNED"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании") Тогда
                СтатусДокумента = "ON_AGREEMENT"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Аннулирован") Тогда
                СтатусДокумента = "CANCELLED"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработкеОшибка") Тогда
                СтатусДокумента = "IN_PROGRESS_ERROR"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленАннулированПоставшиком") Тогда
                СтатусДокумента = "ON_AGREEMENT_CANCEL"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НеНайден") Тогда
                СтатусДокумента = "NOT_FOUND"
            ИначеЕсли Документ.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Ошибка") Тогда
                СтатусДокумента = "ERROR"
            КонецЕсли;
            ИмяФайла = СокрЛП(Документ.Код) + ".status." + СтатусДокумента + ".xml";//Формат(Документ.ДатаСостояния, "ДФ=yyyyMMddHHmmss; ДП=NO_DATE") + "." + СтатусДокумента + ".xml"
            
        ИначеЕсли Документ.РасположениеФайла = 1 Тогда
            
            ИмяФайла = СокрЛП(Документ.Код) + ".in.xml";//".in." + СокрЛП(Документ.Наименование) + ".xml"
            
        Иначе
            
            Если Ошибки <> Неопределено Тогда
                ОтразитьОшибку(Ошибки, "Не указано располонение файла " + Документ)
            КонецЕсли;
            ИмяФайла = СокрЛП(Документ.Код) + ".xml";// + "." + СокрЛП(Документ.Наименование) + ".xml"
            
        КонецЕсли;
        
        Данные = Документ.ХранилищеЗначения.Получить();
        
        Попытка
            Данные.Записать(Приемник + ИмяФайла)
        Исключение
            Если Ошибки <> Неопределено Тогда
                ОтразитьОшибку(Ошибки, "Ошибка копирования файла " + Документ + " по причине: " + ОписаниеОшибки())
            КонецЕсли;
        КонецПопытки;
        
        ~ИзменятьРасположение:
        Если ИзменятьРасположение Тогда
            Объект = Документ.ПолучитьОбъект();
            Объект.ХранилищеЗначения = Неопределено;
            Объект.РасположениеФайла = 2;
            Объект.ИмяФайлаДокумента = ИмяФайла;
            Попытка
                Объект.Записать();
            Исключение
                Если Ошибки <> Неопределено Тогда
                    ОтразитьОшибку(Ошибки, "Ошибка записи элемента " + Документ + " по причине: " + ОписаниеОшибки())
                КонецЕсли;
            КонецПопытки;
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры //ВыгрузитьДокументы

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПодписатьИОтправитьДокументыОбмена
//
// Описание:
//  подписывает и отправляет документы обмена на портал
//
// Параметры (название, тип, дифференцированное значение)
//  ДокументыОбмена - ТаблицаЗначений - описание колонок и получение таблицы - ЭСЧФклиент.ТаблицаДанныхПодтвержденияДокументов() (или ЭСЧФсерверПовтИсп)
//  СохранитьДокумент  - Число(1) - нужно ли сохранить полученный с спортала документ в базе;
//                     0 - не нужно в любом случае
//                     1 - сохранить в случае получения статуса, отличного от: NOT_FOUND, ERROR
//                     2 - сохранить в любом случае
//  РасположениеФайлов  - Число - где нужно сохранить файл:
//                      1 - в базе; 2 - во внешнем файле
//  Ошибки - Строка, Массив - ошибки операций
//  ПринятыеДокументы - Массив (Булево) - массив ответов сервера о принятии документа
//
Процедура ПодписатьИОтправитьДокументыОбмена(ДокументыОбмена, СохранитьДокумент = Неопределено, РасположениеФайлов = Неопределено, Ошибки = Неопределено) Экспорт

	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
		Если EInvVatService = Неопределено Тогда
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Не удалось получить компоненту")
			КонецЕсли;
			Возврат
		КонецЕсли;
	#КонецЕсли
	
	Если СохранитьДокумент = Неопределено Тогда
		СохранитьДокумент = ПараметрыСеанса.СохранениеДокументов
	КонецЕсли;
	
	Если РасположениеФайлов = Неопределено Тогда
		РасположениеФайлов = ПараметрыСеанса.РасположениеВходящихФайлов
	КонецЕсли;
	
	ЗапросДокумент = Новый Запрос;
	ЗапросДокумент.УстановитьПараметр("ПустойСтатус", ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ПустаяСсылка"));
	ЗапросДокумент.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокументыОбмена.Ссылка КАК ДокументДляИсправления
	|ИЗ
	|	Справочник.ДокументыОбмена КАК ДокументыОбмена
	|ГДЕ
	|	ДокументыОбмена.Код = &Код
	|	И ДокументыОбмена.КоличествоПодписей > &КоличествоПодписей
	|	И ДокументыОбмена.Статус = &ПустойСтатус";
	
	Для каждого цДокумент Из ДокументыОбмена Цикл
		
		Отказ = Ложь;
		
		Документ = цДокумент.ДокументОбмена;
		
		Если Документ.РасположениеФайла = 2 Тогда
			ИмяФайла = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + Документ.ИмяФайлаДокумента
		ИначеЕсли Документ.РасположениеФайла = 1 Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла("xml");
			Данные = Документ.ХранилищеЗначения.Получить();
			Данные.Записать(ИмяФайла);
		ИначеЕсли Документ.РасположениеФайла = 3 Тогда
			цДокумент.ОшибкаФайла = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Документ " + Документ + " перенесён в архив");
			КонецЕсли;
			Продолжить;
		Иначе
			цДокумент.ОшибкаФайла = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Не задано расположение файла для документа " + Документ);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		InvVatXml = EInvVatService.CreateEDoc();
		res = InvVatXml.LoadFromFile(ИмяФайла);
		Если res <> 0 Тогда
			Отказ = Истина;
			цДокумент.ОшибкаФайла = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, EInvVatService.LastError);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		Если Документ.КоличествоПодписей < 2 Тогда
			
			//Выработка подписи
			res = InvVatXml.Sign(0);
			Если res <> 0 Тогда
				Отказ = Истина;
				Если Ошибки <> Неопределено Тогда
					ОтразитьОшибку(Ошибки, EInvVatService.LastError);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			//Сохранение подписанного файла
			Если СохранитьДокумент = 2 И РасположениеФайлов = 2 Тогда
				ИмяФайлаДокумента = СокрЛП(Документ.Код) + ".out.xml";
				ИмяФайлаКвитанции = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + ИмяФайлаДокумента;//".out." + СокрЛП(Документ.Наименование) + ".xml";
			Иначе
				ИмяФайлаКвитанции = ПолучитьИмяВременногоФайла("xml");
			КонецЕсли;
			
			res = InvVatXml.SaveToFile( ИмяФайлаКвитанции );
			Если res <> 0 Тогда
				Отказ = Истина;
				Если Ошибки <> Неопределено Тогда
					ОтразитьОшибку(Ошибки, EInvVatService.LastError);
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			ИмяФайлаКвитанции = Неопределено;
			
		КонецЕсли;
		
		//{[+](фрагмент добавлен), Макей Евгений Владимирович 02.11.2016 10:29:07
		// Проверка подписей документа
		КоличествоПодписей = 0;
		КоличествоВерныхПодписей = 0;
		Если СохранитьДокумент Тогда
			ТекстОшибкиПроверкиПодписей = "";
		Иначе
			ТекстОшибкиПроверкиПодписей = Неопределено;
		КонецЕсли;
		ПолучитьИнформациюОПодписяхДокумента(InvVatXml, КоличествоПодписей, КоличествоВерныхПодписей, ТекстОшибкиПроверкиПодписей);
		
		Если КоличествоПодписей = КоличествоВерныхПодписей Тогда
		//}Макей Евгений Владимирович 02.11.2016 10:29:07
			//Отправка подписанного документа на портал ЭСФЧ
			res = EInvVatService.SendEDoc( InvVatXml );
			Если res <> 0 Тогда
				Отказ = Истина;
				Если Ошибки <> Неопределено Тогда
					ОтразитьОшибку(Ошибки, EInvVatService.LastError);
				КонецЕсли;
				//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 10:37:25
				//Продолжить;
				//}Макей Евгений Владимирович 02.11.2016 10:37:25
			КонецЕсли;
			
			// Ответ от портала ЭСФЧ будет сохранен в фале с расширением ".xml"
			//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 10:33:40
			//цДокумент.Отправлен = ( Не Отказ );
			//}Макей Евгений Владимирович 02.11.2016 10:33:40
			//{[+](фрагмент добавлен), Макей Евгений Владимирович 02.11.2016 10:34:06
			Если Не Отказ Тогда
				цДокумент.Отправлен = Истина;
				//}Макей Евгений Владимирович 02.11.2016 10:34:06
				InvVatTicket = EInvVatService.Ticket;
				Принят = ( InvVatTicket.Accepted = 0 );
				цДокумент.Принят = Принят;
				цДокумент.Ответ  = InvVatTicket.Message;
				Если Не Принят Тогда
					Если Ошибки <> Неопределено Тогда
						врТекстОшибки = InvVatTicket.Message;
						ОтразитьОшибку(Ошибки, врТекстОшибки);
					КонецЕсли;
					//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 10:24:20
					//ИначеЕсли ИмяФайлаКвитанции <> Неопределено И СохранитьДокумент = 1 И РасположениеФайлов = 2 Тогда
					//}Макей Евгений Владимирович 02.11.2016 10:24:20
					//{[+](фрагмент добавлен), Макей Евгений Владимирович 02.11.2016 10:24:42
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			Отказ = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Ошибки в подписи документа");
			КонецЕсли;
			
		КонецЕсли;
		
		Если СохранитьДокумент = 1 И РасположениеФайлов = 2 Тогда
			//}Макей Евгений Владимирович 02.11.2016 10:24:42
			ИмяФайлаДокумента = СокрЛП(Документ.Код) + ".out.xml";
			ИмяФайлаСохранить = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + ИмяФайлаДокумента;//".out." + СокрЛП(Документ.Наименование) + ".xml";
			Попытка
				КопироватьФайл(ИмяФайлаКвитанции, ИмяФайлаСохранить)
			Исключение
				врТекстОшибки = "Ошибка копирования файла: " + ОписаниеОшибки();
				ОтразитьОшибку(Ошибки, врТекстОшибки);
				Продолжить;
			КонецПопытки;
		ИначеЕсли ИмяФайлаКвитанции <> Неопределено И СохранитьДокумент Тогда
			ИмяФайлаСохранить = ИмяФайлаКвитанции;
		Иначе
			ИмяФайлаСохранить = Неопределено;
		КонецЕсли;
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 10:13:10
		//Если ( Документ.КоличествоПодписей < КоличествоПодписей Или КоличествоПодписей <> КоличествоВерныхПодписей ) И ( СохранитьДокумент = 1 И Принят Или СохранитьДокумент ) Тогда
		//}Макей Евгений Владимирович 02.11.2016 10:13:10
		//{[+](фрагмент добавлен), Макей Евгений Владимирович 02.11.2016 10:28:28
		Если СохранитьДокумент = 1 И Принят Или СохранитьДокумент Тогда
		//}Макей Евгений Владимирович 02.11.2016 10:28:28
			
			Объект = Неопределено;
			ЗапросДокумент.УстановитьПараметр("Код", Документ.Код);
			ЗапросДокумент.УстановитьПараметр("КоличествоПодписей", Документ.КоличествоПодписей);
			ВыборкаДокумент = ЗапросДокумент.Выполнить().Выбрать();
			Если ВыборкаДокумент.Следующий() Тогда
				Попытка
					Объект = ВыборкаДокумент.ДокументДляИсправления.ПолучитьОбъект();
				Исключение КонецПопытки;
			КонецЕсли;
			//Попытка
			//	Объект = Документ.ПолучитьОбъект();
			//Исключение
			Если Объект = Неопределено Тогда
				Объект = Справочники.ДокументыОбмена.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(Объект, Документ,, "ХранилищеЗначения, КоличествоПодписей, КоличествоВерныхПодписей, ТекстОшибкиПроверкиПодписей
															|, ИмяФайлаДокумента, РасположениеФайла, Родитель, Ссылка, Владелец, ПометкаУдаления, Предопределенный, ЭтоГруппа");
			КонецЕсли;
			//КонецПопытки;
			//{[-](фрагмент удален)Макей Евгений Владимирович 02.11.2016 10:40:12
			//Объект.КоличествоПодписей = Документ.КоличествоПодписей + 1;
			//Объект.КоличествоВерныхПодписей = Документ.КоличествоВерныхПодписей + 1;
			//}Макей Евгений Владимирович 02.11.2016 10:40:12
			//{[+](фрагмент добавлен), Макей Евгений Владимирович 02.11.2016 10:40:23
			Объект.КоличествоПодписей = КоличествоПодписей;
			Объект.КоличествоВерныхПодписей = КоличествоВерныхПодписей;
			//}Макей Евгений Владимирович 02.11.2016 10:40:23
			Объект.РасположениеФайла = РасположениеФайлов;
			Если РасположениеФайлов = 2 Тогда
				Объект.ИмяФайлаДокумента = ИмяФайлаДокумента;
			Иначе
				Объект.ХранилищеЗначения = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаКвитанции))
			КонецЕсли;
			Объект.ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей;
			Попытка
				Объект.Записать();
				цДокумент.ПодписанныйДокумент = Объект.Ссылка;
			Исключение
				врТекстОшибки = "Ошибка записи эл. документа" + Объект + " : " + ОписаниеОшибки();
				Если Ошибки <> Неопределено Тогда
					ОтразитьОшибку(Ошибки, врТекстОшибки);
				КонецЕсли;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры //ПодписатьИОтправитьДокументыОбмена

////////////////////////////////////////////////////////////////////////////////
//
// Функция СтатусДокумента
//
// Описание:
//  Возвращает статус документа по номеру
//
// Параметры (название, тип, дифференцированное значение)
//  Номер - Строка(25) - номер счета-фактуры
//  Исходящий - Булево - признак исходящего документа
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЭСЧФ, Неопределено - статус документа или неопределено в случае отсутствия записи
//
Функция СтатусДокументаПоНомеру(Номер, Исходящий = Истина) Экспорт
	
	Если Исходящий Тогда
		Квитанция = РегистрыСведений.Квитанции.СоздатьМенеджерЗаписи()
	Иначе
		Квитанция = РегистрыСведений.КвитанцииВходящих.СоздатьМенеджерЗаписи()
	КонецЕсли;
	
	РазложитьНомер(Номер, Квитанция.Год, Квитанция.Объект, Квитанция.Номер);
	
	Квитанция.Прочитать();
	
	Если Квитанция.Выбран() Тогда
		Возврат Квитанция.Статус
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции //СтатусДокумента

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыполнитьОбменДаннымиСПорталом
//
// Описание:
//  производит загрузку данных с портала в автоматическом режиме
//
// Параметры (название, тип, дифференцированное значение)
//  КоличествоДокументовВПакете - Число(10,0) - количество документов для загрузки за один проход
//  Организации - ТаблицаЗначений - таблица со строками организаций, по которым следует выполнить обмен;
//  ТаблицаОрганизацийЗагрузка - ТаблицаЗначений - таблица с информацией о загрузке/авторизации
//  ПолучитьНомера - Булево - получить номера входящих документов с портала
//  ЗагрузитьДокументы - Булево - загрузить документы с портала
//  ЗагрузитьСтатусы - Булево - загрузить статусы с портала
//  ПодтвердитьДокументы - Булево - подтвердить входящие документы
//  ВыгрузитьДокументы - Булево - выгрузить исходящие документы
//  ЗагрузитьСтатусыИсходящих - Булево - загрузить статусы исходящих документов
//  ДобавлятьСобытияВЖурналРегистрации - Булево - если требуется на клиенте делать записи об ошибках в журнал регистрации
//  Ошибки - Массив, Строка - ошибки при выполнении операции
//  ЗадержкаПовторногоВызоваСервера - Число(32,0) - параметр компоненты "connection.readTimeout"
//
Процедура ВыполнитьОбменДаннымиСПорталом(КоличествоДокументовВПакете = 100, Организации = Неопределено, ТаблицаОрганизацийЗагрузка = Неопределено, ПолучитьНомера = Истина,
											ЗагрузитьДокументы = Истина, ЗагрузитьСтатусы = Истина, ПодтвердитьДокументы = Истина, ВыгрузитьДокументы = Истина, ЗагрузитьСтатусыИсходящих = Истина,
											ДобавлятьСобытияВЖурналРегистрации = Ложь, Ошибки = Неопределено, ЗадержкаПовторногоВызоваСервера = Неопределено) Экспорт

	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
		Если EInvVatService = Неопределено Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): не удалось получить компоненту";
			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			Возврат;
		КонецЕсли;
		Если ЗадержкаПовторногоВызоваСервера <> Неопределено Тогда
			ЭСЧФсервер.УстановитьПараметрСервисаКлиент( , ЗадержкаПовторногоВызоваСервера,, Ошибки);
		КонецЕсли;
	#Иначе
		EInvVatService = Новый COMОбъект("EInvVatService.Connector");
		EInvVatAuthorized = Ложь;
		EInvVatConnected = Ложь;
		Если EInvVatService = Неопределено Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): не удалось получить компоненту";
			//Сообщение = Новый СообщениеПользователю;
			//Сообщение.Текст = ТекстОшибки;
			//Сообщение.Сообщить();
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, ТекстОшибки);
			КонецЕсли;
			Если ДобавлятьСобытияВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		Если ЗадержкаПовторногоВызоваСервера <> Неопределено Тогда
			ЭСЧФклиент.УстановитьПараметрСервисаКлиент( , ЗадержкаПовторногоВызоваСервера,, Ошибки);
		КонецЕсли;
	#КонецЕсли
	
	ТекстЗапросаОрганизации = "ВЫБРАТЬ
	|	ПараметрыАвторизацииНаСервере.Организация,
	|	ПараметрыАвторизацииНаСервере.ИдентификаторОткрытогоКлюча,
	|	ПараметрыАвторизацииНаСервере.ОбщееИмя,
	|	ПараметрыАвторизацииНаСервере.ПарольКЛичномуКлючу,
	|	ПараметрыАвторизацииНаСервере.ИспользоватьУНП,
	|	ЕСТЬNULL(ГраницыНомеровВходящие.Граница, ДАТАВРЕМЯ(2016, 6, 30, 23, 59, 59)) КАК Граница
	|ИЗ
	|	РегистрСведений.ПараметрыАвторизацииНаСервере КАК ПараметрыАвторизацииНаСервере
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГраницыНомеровВходящие КАК ГраницыНомеровВходящие
	|		ПО ПараметрыАвторизацииНаСервере.Организация = ГраницыНомеровВходящие.Организация";
	
	ОтборПоОрганизациям = ( Организации <> Неопределено );
	Если ОтборПоОрганизациям Тогда
		ТекстЗапросаОрганизации = ТекстЗапросаОрганизации + Символы.ПС + "ГДЕ ПараметрыАвторизацииНаСервере.Организация В (&Организации)";
	КонецЕсли;
	
	ЗапросОрганизации = Новый Запрос(ТекстЗапросаОрганизации);
	Если ОтборПоОрганизациям Тогда
		ЗапросОрганизации.УстановитьПараметр("Организации", Организации.ВыгрузитьКолонку("Организация"));
	КонецЕсли;
	
	ТаблицаОрганизацийЗагрузка = ЗапросОрганизации.Выполнить().Выгрузить();
	
	Если Не ТаблицаОрганизацийЗагрузка.Количество() Тогда
		ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): нет параметров авторизации";
		#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
		#Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Если ДобавлятьСобытияВЖурналРегистрации Тогда
				ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			КонецЕсли;
		#КонецЕсли
		Перейти ~ВыходИзПроцедуры
	КонецЕсли;
	
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("УспешнаяАвторизация",        Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("УспешноеПодключение",        Новый ОписаниеТипов("Булево"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ЗагруженоДокументов",        Новый ОписаниеТипов("Число"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ЗагруженоСтатусов",          Новый ОписаниеТипов("Число"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ЗагруженоНомеров",           Новый ОписаниеТипов("Число"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ПодтвержденоДокументов",     Новый ОписаниеТипов("Число"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ВыгруженоДокументов",        Новый ОписаниеТипов("Число"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ЗагруженоСтатусовИсходящих", Новый ОписаниеТипов("Число"));
	ТаблицаОрганизацийЗагрузка.Колонки.Добавить("ОшибкиПодтверждения",        Новый ОписаниеТипов("Булево"));
	
	//ТекстЗапросаСтатусыИсходящихДляЗагрузки = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	СтатусыДляЗагрузки.Номер КАК НомерИсх
	//|ИЗ
	//|	РегистрСведений.СтатусыДляЗагрузки КАК СтатусыДляЗагрузки
	//|ГДЕ
	//|	СтатусыДляЗагрузки.Организация = &Организация
	//|
	//|ДЛЯ ИЗМЕНЕНИЯ";
	ТекстЗапросаСтатусыИсходящихДляЗагрузки = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	СтатусыДляЗагрузки.Номер КАК НомерИсх,
	|	СтатусыДляЗагрузки.КоличествоЗагрузок
	|ИЗ
	|	РегистрСведений.СтатусыДляЗагрузки КАК СтатусыДляЗагрузки
	|ГДЕ
	|	СтатусыДляЗагрузки.Организация = &Организация
	|	И СтатусыДляЗагрузки.КоличествоЗагрузок = 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	СтатусыДляЗагрузки.Номер,
	|	СтатусыДляЗагрузки.КоличествоЗагрузок
	|ИЗ
	|	РегистрСведений.СтатусыДляЗагрузки КАК СтатусыДляЗагрузки
	|ГДЕ
	|	СтатусыДляЗагрузки.Организация = &Организация
	|	И СтатусыДляЗагрузки.КоличествоЗагрузок <> 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ";
	
	ЗапросСтатусыИсх = Новый Запрос(ТекстЗапросаСтатусыИсходящихДляЗагрузки);
	
	ТекстЗапросаБлокировкаКвитанцийИсходящихНомеров = "ВЫБРАТЬ
	|	ТаблицаНомеровИсх.НомерИсх,
	|	ТаблицаНомеровИсх.Год,
	|	ТаблицаНомеровИсх.Объект,
	|	ТаблицаНомеровИсх.Номер
	|ПОМЕСТИТЬ врТаблицаНомеровИсх
	|ИЗ
	|	&ТаблицаНомеровИсх КАК ТаблицаНомеровИсх
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КвитанцииВходящих.ДатаСостояния,
	|	ТаблицаНомеровИсх.НомерИсх
	|ИЗ
	|	врТаблицаНомеровИсх КАК ТаблицаНомеровИсх
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Квитанции КАК КвитанцииВходящих
	|		ПО ТаблицаНомеровИсх.Год = КвитанцииВходящих.Год
	|			И ТаблицаНомеровИсх.Объект = КвитанцииВходящих.Объект
	|			И ТаблицаНомеровИсх.Номер = КвитанцииВходящих.Номер
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.Квитанции";
	
	ЗапросБлокировкиКвитанцийИсх = Новый Запрос(ТекстЗапросаБлокировкаКвитанцийИсходящихНомеров);
	
	// Выбираем сначала документы без ошибок, потом с данными, но ошибками загрузки файла, затем только с отсутствующим документом или документом обмена, потом с любыми ошибками
	//ТекстЗапросаНомераДляПодтверждения = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	НомераДляПодтверждения.Организация,
	//|	НомераДляПодтверждения.Номер,
	//|	ДокументыОбмена.Ссылка КАК ЭлектронныйДокумент,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК НетДокумента,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК НетДанных,
	//|	ЭлектронныйСчетФактураПолученный.Ссылка
	//|ПОМЕСТИТЬ ИсходныеДанные
	//|ИЗ
	//|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	//|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	//|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	//|ГДЕ
	//|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	//|	И НЕ НомераДляПодтверждения.ОшибкаФайла
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ = ЛОЖЬ
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ = ЛОЖЬ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	НомераДляПодтверждения.Организация,
	//|	НомераДляПодтверждения.Номер,
	//|	ДокументыОбмена.Ссылка,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	NULL
	//|ИЗ
	//|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	//|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	//|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	//|ГДЕ
	//|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	//|	И НомераДляПодтверждения.ОшибкаФайла
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ = ЛОЖЬ
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ = ЛОЖЬ
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	НомераДляПодтверждения.Организация,
	//|	НомераДляПодтверждения.Номер,
	//|	ДокументыОбмена.Ссылка,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	NULL
	//|ИЗ
	//|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	//|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	//|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	//|ГДЕ
	//|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	//|	И (ВЫБОР
	//|				КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|					ТОГДА ИСТИНА
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ = ИСТИНА
	//|			ИЛИ ВЫБОР
	//|				КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|					ТОГДА ИСТИНА
	//|				ИНАЧЕ ЛОЖЬ
	//|			КОНЕЦ = ИСТИНА)
	//|	И НЕ(ВЫБОР
	//|					КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|						ТОГДА ИСТИНА
	//|					ИНАЧЕ ЛОЖЬ
	//|				КОНЕЦ = ИСТИНА
	//|				И ВЫБОР
	//|					КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|						ТОГДА ИСТИНА
	//|					ИНАЧЕ ЛОЖЬ
	//|				КОНЕЦ = ИСТИНА)
	//|
	//|ОБЪЕДИНИТЬ ВСЕ
	//|
	//|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	НомераДляПодтверждения.Организация,
	//|	НомераДляПодтверждения.Номер,
	//|	ДокументыОбмена.Ссылка,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	ВЫБОР
	//|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|			ТОГДА ИСТИНА
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ,
	//|	NULL
	//|ИЗ
	//|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	//|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	//|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	//|ГДЕ
	//|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ = ИСТИНА
	//|	И ВЫБОР
	//|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	//|				ТОГДА ИСТИНА
	//|			ИНАЧЕ ЛОЖЬ
	//|		КОНЕЦ = ИСТИНА
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	ИсходныеДанные.Организация,
	//|	ИсходныеДанные.Номер,
	//|	ИсходныеДанные.ЭлектронныйДокумент,
	//|	ИсходныеДанные.НетДокумента,
	//|	ИсходныеДанные.НетДанных,
	//|	ЭлектронныйСчетФактураПолученный.Ссылка КАК Ссылка
	//|ИЗ
	//|	ИсходныеДанные КАК ИсходныеДанные
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	//|		ПО ИсходныеДанные.Организация = НомераДляПодтверждения.Организация
	//|			И ИсходныеДанные.Номер = НомераДляПодтверждения.Номер
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	//|		ПО ИсходныеДанные.Ссылка = ЭлектронныйСчетФактураПолученный.Ссылка
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	//|		ПО ИсходныеДанные.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	//|
	//|ДЛЯ ИЗМЕНЕНИЯ
	//|	РегистрСведений.НомераДляПодтверждения,
	//|	Справочник.ДокументыОбмена,
	//|	Документ.ЭлектронныйСчетФактураПолученный";
	ТекстЗапросаНомераДляПодтверждения = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	НомераДляПодтверждения.Организация,
	|	НомераДляПодтверждения.Номер,
	|	ДокументыОбмена.Ссылка КАК ЭлектронныйДокумент,
	|	ЛОЖЬ КАК НетДокумента,
	|	ЛОЖЬ КАК НетДанных,
	|	ЭлектронныйСчетФактураПолученный.Ссылка,
	|	НомераДляПодтверждения.КоличествоОбработок,
	|	0 КАК Порядок
	|ПОМЕСТИТЬ ИсходныеДанные
	|ИЗ
	|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	|ГДЕ
	|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	|	И НЕ НомераДляПодтверждения.ОшибкаФайла
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ЛОЖЬ
	|	И НомераДляПодтверждения.КоличествоОбработок = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	НомераДляПодтверждения.Организация,
	|	НомераДляПодтверждения.Номер,
	|	ДокументыОбмена.Ссылка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЭлектронныйСчетФактураПолученный.Ссылка,
	|	НомераДляПодтверждения.КоличествоОбработок,
	|	1
	|ИЗ
	|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	|ГДЕ
	|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	|	И НЕ НомераДляПодтверждения.ОшибкаФайла
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ЛОЖЬ
	|	И НомераДляПодтверждения.КоличествоОбработок <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	НомераДляПодтверждения.Организация,
	|	НомераДляПодтверждения.Номер,
	|	ДокументыОбмена.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	НомераДляПодтверждения.КоличествоОбработок,
	|	2
	|ИЗ
	|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	|ГДЕ
	|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	|	И НомераДляПодтверждения.ОшибкаФайла
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	НомераДляПодтверждения.Организация,
	|	НомераДляПодтверждения.Номер,
	|	ДокументыОбмена.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	НомераДляПодтверждения.КоличествоОбработок,
	|	3
	|ИЗ
	|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	|ГДЕ
	|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	|	И (ВЫБОР
	|				КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = ИСТИНА
	|			ИЛИ ВЫБОР
	|				КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = ИСТИНА)
	|	И НЕ(ВЫБОР
	|					КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ = ИСТИНА
	|				И ВЫБОР
	|					КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ = ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	НомераДляПодтверждения.Организация,
	|	НомераДляПодтверждения.Номер,
	|	ДокументыОбмена.Ссылка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	NULL,
	|	НомераДляПодтверждения.КоличествоОбработок,
	|	4
	|ИЗ
	|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	|			ПО ЭлектронныйСчетФактураПолученный.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	|		ПО НомераДляПодтверждения.Номер = ЭлектронныйСчетФактураПолученный.Номер
	|ГДЕ
	|	ЭлектронныйСчетФактураПолученный.Организация = &Организация
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|	И ВЫБОР
	|			КОГДА ЕСТЬNULL(ДокументыОбмена.Ссылка, ИСТИНА) = ИСТИНА
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	ИсходныеДанные.Организация,
	|	ИсходныеДанные.Номер,
	|	ИсходныеДанные.ЭлектронныйДокумент,
	|	ИсходныеДанные.НетДокумента,
	|	ИсходныеДанные.НетДанных,
	|	ЭлектронныйСчетФактураПолученный.Ссылка КАК Ссылка,
	|	ИсходныеДанные.КоличествоОбработок КАК КоличествоОбработок,
	|	ИсходныеДанные.Порядок КАК Порядок
	|ИЗ
	|	ИсходныеДанные КАК ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ПО ИсходныеДанные.Организация = НомераДляПодтверждения.Организация
	|			И ИсходныеДанные.Номер = НомераДляПодтверждения.Номер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|		ПО ИсходныеДанные.Ссылка = ЭлектронныйСчетФактураПолученный.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДокументыОбмена КАК ДокументыОбмена
	|		ПО ИсходныеДанные.ЭлектронныйДокумент = ДокументыОбмена.Ссылка
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	Справочник.ДокументыОбмена,
	|	Документ.ЭлектронныйСчетФактураПолученный,
	|	РегистрСведений.НомераДляПодтверждения
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоОбработок,
	|	Порядок";

	
	ЗапросНомераДляПодтверждения = Новый Запрос(ТекстЗапросаНомераДляПодтверждения);
	
	ТекстЗапросаНомераИсходящихДляВыгрузки = "ВЫБРАТЬ
	|	НомераДляВыгрузки.Организация,
	|	НомераДляВыгрузки.Номер,
	|	НомераЭСЧФ.Регистратор,
	|	НомераЭСЧФ.Год КАК ГодИзНомера,
	|	НомераЭСЧФ.Объект КАК УНПизНомера,
	|	НомераЭСЧФ.Номер КАК НомерИзНомера,
	|	НомераЭСЧФ.Исходящий,
	|	НомераЭСЧФ.ДатаСовершенияОперации,
	|	НомераЭСЧФ.Тип,
	|	НомераЭСЧФ.Исходный,
	|	НомераЭСЧФ.ДатаАннулирования,
	|	НомераЭСЧФ.ОтобразитьПолучателю,
	|	НомераЭСЧФ.ТипБСО,
	|	НомераЭСЧФ.НомерНакладной,
	|	НомераЭСЧФ.КодБланка,
	|	НомераЭСЧФ.СерияБланка,
	|	НомераЭСЧФ.ДокументОснование КАК Документ,
	|	НомераЭСЧФ.Дата,
	|	НомераЭСЧФ.Сумма,
	|	НомераЭСЧФ.СуммаНДС,
	|	НомераЭСЧФ.Акциз,
	|	НомераЭСЧФ.КЭСЧФ,
	|	НомераЭСЧФ.ВидОперации,
	|	НомераЭСЧФ.СчетФактураПродавца,
	|	НомераЭСЧФ.Контрагент,
	|	НомераЭСЧФ.ДоговорКонтрагента,
	|	НомераЭСЧФ.НомерЭСЧФ,
	|	НомераЭСЧФ.Активность,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НомераЭСЧФ.НомерЭСЧФ, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДокумент,
	|	Квитанции.Статус,
	|	НомераДляВыгрузки.КоличествоВыгрузок,
	|	НомераДляВыгрузки.КоличествоОбновлений
	|ИЗ
	|	РегистрСведений.НомераДляВыгрузки КАК НомераДляВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Квитанции КАК Квитанции
	|			ПО НомераЭСЧФ.Год = Квитанции.Год
	|				И НомераЭСЧФ.Объект = Квитанции.Объект
	|				И НомераЭСЧФ.Номер = Квитанции.Номер
	|		ПО НомераДляВыгрузки.Номер = НомераЭСЧФ.НомерЭСЧФ
	|ГДЕ
	|	НомераДляВыгрузки.Организация = &Организация
	|	И НЕ НомераДляВыгрузки.НетДокумента
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.НомераДляВыгрузки,
	|	РегистрСведений.НомераЭСЧФ";
	
	ТекстЗапросаТоварыИзПакета = "ВЫБРАТЬ
	|	ПакетИсходящихЭСЧФТовары.СтрокаНомер КАК НомерСтроки,
	|	ПакетИсходящихЭСЧФТовары.Товар,
	|	ПакетИсходящихЭСЧФТовары.КодТНВЭДЕАЭС,
	|	ПакетИсходящихЭСЧФТовары.КодОКЭД,
	|	ПакетИсходящихЭСЧФТовары.ЕдиницаИзмерения,
	|	ПакетИсходящихЭСЧФТовары.Количество,
	|	ПакетИсходящихЭСЧФТовары.Цена,
	|	ПакетИсходящихЭСЧФТовары.Стоимость,
	|	ПакетИсходящихЭСЧФТовары.СуммаАкциза,
	|	ПакетИсходящихЭСЧФТовары.СтавкаНДС,
	|	ПакетИсходящихЭСЧФТовары.СуммаНДС,
	|	ПакетИсходящихЭСЧФТовары.СтоимостьСНДС,
	|	ПакетИсходящихЭСЧФТовары.ТипСтавкиНДС,
	|	ПакетИсходящихЭСЧФТовары.ВычетВПолномОбъеме,
	|	ПакетИсходящихЭСЧФТовары.ОсвобождениеОтНДС,
	|	ПакетИсходящихЭСЧФТовары.РеализацияЗаПределамиРБ,
	|	ПакетИсходящихЭСЧФТовары.ВвознойНДС,
	|	ПакетИсходящихЭСЧФТовары.ПроцентНДС
	|ИЗ
	|	Документ.ПакетИсходящихЭСЧФ.Товары КАК ПакетИсходящихЭСЧФТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПакетИсходящихЭСЧФ.ДокументыДляОтражения КАК ПакетИсходящихЭСЧФДокументыДляОтражения
	|		ПО ПакетИсходящихЭСЧФТовары.Ссылка = ПакетИсходящихЭСЧФДокументыДляОтражения.Ссылка
	|			И ПакетИсходящихЭСЧФТовары.КлючСтроки = ПакетИсходящихЭСЧФДокументыДляОтражения.НомерСтроки
	|ГДЕ
	|	ПакетИсходящихЭСЧФТовары.Ссылка.Ссылка = &Ссылка
	|	И ПакетИсходящихЭСЧФДокументыДляОтражения.НомерЭСЧФ = &НомерЭСЧФ";
	
	ЗапросТоварыИзПакета = Новый Запрос(ТекстЗапросаТоварыИзПакета);
	
	ЗапросДокументыИсх = Новый Запрос(ТекстЗапросаНомераИсходящихДляВыгрузки);
	
	//ТекстЗапросаСтатусыВходящихДляЗагрузки = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	//|	СтатусыДляЗагрузкиВходящие.Номер КАК НомерВх
	//|ИЗ
	//|	РегистрСведений.СтатусыДляЗагрузкиВходящие КАК СтатусыДляЗагрузкиВходящие
	//|ГДЕ
	//|	СтатусыДляЗагрузкиВходящие.Организация = &Организация
	//|
	//|ДЛЯ ИЗМЕНЕНИЯ";
	ТекстЗапросаСтатусыВходящихДляЗагрузки = "ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	СтатусыДляЗагрузкиВходящие.Номер КАК НомерВх,
	|	СтатусыДляЗагрузкиВходящие.КоличествоЗагрузок КАК КоличествоЗагрузок
	|ИЗ
	|	РегистрСведений.СтатусыДляЗагрузкиВходящие КАК СтатусыДляЗагрузкиВходящие
	|ГДЕ
	|	СтатусыДляЗагрузкиВходящие.Организация = &Организация
	|	И СтатусыДляЗагрузкиВходящие.КоличествоЗагрузок = 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ " + Формат(КоличествоДокументовВПакете, "ЧДЦ=; ЧГ=0") + "
	|	СтатусыДляЗагрузкиВходящие.Номер,
	|	СтатусыДляЗагрузкиВходящие.КоличествоЗагрузок
	|ИЗ
	|	РегистрСведений.СтатусыДляЗагрузкиВходящие КАК СтатусыДляЗагрузкиВходящие
	|ГДЕ
	|	СтатусыДляЗагрузкиВходящие.Организация = &Организация
	|	И СтатусыДляЗагрузкиВходящие.КоличествоЗагрузок <> 0
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоЗагрузок";
	
	ЗапросСтатусыВх = Новый Запрос(ТекстЗапросаСтатусыВходящихДляЗагрузки);
	
	ТекстЗапросаБлокировкаКвитанцийВходящихНомеров = "ВЫБРАТЬ
	|	ТаблицаНомеровВх.НомерВх,
	|	ТаблицаНомеровВх.Год,
	|	ТаблицаНомеровВх.Объект,
	|	ТаблицаНомеровВх.Номер
	|ПОМЕСТИТЬ врТаблицаНомеровВх
	|ИЗ
	|	&ТаблицаНомеровВх КАК ТаблицаНомеровВх
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КвитанцииВходящих.ДатаСостояния,
	|	ТаблицаНомеровВх.НомерВх
	|ИЗ
	|	врТаблицаНомеровВх КАК ТаблицаНомеровВх
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КвитанцииВходящих КАК КвитанцииВходящих
	|		ПО ТаблицаНомеровВх.Год = КвитанцииВходящих.Год
	|			И ТаблицаНомеровВх.Объект = КвитанцииВходящих.Объект
	|			И ТаблицаНомеровВх.Номер = КвитанцииВходящих.Номер
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.КвитанцииВходящих";
	
	ЗапросБлокировкиКвитанцийВх = Новый Запрос(ТекстЗапросаБлокировкаКвитанцийВходящихНомеров);
	
	ТекстЗапросаНомераВходящихДляЗагрузки = "ВЫБРАТЬ
	|	НомераДляЗагрузки.Номер КАК НомерВх,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭлектронныйСчетФактураПолученный.Ссылка, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДокумент,
	|	НомераДляЗагрузки.Ошибки
	|ИЗ
	|	РегистрСведений.НомераДляЗагрузки КАК НомераДляЗагрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
	|		ПО НомераДляЗагрузки.Номер = ЭлектронныйСчетФактураПолученный.Номер
	|ГДЕ
	|	НомераДляЗагрузки.Организация = &Организация
	|	И НомераДляЗагрузки.ДатаЗагрузки <= &ДатаВозможностиПолученияДокументов
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.НомераДляЗагрузки";
	
	ЗапросНомераВх = Новый Запрос(ТекстЗапросаНомераВходящихДляЗагрузки);
	// налоговая не будет отдавать документ по номеру, если он уже загружался в течение последних суток
	ЗапросНомераВх.УстановитьПараметр("ДатаВозможностиПолученияДокументов", ТекущаяДатаСеанса() - 24 * 60 * 60);
	
	КоличествоПопытокАвторизации = 0;
	КоличествоОрганизаций = ТаблицаОрганизацийЗагрузка.Количество();
	КоличествоНеАвторизованных = КоличествоОрганизаций;
	
	МассивНеРедактироватьСтатусы = НеРедактироватьСтатусы();
	
	// Цикл обмена данными
	
	Для каждого СтрокаОрганизации Из ТаблицаОрганизацийЗагрузка Цикл
		
		Если ОтборПоОрганизациям Тогда
			Флаги = Организации.Найти(СтрокаОрганизации.Организация, "Организация");
		КонецЕсли;
		
		Если КоличествоПопытокАвторизации = КоличествоОрганизаций И КоличествоНеАвторизованных = КоличествоОрганизаций Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): не удалось авторизоваться ни по одной организации";
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			#Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				Если ДобавлятьСобытияВЖурналРегистрации Тогда
					ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				КонецЕсли;
			#КонецЕсли
			Возврат
		КонецЕсли;
		
		КоличествоПопытокАвторизации = КоличествоПопытокАвторизации + 1;
		КоличествоНеАвторизованных = КоличествоНеАвторизованных - 1;
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 21.11.2016 14:25:14
		//ПараметрыПодключения = "PUB_KEY_ID=" + СтрокаОрганизации.ИдентификаторОткрытогоКлюча + ";COMMON_NAME=" + СтрокаОрганизации.ОбщееИмя + ";PASSWORD_KEY=" + СтрокаОрганизации.ПарольКЛичномуКлючу;
		//}Макей Евгений Владимирович 21.11.2016 14:25:14
		//{[+](фрагмент добавлен), Макей Евгений Владимирович 21.11.2016 14:25:24
		ПараметрыПодключения = ?( ЗначениеЗаполнено(СтрокаОрганизации.ИдентификаторОткрытогоКлюча), "PUB_KEY_ID=" + СтрокаОрганизации.ИдентификаторОткрытогоКлюча + ";", "" )
								+ ?( ЗначениеЗаполнено(СтрокаОрганизации.ОбщееИмя), "COMMON_NAME=" + СтрокаОрганизации.ОбщееИмя + ";", "")
								+ ?( ЗначениеЗаполнено(СтрокаОрганизации.ПарольКЛичномуКлючу), "PASSWORD_KEY=" + СтрокаОрганизации.ПарольКЛичномуКлючу + ";", "")
								+ ?( СтрокаОрганизации.ИспользоватьУНП, "UNP=" + СокрЛП(СтрокаОрганизации.Организация.ИНН), "");
		//}Макей Евгений Владимирович 21.11.2016 14:25:24
		
		// авторизация в хранилище
		СтрокаОрганизации.УспешнаяАвторизация = ( EInvVatService.Login(ПараметрыПодключения, ФлагиАвторизации()) = 0 );
		Если Не СтрокаОрганизации.УспешнаяАвторизация Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + EInvVatService.LastError;
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ЗаписьЖурналаРегистрации("EInvVatService.Login", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			#Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				Если ДобавлятьСобытияВЖурналРегистрации Тогда
					ЗаписьЖурналаРегистрации("EInvVatService.Login", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				КонецЕсли;
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		СтрокаОрганизации.УспешноеПодключение = ( EInvVatService.Connect(ПараметрыСеанса.WSurl) = 0 );
		Если Не СтрокаОрганизации.УспешноеПодключение Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " [" + ПараметрыСеанса.WSurl + "] -> " + EInvVatService.LastError;
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ЗаписьЖурналаРегистрации("EInvVatService.Connect", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			#Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				Если ДобавлятьСобытияВЖурналРегистрации Тогда
					ЗаписьЖурналаРегистрации("EInvVatService.Connect", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				КонецЕсли;
			#КонецЕсли
			Продолжить;
		КонецЕсли;
		
		Если Не ПолучитьНомера Или ОтборПоОрганизациям И Не Флаги.ПолучитьНомера Тогда
			Перейти ~ЗагрузкаДокументов;
		КонецЕсли;
		
		// Загружаем номера документов
		
		//{[-](фрагмент удален)Макей Евгений Владимирович 18.11.2016 12:17:11
		//Граница = СтрокаОрганизации.Граница + 1;
		//}Макей Евгений Владимирович 18.11.2016 12:17:11
		//{[+](фрагмент добавлен), Макей Евгений Владимирович 18.11.2016 12:17:26
		Граница = СтрокаОрганизации.Граница;
		//}Макей Евгений Владимирович 18.11.2016 12:17:26
		НоваяГраница = Неопределено;
		НомераДокументов = ПолучитьНомераВходящихДокументов(Граница, НоваяГраница);
		
		Если НомераДокументов = Неопределено Тогда
			Перейти ~ЗагрузкаДокументов;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Попытка
		//	
			Для каждого НомерВх Из НомераДокументов Цикл
				МенеджерНомера = РегистрыСведений.НомераДляЗагрузки.СоздатьМенеджерЗаписи();
				МенеджерНомера.Организация = СтрокаОрганизации.Организация;
				МенеджерНомера.Номер = НомерВх;
				МенеджерНомера.Записать(Истина);
				МенеджерСтатусы = РегистрыСведений.СтатусыДляЗагрузкиВходящие.СоздатьМенеджерЗаписи();
				МенеджерСтатусы.Организация = СтрокаОрганизации.Организация;
				МенеджерСтатусы.Номер = НомерВх;
				МенеджерСтатусы.Записать(Истина);
				СтрокаОрганизации.ЗагруженоНомеров = СтрокаОрганизации.ЗагруженоНомеров + 1;
			КонецЦикла;
			
			МенеджерГраница = РегистрыСведений.ГраницыНомеровВходящие.СоздатьМенеджерЗаписи();
			МенеджерГраница.Организация = СтрокаОрганизации.Организация;
			МенеджерГраница.Граница = НоваяГраница;
			МенеджерГраница.Записать(Истина);
			
			СтрокаОрганизации.Граница = НоваяГраница;
		//	
		//Исключение
		//	
		//	ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + ОписаниеОшибки();
		//	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		//		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//	#Иначе
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = ТекстОшибки;
		//		Сообщение.Сообщить();
		//		Если ДобавлятьСобытияВЖурналРегистрации Тогда
		//			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//		КонецЕсли;
		//	#КонецЕсли
		//	
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
		// Загружаем документы
		~ЗагрузкаДокументов:
		
		Если Не ЗагрузитьДокументы Или ОтборПоОрганизациям И Не Флаги.ЗагрузитьДокументы Тогда
			Перейти ~ЗагрузкаСтатусов
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Попытка
			
			ЗапросНомераВх.УстановитьПараметр("Организация", СтрокаОрганизации.Организация);
			ТаблицаНомеровВх = ЗапросНомераВх.Выполнить().Выгрузить();
			ТаблицаНомеровВх.Колонки.Добавить("Год");
			ТаблицаНомеровВх.Колонки.Добавить("Объект");
			ТаблицаНомеровВх.Колонки.Добавить("Номер");
			
			//МассивДокументовДляЗагрузкиВх = Новый Массив;
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ТаблицаЗагруженныхДокументовВх = ЭСЧФсервер.ТаблицаДанныхЗагрузкиДокументовСПортала();
				ТаблицаЗагруженныхДокументовВхОшибки = ЭСЧФсервер.ТаблицаДанныхЗагрузкиДокументовСПортала();
			#Иначе
				ТаблицаЗагруженныхДокументовВх = ЭСЧФклиент.ТаблицаДанныхЗагрузкиДокументовСПортала();
				ТаблицаЗагруженныхДокументовВхОшибки = ЭСЧФклиент.ТаблицаДанныхЗагрузкиДокументовСПортала();
			#КонецЕсли
				
			Для каждого СтрокаНомераВх Из ТаблицаНомеровВх Цикл
				
				НомерЭСЧФ = СтрокаНомераВх.НомерВх;
				СтрокаНомераВх.Объект = Лев(НомерЭСЧФ, 9);
				СтрокаНомераВх.Год    = Число(Сред(НомерЭСЧФ, 11, 4));
				СтрокаНомераВх.Номер  = Число(Прав(НомерЭСЧФ, 10));
				
				// Если документ уже загружен, то удаляем запись о необходимости загрузки документа
				Если СтрокаНомераВх.ЕстьДокумент И Не СтрокаНомераВх.Ошибки Тогда
					МенеджерНомераВх = РегистрыСведений.НомераДляЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерНомераВх.Организация = СтрокаОрганизации.Организация;
					МенеджерНомераВх.Номер = НомерЭСЧФ;
					МенеджерНомераВх.Удалить()
				ИначеЕсли СтрокаНомераВх.Ошибки = Истина Тогда
					НоваяСтрока = ТаблицаЗагруженныхДокументовВхОшибки.Добавить();
					НоваяСтрока.Номер = НомерЭСЧФ;
				Иначе // иначе добавляем для загрузки с портала
					НоваяСтрока = ТаблицаЗагруженныхДокументовВх.Добавить();
					НоваяСтрока.Номер = НомерЭСЧФ;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаЗагруженныхДокументовВх.Количество() Тогда
				лДатаПолученияНомеров = ТекущаяДатаСеанса() + 10;
				ЗагрузитьЭлектронныеДокументы(ТаблицаЗагруженныхДокументовВх, СтрокаОрганизации.Организация,,,,,,, Ошибки);
				// удаляем записи загруженных документов
				Для каждого ЗагруженныйДокументВх Из ТаблицаЗагруженныхДокументовВх Цикл
					// если документ не загружен, то не удаляем запись
					МенеджерНомераВх = РегистрыСведений.НомераДляЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерНомераВх.Организация = СтрокаОрганизации.Организация;
					МенеджерНомераВх.Номер = ЗагруженныйДокументВх.Номер;
					// если не удалось загрузить эл. документ или сохранить документ счета-фактуры в базе, тогда отражаем информацию о времени обмена
					Если Не ( ЗначениеЗаполнено(ЗагруженныйДокументВх.ВходящийДокумент) И ЗначениеЗаполнено(ЗагруженныйДокументВх.ДокументОбмена) ) Тогда
						МенеджерНомераВх.ДатаЗагрузки = лДатаПолученияНомеров;
						МенеджерНомераВх.Записать(Истина);
					Иначе
						МенеджерНомераВх.Удалить();
						СтрокаОрганизации.ЗагруженоДокументов = СтрокаОрганизации.ЗагруженоДокументов + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТаблицаЗагруженныхДокументовВхОшибки.Количество() Тогда
				лДатаПолученияНомеров = ТекущаяДатаСеанса() + 10;
				ЗагрузитьЭлектронныеДокументы(ТаблицаЗагруженныхДокументовВхОшибки, СтрокаОрганизации.Организация, Истина,,,,,, Ошибки);
				// удаляем записи загруженных документов
				Для каждого ЗагруженныйДокументВх Из ТаблицаЗагруженныхДокументовВхОшибки Цикл
					// если документ не загружен, то не удаляем запись
					МенеджерНомераВх = РегистрыСведений.НомераДляЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерНомераВх.Организация = СтрокаОрганизации.Организация;
					МенеджерНомераВх.Номер = ЗагруженныйДокументВх.Номер;
					// если не удалось загрузить эл. документ или сохранить документ счета-фактуры в базе, тогда отражаем информацию о времени обмена
					Если Не ( ЗначениеЗаполнено(ЗагруженныйДокументВх.ВходящийДокумент) И ЗначениеЗаполнено(ЗагруженныйДокументВх.ДокументОбмена) ) Тогда
						МенеджерНомераВх.ДатаЗагрузки = лДатаПолученияНомеров;
						МенеджерНомераВх.Записать(Истина);
					Иначе
						МенеджерНомераВх.Удалить();
						СтрокаОрганизации.ЗагруженоДокументов = СтрокаОрганизации.ЗагруженоДокументов + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		//Исключение
		//	
		//	ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + ОписаниеОшибки();
		//	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		//		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//	#Иначе
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = ТекстОшибки;
		//		Сообщение.Сообщить();
		//		Если ДобавлятьСобытияВЖурналРегистрации Тогда
		//			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//		КонецЕсли;
		//	#КонецЕсли
		//	
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
		// загрузка статусов входящих документов
		~ЗагрузкаСтатусов:
		
		Если Не ЗагрузитьСтатусы Или ОтборПоОрганизациям И Не Флаги.ЗагрузитьСтатусы Тогда
			Перейти ~ПодтверждениеДокументов;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Попытка
			
			ЗапросСтатусыВх.УстановитьПараметр("Организация", СтрокаОрганизации.Организация);
			ТаблицаСтатусовВх = ЗапросСтатусыВх.Выполнить().Выгрузить();
			ТаблицаСтатусовВх.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0,ДопустимыйЗнак.Неотрицательный)));
			ТаблицаСтатусовВх.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная)));
			ТаблицаСтатусовВх.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
			
			Для каждого СтрокаСтатусаВх Из ТаблицаСтатусовВх Цикл
				
				НомерЭСЧФ = СтрокаСтатусаВх.НомерВх;
				СтрокаСтатусаВх.Объект = Лев(НомерЭСЧФ, 9);
				СтрокаСтатусаВх.Год    = Число(Сред(НомерЭСЧФ, 11, 4));
				СтрокаСтатусаВх.Номер  = Число(Прав(НомерЭСЧФ, 10));
				
			КонецЦикла;
			
			ЗапросБлокировкиКвитанцийВх.УстановитьПараметр("ТаблицаНомеровВх", ТаблицаСтатусовВх);
			ЗапросБлокировкиКвитанцийВх.Выполнить();
			
			Для каждого СтрокаСтатусаВх Из ТаблицаСтатусовВх Цикл
				
				// с 01.11.2016 нужно проверять статус, т.к. добавлен "В разработке" и его нужно будет обновить позже
				Статус = Неопределено;
				Успех = ОбновитьДанныеОСтатусеДокумента(СтрокаСтатусаВх.НомерВх,, СтрокаОрганизации.Граница, Статус,, Ошибки,,,, Ложь);
				
				Если Успех И Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработке") Тогда
					МенеджерСтатусаВх = РегистрыСведений.СтатусыДляЗагрузкиВходящие.СоздатьМенеджерЗаписи();
					МенеджерСтатусаВх.Организация = СтрокаОрганизации.Организация;
					МенеджерСтатусаВх.Номер = СтрокаСтатусаВх.НомерВх;
					МенеджерСтатусаВх.Удалить();
					СтрокаОрганизации.ЗагруженоСтатусов = СтрокаОрганизации.ЗагруженоСтатусов + 1;
				ИначеЕсли Успех Тогда
					МенеджерСтатусаВх = РегистрыСведений.СтатусыДляЗагрузкиВходящие.СоздатьМенеджерЗаписи();
					МенеджерСтатусаВх.Организация = СтрокаОрганизации.Организация;
					МенеджерСтатусаВх.Номер = СтрокаСтатусаВх.НомерВх;
					МенеджерСтатусаВх.КоличествоЗагрузок = СтрокаСтатусаВх.КоличествоЗагрузок + 1;
					МенеджерСтатусаВх.Записать(Истина);
					СтрокаОрганизации.ЗагруженоСтатусов = СтрокаОрганизации.ЗагруженоСтатусов + 1;
				КонецЕсли
				
			КонецЦикла;
			
		//Исключение
		//	
		//	ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + ОписаниеОшибки();
		//	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		//		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//	#Иначе
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = ТекстОшибки;
		//		Сообщение.Сообщить();
		//		Если ДобавлятьСобытияВЖурналРегистрации Тогда
		//			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//		КонецЕсли;
		//	#КонецЕсли
		//	
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
		// Подтверждение входящих документов
		~ПодтверждениеДокументов:
		
		Если Не ПодтвердитьДокументы Или ОтборПоОрганизациям И Не Флаги.ПодтвердитьДокументы Тогда
			Перейти ~ВыгрузкаДокументов;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Попытка
			
			ЗапросНомераДляПодтверждения.УстановитьПараметр("Организация", СтрокаОрганизации.Организация);
			
			ВыборкаНомеровДляПодтверждения = ЗапросНомераДляПодтверждения.Выполнить().Выбрать();
			
			ТекДата = ТекущаяДатаСеанса();
			
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ТаблицаНомеровДляПодтверждения = ЭСЧФсервер.ТаблицаДанныхПодтвержденияДокументов();
			#Иначе
				ТаблицаНомеровДляПодтверждения = ЭСЧФклиент.ТаблицаДанныхПодтвержденияДокументов();
			#КонецЕсли
			ТаблицаНомеровДляПодтверждения.Колонки.Добавить("Номер");
			ТаблицаНомеровДляПодтверждения.Колонки.Добавить("КоличествоОбработок");
			
			Пока ВыборкаНомеровДляПодтверждения.Следующий() Цикл
				
				Если ВыборкаНомеровДляПодтверждения.НетДокумента Или ВыборкаНомеровДляПодтверждения.НетДанных Тогда
					МенеджерЗаписиНомеровДляПодтверждения = РегистрыСведений.НомераДляПодтверждения.СоздатьМенеджерЗаписи();
					МенеджерЗаписиНомеровДляПодтверждения.Организация  = СтрокаОрганизации.Организация;
					МенеджерЗаписиНомеровДляПодтверждения.Номер        = ВыборкаНомеровДляПодтверждения.Номер;
					МенеджерЗаписиНомеровДляПодтверждения.НетДокумента = ВыборкаНомеровДляПодтверждения.НетДокумента;
					МенеджерЗаписиНомеровДляПодтверждения.НетДанных    = ВыборкаНомеровДляПодтверждения.НетДанных;
					МенеджерЗаписиНомеровДляПодтверждения.КоличествоОбработок = ВыборкаНомеровДляПодтверждения.КоличествоОбработок + 1;
					МенеджерЗаписиНомеровДляПодтверждения.Записать(Истина);
				Иначе
					НоваяСтрока = ТаблицаНомеровДляПодтверждения.Добавить();
					НоваяСтрока.ДокументОбмена = ВыборкаНомеровДляПодтверждения.ЭлектронныйДокумент;
					НоваяСтрока.Ссылка = ВыборкаНомеровДляПодтверждения.Ссылка;
					НоваяСтрока.Номер = ВыборкаНомеровДляПодтверждения.Номер;
					НоваяСтрока.КоличествоОбработок = ВыборкаНомеровДляПодтверждения.КоличествоОбработок;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТаблицаНомеровДляПодтверждения.Количество() Тогда
				
				ПодписатьИОтправитьДокументыОбмена(ТаблицаНомеровДляПодтверждения,,, Ошибки);
				
				Для каждого СтрокаНомера Из ТаблицаНомеровДляПодтверждения Цикл
					
					Если Не ( СтрокаНомера.Отправлен И СтрокаНомера.Принят ) Тогда
						МенеджерЗаписиНомеровДляПодтверждения = РегистрыСведений.НомераДляПодтверждения.СоздатьМенеджерЗаписи();
						МенеджерЗаписиНомеровДляПодтверждения.Организация       = СтрокаОрганизации.Организация;
						МенеджерЗаписиНомеровДляПодтверждения.Номер             = СтрокаНомера.Номер;
						МенеджерЗаписиНомеровДляПодтверждения.НеУдачнаяОтправка = ( Не СтрокаНомера.Отправлен );
						МенеджерЗаписиНомеровДляПодтверждения.НеПринятСервисом  = ( Не СтрокаНомера.Принят );
						МенеджерЗаписиНомеровДляПодтверждения.ОшибкаФайла       = СтрокаНомера.ОшибкаФайла;
						МенеджерЗаписиНомеровДляПодтверждения.КоличествоОбработок = СтрокаНомера.КоличествоОбработок + 1;
						МенеджерЗаписиНомеровДляПодтверждения.Записать(Истина);
						СтрокаОрганизации.ОшибкиПодтверждения = ( СтрокаОрганизации.ОшибкиПодтверждения Или СтрокаНомера.ОшибкаФайла Или Не СтрокаНомера.Отправлен Или Не СтрокаНомера.Принят );
					Иначе
						МенеджерЗаписиНомеровДляПодтверждения = РегистрыСведений.НомераДляПодтверждения.СоздатьМенеджерЗаписи();
						МенеджерЗаписиНомеровДляПодтверждения.Организация       = СтрокаОрганизации.Организация;
						МенеджерЗаписиНомеровДляПодтверждения.Номер             = СтрокаНомера.Номер;
						МенеджерЗаписиНомеровДляПодтверждения.Удалить();
						СтрокаОрганизации.ПодтвержденоДокументов = СтрокаОрганизации.ПодтвержденоДокументов + 1;
					КонецЕсли;
					ОтразитьВыставлениеДокумента(СтрокаНомера.Ссылка, ТекДата, СтрокаНомера.Номер,,,, СтрокаНомера.ПодписанныйДокумент, Ложь, СтрокаНомера.Принят, СтрокаНомера.Ответ);
					
				КонецЦикла;
				
			КонецЕсли;
						
		//Исключение
		//	
		//	ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + ОписаниеОшибки();
		//	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		//		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//	#Иначе
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = ТекстОшибки;
		//		Сообщение.Сообщить();
		//		Если ДобавлятьСобытияВЖурналРегистрации Тогда
		//			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//		КонецЕсли;
		//	#КонецЕсли
		//	
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
		// Выгрузка исходящих документов
		~ВыгрузкаДокументов:
		
		Если Не ВыгрузитьДокументы Или ОтборПоОрганизациям И Не Флаги.ВыгрузитьДокументы Тогда
			Перейти ~ЗагрузкаСтатусовИсх;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Попытка
			
			ЗапросДокументыИсх.УстановитьПараметр("Организация", СтрокаОрганизации.Организация);
			
			ВыборкаДокументовИсх = ЗапросДокументыИсх.Выполнить().Выбрать();
			
			лДатаВыставления = ТекущаяДатаСеанса();
			
			Пока ВыборкаДокументовИсх.Следующий() Цикл
				
				// если данные ЭСЧФ не обновлялись с последней выгрузки, то пропускаем документ
				Если ВыборкаДокументовИсх.КоличествоВыгрузок >= ВыборкаДокументовИсх.КоличествоОбновлений Тогда
					Продолжить;
				КонецЕсли;
				
				Если Не ВыборкаДокументовИсх.ЕстьДокумент Тогда
					
					МенеджерЗаписиНомераДляВыгрузки = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписиНомераДляВыгрузки.Организация = СтрокаОрганизации.Организация;
					МенеджерЗаписиНомераДляВыгрузки.Номер = ВыборкаДокументовИсх.Номер;
					МенеджерЗаписиНомераДляВыгрузки.КоличествоВыгрузок = ВыборкаДокументовИсх.КоличествоВыгрузок + 1;
					МенеджерЗаписиНомераДляВыгрузки.КоличествоОбновлений = ВыборкаДокументовИсх.КоличествоОбновлений;
					МенеджерЗаписиНомераДляВыгрузки.НетДокумента = Истина;
					МенеджерЗаписиНомераДляВыгрузки.Записать(Истина);
					Продолжить;
					
				ИначеЕсли МассивНеРедактироватьСтатусы.Найти(ВыборкаДокументовИсх.Статус) <> Неопределено Тогда
					
					// если документ на согласовании, то статус будет изменён и просто пропускаем его
					Если ВыборкаДокументовИсх.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании") Тогда
						Продолжить;
					КонецЕсли;
					
					МенеджерЗаписиНомераДляВыгрузки = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписиНомераДляВыгрузки.Организация = СтрокаОрганизации.Организация;
					МенеджерЗаписиНомераДляВыгрузки.Номер = ВыборкаДокументовИсх.Номер;
					МенеджерЗаписиНомераДляВыгрузки.Удалить();
					
					Продолжить;
					
				КонецЕсли;
				
				// заполняем структуру данными полей
				ЭтоДокумент = ( ТипЗнч(ВыборкаДокументовИсх.Регистратор) = Тип("ДокументСсылка.ЭлектронныйСчетФактураВыданный") );
				Если ЭтоДокумент Тогда
					
					Объект = ВыборкаДокументовИсх.Регистратор;
					Товары = ВыборкаДокументовИсх.Регистратор.Товары;
					Грузоотправители = Объект.Грузоотправители;
					Грузополучатели  = Объект.Грузополучатели;
					ДокументыПодтверждающиеПоставку = Объект.ДокументыПодтверждающиеПоставку;
					
				Иначе
					
					Объект = Новый Структура;
					ЗаполнитьСтруктуруПолейЭСЧФ(Объект, ВыборкаДокументовИсх.Тип);
					Объект.Вставить("НомерЭСЧФ",                  ВыборкаДокументовИсх.НомерЭСЧФ);
					Объект.Вставить("ДатаСовершенияОперацииЭСЧФ", ВыборкаДокументовИсх.ДатаСовершенияОперации);
					Объект.Вставить("ТипЭСЧФ",                    ВыборкаДокументовИсх.Тип);
					Объект.Вставить("КЭСЧФ",                      ВыборкаДокументовИсх.КЭСЧФ);
					Объект.Вставить("ОтобразитьПолучателю",       ВыборкаДокументовИсх.ОтобразитьПолучателю);
					Объект.Вставить("ДатаАннулированияЭСЧФ",      ВыборкаДокументовИсх.ДатаАннулирования);
					Если ЗначениеЗаполнено(ВыборкаДокументовИсх.СчетФактураПродавца) Тогда
						Объект.Вставить("ПоставщикНомерСчетаПродавца",       ВыборкаДокументовИсх.СчетФактураПродавца.Номер);
						Объект.Вставить("ПоставщикДатаВыпискиПродавца",      ВыборкаДокументовИсх.СчетФактураПродавца.ДатаСовершенияОперацииЭСЧФ);
					КонецЕсли;
					ЗапросТоварыИзПакета.УстановитьПараметр("Ссылка", ВыборкаДокументовИсх.Регистратор);
					ЗапросТоварыИзПакета.УстановитьПараметр("НомерЭСЧФ", ВыборкаДокументовИсх.Номер);
					Товары = ЗапросТоварыИзПакета.Выполнить().Выгрузить();
					Если ВыборкаДокументовИсх.КодБланка = ПредопределенноеЗначение("Справочник.ТипыБСО.ТТН1") Тогда
						Грузоотправители = ПолучитьТаблицуГрузоотправителиГрузополучателиЭСЧФ();
						Грузополучатели  = ПолучитьТаблицуГрузоотправителиГрузополучателиЭСЧФ(Ложь);
						ДобавитьГрузоотправителяГрузополучателя(Объект, Грузоотправители, Грузополучатели, ВыборкаДокументовИсх.Исходящий)
					КонецЕсли;
					ПолучитьЗначенияПолей(ВыборкаДокументовИсх.Документ, Объект, ВыборкаДокументовИсх.Контрагент, ВыборкаДокументовИсх.ДоговорКонтрагента, ВыборкаДокументовИсх.Исходящий, СделкаСТоварамиПоПеречнюУказа287(Товары));
					ДокументыПодтверждающиеПоставку = ПолучитьТаблицуДокументовПоставкиЭСЧФ();
					ДобавитьДокументПоставки(ВыборкаДокументовИсх.Документ, ДокументыПодтверждающиеПоставку, ВыборкаДокументовИсх.КодБланка, ВыборкаДокументовИсх.НомерНакладной, ВыборкаДокументовИсх.СерияБланка, ВыборкаДокументовИсх.Исходящий, ВыборкаДокументовИсх.ТипБСО, ВыборкаДокументовИсх.Дата);
					
				КонецЕсли;
				
				ДокументНеСоответствуетПротоколу = Ложь;
				ЭСЧФСоответствуетПротоколу(Объект, СокрЛП(СтрокаОрганизации.Организация.ИНН), Товары, Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, ВыборкаДокументовИсх.Исходящий,, ДокументНеСоответствуетПротоколу);
				
				Если ДокументНеСоответствуетПротоколу Тогда
					МенеджерЗаписиНомераДляВыгрузки = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписиНомераДляВыгрузки.Организация = СтрокаОрганизации.Организация;
					МенеджерЗаписиНомераДляВыгрузки.Номер = ВыборкаДокументовИсх.Номер;
					МенеджерЗаписиНомераДляВыгрузки.КоличествоВыгрузок = ВыборкаДокументовИсх.КоличествоВыгрузок + 1;
					МенеджерЗаписиНомераДляВыгрузки.КоличествоОбновлений = ВыборкаДокументовИсх.КоличествоОбновлений;
					МенеджерЗаписиНомераДляВыгрузки.НеСоответствуетПротоколу = Истина;
					МенеджерЗаписиНомераДляВыгрузки.Записать(Истина);
					Продолжить;
				КонецЕсли;
				
				НеУдачнаяОтправка = Ложь;
				ДокументПринят = Ложь;
				Ответ = "";
				СформироватьПодписатьОтправитьДокумент(Объект, НеУдачнаяОтправка, Ошибки,, СокрЛП(СтрокаОрганизации.Организация.ИНН), Товары, Грузоотправители, Грузополучатели, ДокументыПодтверждающиеПоставку, ВыборкаДокументовИсх.Исходящий, ДокументПринят, Ответ);
				
				Если НеУдачнаяОтправка Или Не ДокументПринят Тогда
					МенеджерЗаписиНомераДляВыгрузки = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписиНомераДляВыгрузки.Организация = СтрокаОрганизации.Организация;
					МенеджерЗаписиНомераДляВыгрузки.Номер = ВыборкаДокументовИсх.Номер;
					МенеджерЗаписиНомераДляВыгрузки.КоличествоВыгрузок = ВыборкаДокументовИсх.КоличествоВыгрузок + 1;
					МенеджерЗаписиНомераДляВыгрузки.КоличествоОбновлений = ВыборкаДокументовИсх.КоличествоОбновлений;
					МенеджерЗаписиНомераДляВыгрузки.НеУдачнаяОтправка = НеУдачнаяОтправка;
					МенеджерЗаписиНомераДляВыгрузки.НеПринятСервисом = ( Не ДокументПринят );
					МенеджерЗаписиНомераДляВыгрузки.Записать(Истина);
				Иначе
					МенеджерЗаписиНомераДляВыгрузки = РегистрыСведений.НомераДляВыгрузки.СоздатьМенеджерЗаписи();
					МенеджерЗаписиНомераДляВыгрузки.Организация = СтрокаОрганизации.Организация;
					МенеджерЗаписиНомераДляВыгрузки.Номер = ВыборкаДокументовИсх.Номер;
					МенеджерЗаписиНомераДляВыгрузки.Удалить();
					СтрокаОрганизации.ВыгруженоДокументов = СтрокаОрганизации.ВыгруженоДокументов + 1;
				КонецЕсли;
				ОтразитьВыставлениеДокумента(ВыборкаДокументовИсх.Документ, лДатаВыставления,, ВыборкаДокументовИсх.ГодИзНомера, ВыборкаДокументовИсх.УНПИзНомера, ВыборкаДокументовИсх.НомерИзНомера,, Истина, ДокументПринят, Ответ);
				
			КонецЦикла;
			
		//Исключение
		//	
		//	ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + ОписаниеОшибки();
		//	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		//		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//	#Иначе
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = ТекстОшибки;
		//		Сообщение.Сообщить();
		//		Если ДобавлятьСобытияВЖурналРегистрации Тогда
		//			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//		КонецЕсли;
		//	#КонецЕсли
		//	
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
		// Выгрузка исходящих документов
		~ЗагрузкаСтатусовИсх:
		
		Если Не ЗагрузитьСтатусыИсходящих Или ОтборПоОрганизациям И Не Флаги.ЗагрузитьСтатусыИсходящих Тогда
			Перейти ~КонецЦиклаЗагрузки;
		КонецЕсли;
		
		//НачатьТранзакцию();
		//
		//Попытка
			
			ЗапросСтатусыИсх.УстановитьПараметр("Организация", СтрокаОрганизации.Организация);
			ТаблицаСтатусовИсх = ЗапросСтатусыИсх.Выполнить().Выгрузить();
			ТаблицаСтатусовИсх.Колонки.Добавить("Год", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4,0,ДопустимыйЗнак.Неотрицательный)));
			ТаблицаСтатусовИсх.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9,ДопустимаяДлина.Фиксированная)));
			ТаблицаСтатусовИсх.Колонки.Добавить("Номер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
			
			Для каждого СтрокаСтатусаИсх Из ТаблицаСтатусовИсх Цикл
				
				НомерЭСЧФ = СтрокаСтатусаИсх.НомерИсх;
				СтрокаСтатусаИсх.Объект = Лев(НомерЭСЧФ, 9);
				СтрокаСтатусаИсх.Год    = Число(Сред(НомерЭСЧФ, 11, 4));
				СтрокаСтатусаИсх.Номер  = Число(Прав(НомерЭСЧФ, 10));
				
			КонецЦикла;
			
			ЗапросБлокировкиКвитанцийИсх.УстановитьПараметр("ТаблицаНомеровИсх", ТаблицаСтатусовИсх);
			ЗапросБлокировкиКвитанцийИсх.Выполнить();
			
			Для каждого СтрокаСтатусаИсх Из ТаблицаСтатусовИсх Цикл
				
				// с 01.11.2016 нужно проверять статус, т.к. добавлен "В разработке" и его нужно будет обновить позже
				Статус = Неопределено;
				Успех = ОбновитьДанныеОСтатусеДокумента(СтрокаСтатусаИсх.НомерИсх,, СтрокаОрганизации.Граница, Статус,, Ошибки,,,, Истина);
				
				Если Успех И Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработке") Тогда
					МенеджерСтатусаИсх = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерСтатусаИсх.Организация = СтрокаОрганизации.Организация;
					МенеджерСтатусаИсх.Номер = СтрокаСтатусаИсх.НомерИсх;
					МенеджерСтатусаИсх.Удалить();
					СтрокаОрганизации.ЗагруженоСтатусовИсходящих = СтрокаОрганизации.ЗагруженоСтатусовИсходящих + 1;
				ИначеЕсли Успех Тогда
					МенеджерСтатусаИсх = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
					МенеджерСтатусаИсх.Организация = СтрокаОрганизации.Организация;
					МенеджерСтатусаИсх.Номер = СтрокаСтатусаИсх.НомерИсх;
					МенеджерСтатусаИсх.КоличествоЗагрузок = СтрокаСтатусаИсх.КоличествоЗагрузок + 1;
					МенеджерСтатусаИсх.Записать(Истина);
					СтрокаОрганизации.ЗагруженоСтатусовИсходящих = СтрокаОрганизации.ЗагруженоСтатусовИсходящих + 1;
				КонецЕсли
				
			КонецЦикла;
			
		//Исключение
		//	
		//	ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + ОписаниеОшибки();
		//	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		//		ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//	#Иначе
		//		Сообщение = Новый СообщениеПользователю;
		//		Сообщение.Текст = ТекстОшибки;
		//		Сообщение.Сообщить();
		//		Если ДобавлятьСобытияВЖурналРегистрации Тогда
		//			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		//		КонецЕсли;
		//	#КонецЕсли
		//	
		//КонецПопытки;
		//
		//ЗафиксироватьТранзакцию();
		
		~КонецЦиклаЗагрузки:
		// завершение поключения к сервису
		EInvVatConnected = ( EInvVatService.Disconnect <> 0 );
		Если EInvVatConnected Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " [" + ПараметрыСеанса.WSurl + "] -> " + EInvVatService.LastError;
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ЗаписьЖурналаРегистрации("EInvVatService.Disconnect", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			#Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				Если ДобавлятьСобытияВЖурналРегистрации Тогда
					ЗаписьЖурналаРегистрации("EInvVatService.Disconnect", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
		// завершение авторизации
		EInvVatAuthorized = ( EInvVatService.Logout <> 0 );
		Если EInvVatAuthorized Тогда
			ТекстОшибки = "ЭСЧФобщий.ВыполнитьОбменДаннымиСПорталом(): " + СтрокаОрганизации.Организация + " -> " + EInvVatService.LastError;
			#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
				ЗаписьЖурналаРегистрации("EInvVatService.Logout", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			#Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				Если ДобавлятьСобытияВЖурналРегистрации Тогда
					ЗаписьЖурналаРегистрации("EInvVatService.Logout", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
				КонецЕсли;
			#КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	~ВыходИзПроцедуры:
	// удалим лишние колонки из таблицы организаций
	ТаблицаОрганизацийЗагрузка.Колонки.Удалить("ИдентификаторОткрытогоКлюча");
	ТаблицаОрганизацийЗагрузка.Колонки.Удалить("ОбщееИмя");
	ТаблицаОрганизацийЗагрузка.Колонки.Удалить("ПарольКЛичномуКлючу");

КонецПроцедуры //ВыполнитьОбменДаннымиСПорталом

////////////////////////////////////////////////////////////////////////////////
//
// Функция НеРедактироватьСтатусы
//
// Описание:
//  возвращает массив статусов документов, которые нет возможности редактировать
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//  Массив (ПеречислениеСсылка.СтатусыЭСЧФ) - статусы документов, которые нет возможности редактировать
//
Функция НеРедактироватьСтатусы() Экспорт
	
	МассивНеРедактироватьСтатусы = Новый Массив;
	// с 01.11.2016 этот статус сигнализирует, что пройден первый этап проверки и документ ожидает сверки реквизитов
	МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВРазработке"));
	МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Аннулирован"));
	МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Выставлен"));
	МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленАннулированПоставшиком"));
	МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.ВыставленПодписанПолучателем"));
	МассивНеРедактироватьСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.НаСогласовании"));
	
	Возврат МассивНеРедактироватьСтатусы
	
КонецФункции //НеРедактироватьСтатусы

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ОтразитьНомераДляПолученияСтатусовПоУсловиюДатыОтражения
//
// Описание:
//  проверят нужно ли обновить статусы по документам и добавляет сведения в регистры
//  автоматического обмена
//
// Параметры (название, тип, дифференцированное значение)
//  Организация - СправочникСсылка.Организации - организация для поиска
//  Исходящие - Булево - искать по исходящим документам
//  Входящие - Булево - искать по входящим документам
//
Процедура ОтразитьНомераДляПолученияСтатусовПоУсловиюДатыОтражения( Организация = Неопределено, Исходящие = Истина, Входящие = Истина ) Экспорт

	Если Исходящие Тогда
		
		ТекстИсх = "ВЫБРАТЬ
		|	НомераЭСЧФ.Регистратор.Организация КАК Организация,
		|	НомераЭСЧФ.НомерЭСЧФ КАК Номер
		|ИЗ
		|	РегистрСведений.ВыставленныеДокументы КАК ВыставленныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Квитанции КАК Квитанции
		|		ПО ВыставленныеДокументы.Год = Квитанции.Год
		|			И ВыставленныеДокументы.Объект = Квитанции.Объект
		|			И ВыставленныеДокументы.Номер = Квитанции.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДляЗагрузки КАК СтатусыДляЗагрузки
		|			ПО НомераЭСЧФ.Регистратор.Организация = СтатусыДляЗагрузки.Организация
		|				И НомераЭСЧФ.НомерЭСЧФ = СтатусыДляЗагрузки.Номер
		|		ПО ВыставленныеДокументы.Год = НомераЭСЧФ.Год
		|			И ВыставленныеДокументы.Объект = НомераЭСЧФ.Объект
		|			И ВыставленныеДокументы.Номер = НомераЭСЧФ.Номер
		|ГДЕ
		|	(Квитанции.Статус ЕСТЬ NULL 
		|			ИЛИ ВыставленныеДокументы.ДатаВыставления >= Квитанции.ДатаОтражения)
		|	И СтатусыДляЗагрузки.Номер ЕСТЬ NULL" + ?(Организация <> Неопределено, " И НомераЭСЧФ.Регистратор.Организация = &Организация", "");
		ЗапросИсх = Новый Запрос(ТекстИсх);
		ЗапросИсх.УстановитьПараметр("Организация", Организация);
		
		РезультатИсх = ЗапросИсх.Выполнить();
		Если РезультатИсх.Пустой() Тогда
			Перейти ~Входящие;
		КонецЕсли;
		
		ВыборкаИсх = РезультатИсх.Выбрать();
		Пока ВыборкаИсх.Следующий() Цикл
			МенеджерИсх = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерИсх, ВыборкаИсх);
			МенеджерИсх.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	~Входящие:
	Если Входящие Тогда
		
		ТекстВх = "ВЫБРАТЬ
		|	НомераЭСЧФ.Организация КАК Организация,
		|	НомераЭСЧФ.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.ВыставленныеДокументыВходящие КАК ВыставленныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КвитанцииВходящих КАК Квитанции
		|		ПО ВыставленныеДокументы.Год = Квитанции.Год
		|			И ВыставленныеДокументы.Объект = Квитанции.Объект
		|			И ВыставленныеДокументы.Номер = Квитанции.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК НомераЭСЧФ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДляЗагрузкиВходящие КАК СтатусыДляЗагрузки
		|			ПО НомераЭСЧФ.Организация = СтатусыДляЗагрузки.Организация
		|				И НомераЭСЧФ.Номер = СтатусыДляЗагрузки.Номер
		|		ПО ВыставленныеДокументы.Год = НомераЭСЧФ.НомерГод
		|			И ВыставленныеДокументы.Объект = НомераЭСЧФ.НомерОбъект
		|			И ВыставленныеДокументы.Номер = НомераЭСЧФ.НомерНомер
		|ГДЕ
		|	(Квитанции.Статус ЕСТЬ NULL 
		|			ИЛИ ВыставленныеДокументы.ДатаВыставления >= Квитанции.ДатаОтражения)
		|	И СтатусыДляЗагрузки.Номер ЕСТЬ NULL" + ?(Организация <> Неопределено, " И НомераЭСЧФ.Организация = &Организация", "");
		ЗапросВх = Новый Запрос(ТекстВх);
		ЗапросВх.УстановитьПараметр("Организация", Организация);
		
		РезультатВх = ЗапросВх.Выполнить();
		Если Не РезультатВх.Пустой() Тогда
			ВыборкаВх = РезультатВх.Выбрать();
			Пока ВыборкаВх.Следующий() Цикл
				МенеджерВх = РегистрыСведений.СтатусыДляЗагрузкиВходящие.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерВх, ВыборкаВх);
				МенеджерВх.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ОтразитьНомераДляПолученияСтатусовПоУсловиюДатыОтражения

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ОтразитьНомераДляПолученияСтатусовПоУсловиюАннулированияИсходногоИИсправленного
//
// Описание:
//  проверят нужно ли обновить статусы по документам и добавляет сведения в регистры
//  автоматического обмена
//
// Параметры (название, тип, дифференцированное значение)
//  Организация - СправочникСсылка.Организации - организация для поиска
//  Исходящие - Булево - искать по исходящим документам
//  Входящие - Булево - искать по входящим документам
//
Процедура ОтразитьНомераДляПолученияСтатусовПоУсловиюАннулированияИсходногоИИсправленного( Организация = Неопределено, Исходящие = Истина, Входящие = Истина ) Экспорт

	Аннулирован = ПредопределенноеЗначение("Перечисление.СтатусыЭСЧФ.Аннулирован");
	ТипыИсходногоЭСЧФ = Новый Массив;
	ТипыИсходногоЭСЧФ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный"));
	ТипыИсходногоЭСЧФ.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный"));
	
	Если Исходящие Тогда
		
		ТекстИсх = "ВЫБРАТЬ
		|	НомераЭСЧФ1.Регистратор.Организация КАК Организация,
		|	НомераЭСЧФ1.НомерЭСЧФ КАК Номер
		|ИЗ
		|	РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Квитанции КАК Квитанции
		|		ПО НомераЭСЧФ.Год = Квитанции.Год
		|			И НомераЭСЧФ.Объект = Квитанции.Объект
		|			И НомераЭСЧФ.Номер = Квитанции.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НомераЭСЧФ КАК НомераЭСЧФ1
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Квитанции КАК Квитанции1
		|			ПО НомераЭСЧФ1.Год = Квитанции1.Год
		|				И НомераЭСЧФ1.Объект = Квитанции1.Объект
		|				И НомераЭСЧФ1.Номер = Квитанции1.Номер
		|		ПО НомераЭСЧФ.Номер = НомераЭСЧФ1.КЭСЧФ
		|ГДЕ
		|	Квитанции.Статус = &Аннулирован
		|	И НомераЭСЧФ.Тип В(&ТипыИсходногоЭСЧФ)
		|	И Квитанции1.Статус <> &Аннулирован
		|	И НЕ НомераЭСЧФ1.Тип В (&ТипыИсходногоЭСЧФ)" + ?(Организация <> Неопределено, " И НомераЭСЧФ.Регистратор.Организация = &Организация", "");
		ЗапросИсх = Новый Запрос(ТекстИсх);
		ЗапросИсх.УстановитьПараметр("Организация",       Организация);
		ЗапросИсх.УстановитьПараметр("Аннулирован",       Аннулирован);
		ЗапросИсх.УстановитьПараметр("ТипыИсходногоЭСЧФ", ТипыИсходногоЭСЧФ);
		
		РезультатИсх = ЗапросИсх.Выполнить();
		Если РезультатИсх.Пустой() Тогда
			Перейти ~Входящие;
		КонецЕсли;
		
		ВыборкаИсх = РезультатИсх.Выбрать();
		Пока ВыборкаИсх.Следующий() Цикл
			МенеджерИсх = РегистрыСведений.СтатусыДляЗагрузки.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерИсх, ВыборкаИсх);
			МенеджерИсх.Записать(Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	~Входящие:
	Если Входящие Тогда
		
		ТекстВх = "ВЫБРАТЬ
		|	ЭлектронныйСчетФактураПолученный1.Организация КАК Организация,
		|	ЭлектронныйСчетФактураПолученный1.Номер КАК Номер
		|ИЗ
		|	Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КвитанцииВходящих КАК КвитанцииВходящих
		|		ПО ЭлектронныйСчетФактураПолученный.НомерГод = КвитанцииВходящих.Год
		|			И ЭлектронныйСчетФактураПолученный.НомерОбъект = КвитанцииВходящих.Объект
		|			И ЭлектронныйСчетФактураПолученный.НомерНомер = КвитанцииВходящих.Номер
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронныйСчетФактураПолученный КАК ЭлектронныйСчетФактураПолученный1
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КвитанцииВходящих КАК КвитанцииВходящих1
		|			ПО ЭлектронныйСчетФактураПолученный1.НомерГод = КвитанцииВходящих1.Год
		|				И ЭлектронныйСчетФактураПолученный1.НомерОбъект = КвитанцииВходящих1.Объект
		|				И ЭлектронныйСчетФактураПолученный1.НомерНомер = КвитанцииВходящих1.Номер
		|		ПО ЭлектронныйСчетФактураПолученный.Номер = ЭлектронныйСчетФактураПолученный1.КЭСЧФ
		|ГДЕ
		|	КвитанцииВходящих.Статус = &Аннулирован
		|	И ЭлектронныйСчетФактураПолученный.ТипЭСЧФ В(&ТипыИсходногоЭСЧФ)
		|	И КвитанцииВходящих1.Статус <> &Аннулирован
		|	И НЕ ЭлектронныйСчетФактураПолученный1.ТипЭСЧФ В (&ТипыИсходногоЭСЧФ)" + ?(Организация <> Неопределено, " И ЭлектронныйСчетФактураПолученный1.Организация = &Организация", "");
		ЗапросВх = Новый Запрос(ТекстВх);
		ЗапросВх.УстановитьПараметр("Организация",       Организация);
		ЗапросВх.УстановитьПараметр("Аннулирован",       Аннулирован);
		ЗапросВх.УстановитьПараметр("ТипыИсходногоЭСЧФ", ТипыИсходногоЭСЧФ);
		
		РезультатВх = ЗапросВх.Выполнить();
		Если Не РезультатВх.Пустой() Тогда
			ВыборкаВх = РезультатВх.Выбрать();
			Пока ВыборкаВх.Следующий() Цикл
				МенеджерВх = РегистрыСведений.СтатусыДляЗагрузкиВходящие.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерВх, ВыборкаВх);
				МенеджерВх.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ОтразитьНомераДляПолученияСтатусовПоУсловиюАннулированияИсходногоИИсправленного

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ОтразитьНомераДляЗагрузкиПоУсловиюОшибокПриПодтверждении
//
// Описание:
//  находит номера документов, при попытке подтвердить которые произошли ошибки (нет данных, нет документа, ошибка файла)
//  и отражает информацию о необходимости загрузить их повторно с перезаписью имеющихся данных
//
// Параметры (название, тип, дифференцированное значение)
//
Процедура ОтразитьНомераДляЗагрузкиПоУсловиюОшибокПриПодтверждении( Организация = Неопределено ) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = "ВЫБРАТЬ
	|	НомераДляПодтверждения.Организация,
	|	НомераДляПодтверждения.Номер,
	|	НомераДляЗагрузки.ДатаЗагрузки,
	|	ИСТИНА КАК Ошибки,
	|	НомераДляЗагрузки.Ошибки КАК УжеОтражен
	|ИЗ
	|	РегистрСведений.НомераДляПодтверждения КАК НомераДляПодтверждения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераДляЗагрузки КАК НомераДляЗагрузки
	|		ПО НомераДляПодтверждения.Организация = НомераДляЗагрузки.Организация
	|			И НомераДляПодтверждения.Номер = НомераДляЗагрузки.Номер
	|ГДЕ " + ?( Организация <> Неопределено, "НомераДляПодтверждения.Организация = &Организация И", "" ) + "
	|	(НомераДляПодтверждения.НетДокумента
	|			ИЛИ НомераДляПодтверждения.НетДанных
	|			ИЛИ НомераДляПодтверждения.ОшибкаФайла)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.УжеОтражен = Истина Тогда
			Продолжить;
		КонецЕсли;
		МенеджерЗаписиНомераДляЗагрузки = РегистрыСведений.НомераДляЗагрузки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиНомераДляЗагрузки, Выборка);
		МенеджерЗаписиНомераДляЗагрузки.Записать(Истина);
	КонецЦикла;

КонецПроцедуры //ОтразитьНомераДляЗагрузкиПоУсловиюОшибокПриПодтверждении

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ПолучитьИнформациюОПодписяхДокумента
//
// Описание:
//  выполняет проверку подписей документа и формирует информацию о них (подписях)
//
// Параметры (название, тип, дифференцированное значение)
//  Документ - Connector.IEDocument - электронный документ для проверки
//  КоличествоПодписей - Число - количество подписей переданного документа
//  КоличествоВерныхПодписей - Число - количество верных подписей документа
//  ТекстОшибкиПроверкиПодписей - Строка - строка, в которую будут добавлены данные о подписях(-и) (если неопределено, то заполнен не будет)
//  Ошибки - Массив, Строка - информация об ошибках
//  ДатаПоследнейПодписи - Дата - дата последней подписи в файле
//
Процедура ПолучитьИнформациюОПодписяхДокумента( Документ, КоличествоПодписей, КоличествоВерныхПодписей, ТекстОшибкиПроверкиПодписей = Неопределено, Ошибки = Неопределено, ДатаПоследнейПодписи = Неопределено ) Экспорт

	Перем ДатаПодписания;
	
	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
		Если EInvVatService = Неопределено Тогда
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Не удалось получить компоненту")
			КонецЕсли;
			Возврат
		КонецЕсли;
	#КонецЕсли
	
	КоличествоПодписей = Документ.GetSignCount;
	КоличествоВерныхПодписей = 0;
	
	Для й=0 По КоличествоПодписей-1 Цикл
		
		ПодписьВерна = ( Документ.VerifySign(й, 0) = 0 );
		Если ПодписьВерна Тогда
			КоличествоВерныхПодписей = КоличествоВерныхПодписей + 1;
		КонецЕсли;
		
		ДатаПодписания = Документ.GetSignProperty(й, "SIGNDATE", 0);
		
		Если ТекстОшибкиПроверкиПодписей = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "<<<<<<<<<<< SIGNATURE >>>>>>>>>>>" + Символы.ПС + Символы.ПС + "SIGNDATE - Дата подписания" + Символы.ПС + ДатаПодписания + Символы.ПС;
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "VerifySign - Подпись верна" + Символы.ПС + ПодписьВерна + Символы.ПС;
		Если Не ПодписьВерна Тогда
			ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "LastError - Текст ошибки" + Символы.ПС + EInvVatService.LastError + Символы.ПС;
		Иначе
			ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "LastError - Текст ошибки" + Символы.ПС + "" + Символы.ПС;
		КонецЕсли;
		Владелец = Документ.GetSignProperty(й, "2.5.4.10", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.10 - Наименование организации владельца открытого ключа" + Символы.ПС + Владелец + Символы.ПС;
		УНПорг = Документ.GetSignProperty(й, "1.2.112.1.2.1.1.1.1.2", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.2.112.1.2.1.1.1.1.2 - УНП организации" + Символы.ПС + Владелец + Символы.ПС;
		УНПорг1 = Документ.GetSignProperty(й, "1.3.6.1.4.1.12656.106.101", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.3.6.1.4.1.12656.106.101 - УНП организации" + Символы.ПС + УНПорг1 + Символы.ПС;
		УНП = Документ.GetSignProperty(й, "1.3.6.1.4.1.12656.106.104", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.3.6.1.4.1.12656.106.104 - УНП организации" + Символы.ПС + УНП + Символы.ПС;
		ОбщиеДанные = Документ.GetSignProperty(й, "2.5.4.3", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.3 - Общие данные" + Символы.ПС + ОбщиеДанные + Символы.ПС;
		Фамилия = Документ.GetSignProperty(й, "2.5.4.4", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.4 - Фамилия" + Символы.ПС + Фамилия + Символы.ПС;
		ИмяОтчество = Документ.GetSignProperty(й, "2.5.4.41", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.41 - Имя, Отчество" + Символы.ПС + ИмяОтчество + Символы.ПС;
		ДатаРождения = Документ.GetSignProperty(й, "1.3.6.1.5.5.7.9.1", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.3.6.1.5.5.7.9.1 - Дата рождения" + Символы.ПС + ДатаРождения + Символы.ПС;
		Страна = Документ.GetSignProperty(й, "2.5.4.6", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.6 - Страна" + Символы.ПС + Страна + Символы.ПС;
		Область = Документ.GetSignProperty(й, "2.5.4.8", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.8 - Область" + Символы.ПС + Область + Символы.ПС;
		НаселенныйПункт = Документ.GetSignProperty(й, "2.5.4.7", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.7 - Населенный пункт" + Символы.ПС + НаселенныйПункт + Символы.ПС;
		Адрес = Документ.GetSignProperty(й, "2.5.4.9", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.9 - Адрес" + Символы.ПС + Адрес + Символы.ПС;
		АдресЭлектроннойПочты = Документ.GetSignProperty(й, "1.2.840.113549.1.9.1", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.2.840.113549.1.9.1 - Адрес электронной почты" + Символы.ПС + АдресЭлектроннойПочты + Символы.ПС;
		МестоРаботыИДолжность = Документ.GetSignProperty(й, "1.3.6.1.4.1.12656.5.1", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.3.6.1.4.1.12656.5.1 - Место работы и должность" + Символы.ПС + МестоРаботыИДолжность + Символы.ПС;
		Подразделение = Документ.GetSignProperty(й, "2.5.4.11", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.11 - Подразделение" + Символы.ПС + Подразделение + Символы.ПС;
		Должность = Документ.GetSignProperty(й, "2.5.4.12", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "2.5.4.12 - Должность" + Символы.ПС + Должность + Символы.ПС;
		ДанныеДокументаУдостоверяющегоЛичность = Документ.GetSignProperty(й, "1.3.6.1.4.1.12656.5.3", 0);
		ТекстОшибкиПроверкиПодписей = ТекстОшибкиПроверкиПодписей + Символы.ПС + "1.3.6.1.4.1.12656.5.3 - Данные из документа, удостоверяющего личность" + Символы.ПС + ДанныеДокументаУдостоверяющегоЛичность + Символы.ПС;
		
	КонецЦикла;
	
	Если ДатаПоследнейПодписи <> Неопределено Тогда
		ДатаПоследнейПодписи = кДата(ДатаПодписания);
	КонецЕсли;

КонецПроцедуры //ПолучитьИнформациюОПодписяхДокумента

////////////////////////////////////////////////////////////////////////////////
//
// Процедура ВыделитьДокументДляЧтенияИзПодписанного
//
// Описание:
//  читает данные документа в структуру
//
// Параметры (название, тип, дифференцированное значение)
//  Ссылка - СправочникСсылка.ДокументыОбмена - ссылка на документ для обработки
//  Структура - Структура - структура для заполнения полей значениями документа
//  Товары - (Колленкция, соответствующая таблице ЭСЧФ) - данные товароа
//  Грузоотправители - (Колленкция, соответствующая таблице ЭСЧФ) - данные Грузоотправителей
//  Грузополучатели - (Колленкция, соответствующая таблице ЭСЧФ) - данные Грузополучателей
//  ДокументыПоставки (Колленкция, соответствующая таблице ЭСЧФ) - данные документов подтверждающих поставку
//  Отказ - Булево - признак неудачной обработки документа
//  Ошибки - Массив, Строка - данные об ошибках обработки
//
Процедура ВыделитьДокументДляЧтенияИзПодписанного( Ссылка, Структура, Товары = Неопределено, Грузоотправители = Неопределено, Грузополучатели = Неопределено, ДокументыПоставки = Неопределено, Отказ = Ложь, Ошибки = Неопределено ) Экспорт

	// нужно только получить данные из документа, загруженного ранее с портала
	ЧтениеXML = Новый ЧтениеXML;
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ДокументыОбмена") Тогда
		
		Если Ссылка.РасположениеФайла = 2 Тогда
			ИмяИсходногоФайла = ПараметрыСеанса.ПутьКаталогаХраненияВходящихДокументов + Ссылка.ИмяФайлаДокумента;
			ЧтениеXML.ОткрытьФайл( ИмяИсходногоФайла );
			КодировкаИсходного = ЧтениеXML.КодировкаИсточника;
		ИначеЕсли Ссылка.РасположениеФайла = 1 Тогда
			ДД = Ссылка.ХранилищеЗначения.Получить();
			ИмяФайла = ПолучитьИмяВременногоФайла();
			ИмяИсходногоФайла = ИмяФайла;
			ДД.Записать(ИмяФайла);
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
			КодировкаИсходного = ЧтениеXML.КодировкаИсточника;
		Иначе
			Отказ = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Не указано расположение файла");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		
		Если Ссылка.contentEncoding = "zip;base64" Тогда
			
			ИмяZIPФайла = ПолучитьИмяВременногоФайла("zip");
			
			ДвоичныеДанные = Base64Значение(ДокументDOM.ПервыйДочерний.ПервыйДочерний.ПервыйДочерний.Данные);
			ДвоичныеДанные.Записать(ИмяZIPФайла);
			
			ЧтениеXML.Закрыть();
			
			ЧтениеZIP = Новый ЧтениеZipФайла(ИмяZIPФайла);
			ИмяВрФайла = ПолучитьИмяВременногоФайла("xml");
			ЧтениеZIP.Извлечь(ЧтениеZIP.Элементы[0], ИмяВрФайла, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			
			ИмяФайлаДокумента = ИмяВрФайла+"\"+ЧтениеZIP.Элементы[0].Имя;
			ЧтениеXML.ОткрытьФайл(ИмяФайлаДокумента);
			КодировкаИсточника = ЧтениеXML.КодировкаИсточника;
			Документ = ПостроительDOM.Прочитать(ЧтениеXML);
			ЧтениеXML.Закрыть();
			ЧтениеZIP.Закрыть();
			
		Иначе
			
			ИмяВрФайла = ПолучитьИмяВременногоФайла("xml");
			ИмяИсходногоФайла = ИмяВрФайла;
			ДвоичныеДанные = Base64Значение(ДокументDOM.ПервыйДочерний.ПервыйДочерний.ПервыйДочерний.Данные);
			ДвоичныеДанные.Записать(ИмяВрФайла);
			ЧтениеXML.ОткрытьФайл(ИмяВрФайла);
			КодировкаИсточника = ЧтениеXML.КодировкаИсточника;
			Документ = ПостроительDOM.Прочитать(ЧтениеXML);
			ИмяФайлаДокумента = ИмяВрФайла;
			ЧтениеXML.Закрыть();
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Ссылка) = Тип("Строка") Тогда
		
		
		ЧтениеXML.ОткрытьФайл(Ссылка);
		ИмяФайлаДокумента = Ссылка;
		КодировкаИсточника = ЧтениеXML.КодировкаИсточника;
		
		ПостроительDOM = Новый ПостроительDOM;
		Документ = ПостроительDOM.Прочитать(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
	КонецЕсли;
	
	Если ТипЗнч(Структура) = Тип("Строка") Тогда
		
		ЧтениеТекста = Новый ЧтениеТекста;
		ЧтениеТекста.Открыть( ИмяФайлаДокумента, КодировкаИсточника );
		Структура = Структура + Символы.ПС + Символы.ПС + "ИСХОДНЫЙ ДОКУМЕНТ: " + Символы.ПС + Символы.ПС + ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		ЧтениеТекста.Открыть( ИмяИсходногоФайла, КодировкаИсходного );
		Структура = Структура + Символы.ПС + Символы.ПС + "ПОДПИСАННЫЙ ДОКУМЕНТ: " + Символы.ПС + Символы.ПС + ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
	ИначеЕсли Документ.ПервыйДочерний.ИмяУзла <> "status_info" Тогда//Документ.ИмяУзла = "#document" Тогда
		
		Структура.Вставить("ТипСодержимого", "issuance");
		
		issuance = Документ.ПервыйДочерний;
		issuanceAttr = issuance.Атрибуты;
		
		sender = issuanceAttr.ПолучитьИменованныйЭлемент("sender");
		Если sender <> Неопределено Тогда
			ОтправительУНП = sender.ТекстовоеСодержимое;
		Иначе
			ОтправительУНП = Неопределено;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Не найден атрибут ""sender""");
			КонецЕсли;
		КонецЕсли;
		
		general = issuance.ПервыйДочерний;
		
		documentTypeColl = general.ПолучитьЭлементыПоИмени("documentType");
		Если Не documentTypeColl.Количество() Тогда
			Отказ = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Неверный документ (не найден узел ""documentType"")");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		documentType = documentTypeColl[0];
		documentTypeText = documentType.ТекстовоеСодержимое;
		Если documentTypeText = "ORIGINAL" Тогда
			ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исходный");
		ИначеЕсли documentTypeText = "ADDITIONAL" Тогда
			ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный");
		ИначеЕсли documentTypeText = "FIXED" Тогда
			ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный");
		ИначеЕсли documentTypeText = "ADD_NO_REFERENCE" Тогда
			ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.ДополнительныйБезСсылки");
		Иначе
			Отказ = Истина;
			Если Ошибки <> Неопределено Тогда
				ОтразитьОшибку(Ошибки, "Неверный тип ЭСЧФ - """ + documentTypeText + """");
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ЭСЧФобщий.ЗаполнитьСтруктуруПолейЭСЧФ(Структура, ТипЭСЧФ);
		
		Структура.Вставить("ТипЭСЧФ", ТипЭСЧФ);
		Структура.Вставить("ОтправительУНП", ОтправительУНП);
		
		numberColl = general.ПолучитьЭлементыПоИмени("number");
		Если numberColl.Количество() Тогда
			number = numberColl[0];
			Структура.Вставить("НомерЭСЧФ", number.ТекстовоеСодержимое);
		КонецЕсли;
		
		dateTransactionColl = general.ПолучитьЭлементыПоИмени("dateTransaction");
		Если dateTransactionColl.Количество() Тогда
			dateTransaction = dateTransactionColl[0];
			dateTransactionText = dateTransaction.ТекстовоеСодержимое;
			Структура.Вставить("ДатаСовершенияОперацииЭСЧФ", кДата(dateTransactionText));
		КонецЕсли;
		
		dateIssuanceColl = general.ПолучитьЭлементыПоИмени("dateIssuance");
		Если dateIssuanceColl.Количество() Тогда
			dateIssuance = dateIssuanceColl[0];
			dateIssuanceText = dateIssuance.ТекстовоеСодержимое;
			Структура.Вставить("ДатаВыставленияЭСЧФ", кДата(dateIssuanceText));
		КонецЕсли;
		
		Если ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") Тогда
			
			invoiceColl = general.ПолучитьЭлементыПоИмени("invoice");
			Если invoiceColl.Количество() Тогда
				invoice = invoiceColl[0];
				Структура.Вставить("КЭСЧФ", invoice.ТекстовоеСодержимое);
			КонецЕсли;
			
			sendToRecipientColl = general.ПолучитьЭлементыПоИмени("sendToRecipient");
			Если sendToRecipientColl.Количество() Тогда
				sendToRecipient = sendToRecipientColl[0];
				Структура.Вставить("ОтобразитьПолучателю", кБулево(sendToRecipient.ТекстовоеСодержимое));
			КонецЕсли;
			
		ИначеЕсли ТипЭСЧФ = ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Исправленный") Тогда
			
			invoiceColl = general.ПолучитьЭлементыПоИмени("invoice");
			Если invoiceColl.Количество() Тогда
				invoice = invoiceColl[0];
				Структура.Вставить("КЭСЧФ", invoice.ТекстовоеСодержимое);
			КонецЕсли;
			
			dateCancelledColl = general.ПолучитьЭлементыПоИмени("dateCancelled");
			Если dateCancelledColl.Количество() Тогда
				dateCancelled = dateCancelledColl[0];
				dateCancelledText = dateCancelled.ТекстовоеСодержимое;
				Структура.Вставить("ДатаАннулированияЭСЧФ", кДата(dateCancelledText));
			КонецЕсли;
			
		КонецЕсли;
		
		//Если ТипЭСЧФ <> ПредопределенноеЗначение("Перечисление.ТипыЭСЧФ.Дополнительный") Тогда
		
		providerColl = issuance.ПолучитьЭлементыПоИмени("provider");
		
		Если providerColl.Количество() Тогда
			
			provider = providerColl[0];
			
			providerStatusColl = provider.ПолучитьЭлементыПоИмени("providerStatus");
			Если providerStatusColl.Количество() Тогда
				providerStatus = providerStatusColl[0];
				providerStatusText = providerStatus.ТекстовоеСодержимое;
				СтатусыПоставщика = Новый Соответствие;
				Перечисления.СтатусыПоставщикаЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(СтатусыПоставщика);
				Для каждого КлючИЗначение Из СтатусыПоставщика Цикл
					Если providerStatusText = КлючИЗначение.Значение Тогда
						Структура.Вставить("ПоставщикСтатус", КлючИЗначение.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Структура.Вставить("ПоставщикСтатус", ПредопределенноеЗначение("Перечисление.СтатусыПоставщикаЭСЧФ.Продавец"));
			КонецЕсли;
			
			dependentPersonColl = provider.ПолучитьЭлементыПоИмени("dependentPerson");
			Если dependentPersonColl.Количество() Тогда
				dependentPerson = dependentPersonColl[0];
				Структура.Вставить("ПоставщикВзаимозависимоеЛицо", кБулево(dependentPerson.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ПоставщикВзаимозависимоеЛицо", Ложь);
			КонецЕсли;
			
			residentsOfOffshoreColl = provider.ПолучитьЭлементыПоИмени("residentsOfOffshore");
			Если residentsOfOffshoreColl.Количество() Тогда
				residentsOfOffshore = residentsOfOffshoreColl[0];
				Структура.Вставить("ПоставщикРезидентОффшорнойЗоны", кБулево(residentsOfOffshore.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ПоставщикРезидентОффшорнойЗоны", Ложь);
			КонецЕсли;
			
			specialDealGoodsColl = provider.ПолучитьЭлементыПоИмени("specialDealGoods");
			Если specialDealGoodsColl.Количество() Тогда
				specialDealGoods = specialDealGoodsColl[0];
				Структура.Вставить("ПоставщикСделкаСТоварамиПоПеречню", кБулево(specialDealGoods.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ПоставщикСделкаСТоварамиПоПеречню", Ложь);
			КонецЕсли;
			
			bigCompanyColl = provider.ПолучитьЭлементыПоИмени("bigCompany");
			Если bigCompanyColl.Количество() Тогда
				bigCompany = bigCompanyColl[0];
				Структура.Вставить("ПоставщикВходитВПереченьКрупныхПлательщиков", кБулево(bigCompany.ТекстовоеСодержимое));
			КонецЕсли;
			
			countryCodeColl = provider.ПолучитьЭлементыПоИмени("countryCode");
			Если countryCodeColl.Количество() Тогда
				countryCode = countryCodeColl[0];
				Структура.Вставить("ПоставщикКодСтраны", countryCode.ТекстовоеСодержимое);
			КонецЕсли;
			
			unpColl = provider.ПолучитьЭлементыПоИмени("unp");
			Если unpColl.Количество() Тогда
				unp = unpColl[0];
				Структура.Вставить("ПоставщикУНП", unp.ТекстовоеСодержимое);
			КонецЕсли;
			
			branchCodeColl = provider.ПолучитьЭлементыПоИмени("branchCode");
			Если branchCodeColl.Количество() Тогда
				branchCode = branchCodeColl[0];
				Структура.Вставить("ПоставщикКодФилиала", branchCode.ТекстовоеСодержимое);
			КонецЕсли;
			
			nameColl = provider.ПолучитьЭлементыПоИмени("name");
			Если nameColl.Количество() Тогда
				name = nameColl[0];
				Структура.Вставить("Поставщик", name.ТекстовоеСодержимое);
			КонецЕсли;
			
			addressColl = provider.ПолучитьЭлементыПоИмени("address");
			Если addressColl.Количество() Тогда
				address = addressColl[0];
				Структура.Вставить("ПоставщикЮридическийАдрес", address.ТекстовоеСодержимое);
			КонецЕсли;
			
			principalColl = provider.ПолучитьЭлементыПоИмени("principal");
			Если principalColl.Количество() Тогда
				principal = principalColl[0];
				numberColl = principal.ПолучитьЭлементыПоИмени("number");
				Если numberColl.Количество() Тогда
					number = numberColl[0];
					Структура.Вставить("ПоставщикНомерСчетаКомитента", number.ТекстовоеСодержимое);
				КонецЕсли;
				dateColl = principal.ПолучитьЭлементыПоИмени("date");
				Если dateColl.Количество() Тогда
					date = dateColl[0];
					Структура.Вставить("ПоставщикДатаВыпискиКомитента", кДата(date.ТекстовоеСодержимое));
				КонецЕсли;
			КонецЕсли;
			
			vendorColl = provider.ПолучитьЭлементыПоИмени("vendor");
			Если vendorColl.Количество() Тогда
				vendor = vendorColl[0];
				numberColl = vendor.ПолучитьЭлементыПоИмени("number");
				Если numberColl.Количество() Тогда
					number = numberColl[0];
					Структура.Вставить("ПоставщикНомерСчетаПродавца", number.ТекстовоеСодержимое);
				КонецЕсли;
				dateColl = vendor.ПолучитьЭлементыПоИмени("date");
				Если dateColl.Количество() Тогда
					date = dateColl[0];
					Структура.Вставить("ПоставщикДатаВыпискиПродавца", кДата(date.ТекстовоеСодержимое));
				КонецЕсли;
			КонецЕсли;
			
			declarationColl = provider.ПолучитьЭлементыПоИмени("declaration");
			Если declarationColl.Количество() Тогда
				declaration = declarationColl[0];
				Структура.Вставить("ПоставщикРегистрационныйНомерВыпускаТоваров", declaration.ТекстовоеСодержимое);
			КонецЕсли;
			
			dateReleaseColl = provider.ПолучитьЭлементыПоИмени("dateRelease");
			Если dateReleaseColl.Количество() Тогда
				dateRelease = dateReleaseColl[0];
				Структура.Вставить("ПоставщикДатаВыпускаТовара", кДата(dateRelease.ТекстовоеСодержимое));
			КонецЕсли;
			
			dateActualExportColl = provider.ПолучитьЭлементыПоИмени("dateActualExport");
			Если dateActualExportColl.Количество() Тогда
				dateActualExport = dateActualExportColl[0];
				Структура.Вставить("ПоставщикДатаВыдачиРазрешенияНаУбытие", кДата(dateActualExport.ТекстовоеСодержимое));
			КонецЕсли;
			
			taxesColl = provider.ПолучитьЭлементыПоИмени("taxes");
			Если taxesColl.Количество() Тогда
				taxes = taxesColl[0];
				numberColl = taxes.ПолучитьЭлементыПоИмени("number");
				Если numberColl.Количество() Тогда
					number = numberColl[0];
					Структура.Вставить("ПоставщикНомерЗаявленияОВвозеТоваров", number.ТекстовоеСодержимое);
				КонецЕсли;
				dateColl = taxes.ПолучитьЭлементыПоИмени("date");
				Если dateColl.Количество() Тогда
					date = dateColl[0];
					Структура.Вставить("ПоставщикДатаЗаявленияОВвозеТоваров", кДата(date.ТекстовоеСодержимое));
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		recipientColl = issuance.ПолучитьЭлементыПоИмени("recipient");
		
		Если recipientColl.Количество() Тогда
			
			recipient = recipientColl[0];
			
			recipientStatusColl = recipient.ПолучитьЭлементыПоИмени("recipientStatus");
			Если recipientStatusColl.Количество() Тогда
				recipientStatus = recipientStatusColl[0];
				recipientStatusText = recipientStatus.ТекстовоеСодержимое;
				СтатусыПолучателя = Новый Соответствие;
				Перечисления.СтатусыПолучателяЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(СтатусыПолучателя);
				Для каждого КлючИЗначение Из СтатусыПолучателя Цикл
					Если recipientStatusText = КлючИЗначение.Значение Тогда
						Структура.Вставить("ПолучательСтатус", КлючИЗначение.Ключ);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Структура.Вставить("ПолучательСтатус", ПредопределенноеЗначение("Перечисление.СтатусыПолучателяЭСЧФ.Покупатель"));
			КонецЕсли;
			
			dependentPersonColl = recipient.ПолучитьЭлементыПоИмени("dependentPerson");
			Если dependentPersonColl.Количество() Тогда
				dependentPerson = dependentPersonColl[0];
				Структура.Вставить("ПолучательВзаимозависимоеЛицо", кБулево(dependentPerson.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ПолучательВзаимозависимоеЛицо", Ложь);
			КонецЕсли;
			
			residentsOfOffshoreColl = recipient.ПолучитьЭлементыПоИмени("residentsOfOffshore");
			Если residentsOfOffshoreColl.Количество() Тогда
				residentsOfOffshore = residentsOfOffshoreColl[0];
				Структура.Вставить("ПолучательРезидентОффшорнойЗоны", кБулево(residentsOfOffshore.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ПолучательРезидентОффшорнойЗоны", Ложь);
			КонецЕсли;
			
			specialDealGoodsColl = recipient.ПолучитьЭлементыПоИмени("specialDealGoods");
			Если specialDealGoodsColl.Количество() Тогда
				specialDealGoods = specialDealGoodsColl[0];
				Структура.Вставить("ПолучательСделкаСТоварамиПоПеречню", кБулево(specialDealGoods.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ПолучательСделкаСТоварамиПоПеречню", Ложь);
			КонецЕсли;
			
			bigCompanyColl = recipient.ПолучитьЭлементыПоИмени("bigCompany");
			Если bigCompanyColl.Количество() Тогда
				bigCompany = bigCompanyColl[0];
				Структура.Вставить("ПолучательВходитВПереченьКрупныхПлательщиков", кБулево(bigCompany.ТекстовоеСодержимое));
			КонецЕсли;
			
			countryCodeColl = recipient.ПолучитьЭлементыПоИмени("countryCode");
			Если countryCodeColl.Количество() Тогда
				countryCode = countryCodeColl[0];
				Структура.Вставить("ПолучательКодСтраны", countryCode.ТекстовоеСодержимое);
			КонецЕсли;
			
			unpColl = recipient.ПолучитьЭлементыПоИмени("unp");
			Если unpColl.Количество() Тогда
				unp = unpColl[0];
				Структура.Вставить("ПолучательУНП", unp.ТекстовоеСодержимое);
			КонецЕсли;
			
			branchCodeColl = recipient.ПолучитьЭлементыПоИмени("branchCode");
			Если branchCodeColl.Количество() Тогда
				branchCode = branchCodeColl[0];
				Структура.Вставить("ПолучательКодФилиала", branchCode.ТекстовоеСодержимое);
			КонецЕсли;
			
			nameColl = recipient.ПолучитьЭлементыПоИмени("name");
			Если nameColl.Количество() Тогда
				name = nameColl[0];
				Структура.Вставить("Получатель", name.ТекстовоеСодержимое);
			КонецЕсли;
			
			addressColl = recipient.ПолучитьЭлементыПоИмени("address");
			Если addressColl.Количество() Тогда
				address = addressColl[0];
				Структура.Вставить("ПолучательЮридическийАдрес", address.ТекстовоеСодержимое);
			КонецЕсли;
			
			declarationColl = recipient.ПолучитьЭлементыПоИмени("declaration");
			Если declarationColl.Количество() Тогда
				declaration = declarationColl[0];
				Структура.Вставить("ПолучательРегистрационныйНомерВыпускаТоваров", declaration.ТекстовоеСодержимое);
			КонецЕсли;
			
			taxesColl = recipient.ПолучитьЭлементыПоИмени("taxes");
			Если taxesColl.Количество() Тогда
				taxes = taxesColl[0];
				numberColl = taxes.ПолучитьЭлементыПоИмени("number");
				Если numberColl.Количество() Тогда
					number = numberColl[0];
					Структура.Вставить("ПолучательНомерЗаявленияОВвозеТоваров", number.ТекстовоеСодержимое);
				КонецЕсли;
				dateColl = taxes.ПолучитьЭлементыПоИмени("date");
				Если dateColl.Количество() Тогда
					date = dateColl[0];
					Структура.Вставить("ПолучательДатаЗаявленияОВвозеТоваров", кДата(date.ТекстовоеСодержимое));
				КонецЕсли;
			КонецЕсли;
			
			dateImportColl = recipient.ПолучитьЭлементыПоИмени("dateImport");
			Если dateImportColl.Количество() Тогда
				dateImport = dateImportColl[0];
				Структура.Вставить("ПолучательДатаВвозаТоваровЗаявленияОВвозеТоваров", кДата(dateImport.ТекстовоеСодержимое));
			КонецЕсли;
			
		КонецЕсли;
		
		senderReceiverColl = issuance.ПолучитьЭлементыПоИмени("senderReceiver");
		
		Если senderReceiverColl.Количество() Тогда
			
			senderReceiver = senderReceiverColl[0];
			
			consignorsColl = senderReceiver.ПолучитьЭлементыПоИмени("consignors");
			
			Если consignorsColl.Количество() Тогда
				
				consignors = consignorsColl[0];
				
				Для каждого consignor Из consignors.ДочерниеУзлы Цикл
					
					Грузоотправитель = Грузоотправители.Добавить();
					
					countryCodeColl = consignor.ПолучитьЭлементыПоИмени("countryCode");
					Если countryCodeColl.Количество() Тогда
						countryCode = countryCodeColl[0];
						Грузоотправитель.КодСтраны = countryCode.ТекстовоеСодержимое;
					КонецЕсли;
					
					unpColl = consignor.ПолучитьЭлементыПоИмени("unp");
					Если unpColl.Количество() Тогда
						unp = unpColl[0];
						Грузоотправитель.УНП = unp.ТекстовоеСодержимое;
					КонецЕсли;
					
					nameColl = consignor.ПолучитьЭлементыПоИмени("name");
					Если nameColl.Количество() Тогда
						name = nameColl[0];
						Грузоотправитель.Наименование = name.ТекстовоеСодержимое;
					КонецЕсли;
					
					addressColl = consignor.ПолучитьЭлементыПоИмени("address");
					Если addressColl.Количество() Тогда
						address = addressColl[0];
						Грузоотправитель.АдресОтправки = address.ТекстовоеСодержимое;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			consigneesColl = senderReceiver.ПолучитьЭлементыПоИмени("consignees");
			
			Если consigneesColl.Количество() Тогда
				
				consignees = consigneesColl[0];
				
				Для каждого consignee Из consignees.ДочерниеУзлы Цикл
					
					Грузополучатель = Грузополучатели.Добавить();
					
					countryCodeColl = consignee.ПолучитьЭлементыПоИмени("countryCode");
					Если countryCodeColl.Количество() Тогда
						countryCode = countryCodeColl[0];
						Грузополучатель.КодСтраны = countryCode.ТекстовоеСодержимое;
					КонецЕсли;
					
					unpColl = consignee.ПолучитьЭлементыПоИмени("unp");
					Если unpColl.Количество() Тогда
						unp = unpColl[0];
						Грузополучатель.УНП = unp.ТекстовоеСодержимое;
					КонецЕсли;
					
					nameColl = consignee.ПолучитьЭлементыПоИмени("name");
					Если nameColl.Количество() Тогда
						name = nameColl[0];
						Грузополучатель.Наименование = name.ТекстовоеСодержимое;
					КонецЕсли;
					
					addressColl = consignee.ПолучитьЭлементыПоИмени("address");
					Если addressColl.Количество() Тогда
						address = addressColl[0];
						Грузополучатель.АдресДоставки = address.ТекстовоеСодержимое;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		deliveryConditionColl = issuance.ПолучитьЭлементыПоИмени("deliveryCondition");
		
		Если deliveryConditionColl.Количество() Тогда
			
			deliveryCondition = deliveryConditionColl[0];
			
			contractColl = deliveryCondition.ПолучитьЭлементыПоИмени("contract");
			
			Если contractColl.Количество() Тогда
				
				contract = contractColl[0];
				
				numberColl = contract.ПолучитьЭлементыПоИмени("number");
				Если numberColl.Количество() Тогда
					number = numberColl[0];
					Структура.Вставить("ДоговорНомер", number.ТекстовоеСодержимое);
				КонецЕсли;
				
				dateColl = contract.ПолучитьЭлементыПоИмени("date");
				Если dateColl.Количество() Тогда
					date = dateColl[0];
					Структура.Вставить("ДоговорДата", кДата(date.ТекстовоеСодержимое));
				КонецЕсли;
				
			КонецЕсли;
			
			docsColl = deliveryCondition.ПолучитьЭлементыПоИмени("documents");
			
			Если docsColl.Количество() Тогда
				
				docs = docsColl[0];
				
				Для каждого document Из docs.ДочерниеУзлы Цикл
					
					ДокументПоставки = ДокументыПоставки.Добавить();
					
					docTypeColl = document.ПолучитьЭлементыПоИмени("docType");
					Если docTypeColl.Количество() Тогда
						docType = docTypeColl[0];
						codeColl = docType.ПолучитьЭлементыПоИмени("code");
						Если codeColl.Количество() Тогда
							code = codeColl[0];
							codeText = СокрЛП(code.ТекстовоеСодержимое);
							КодТипаБланка = Справочники.ТипыБСО.НайтиПоКоду(codeText);
							Если КодТипаБланка.Пустая() И Ошибки <> Неопределено Тогда
								valueColl = docType.ПолучитьЭлементыПоИмени("value");
								Если valueColl.Количество() Тогда
									value = valueColl[0];
									ИмяВидаДокумента = " (" + СокрЛП(value.ТекстовоеСодержимое) + ")";
								Иначе
									ИмяВидаДокумента = "";
								КонецЕсли;
								ОтразитьОшибку(Ошибки, "Не найден бланк документа с кодом """ + codeText + ИмяВидаДокумента + """");
							КонецЕсли;
							ДокументПоставки.КодТипаБланка = КодТипаБланка;
						КонецЕсли;
					КонецЕсли;
					
					dateColl = document.ПолучитьЭлементыПоИмени("date");
					Если dateColl.Количество() Тогда
						date = dateColl[0];
						ДокументПоставки.Дата = кДата(date.ТекстовоеСодержимое);
					КонецЕсли;
					
					blankCodeColl = document.ПолучитьЭлементыПоИмени("blankCode");
					Если blankCodeColl.Количество() Тогда
						blankCode = blankCodeColl[0];
						blankCodeText = СокрЛП(blankCode.ТекстовоеСодержимое);
						ТипБСО = Справочники.БланкиДокументов.НайтиПоКоду(blankCodeText);
						Если ТипБСО.Пустая() И Ошибки <> Неопределено Тогда
							ОтразитьОшибку(Ошибки, "Не найден вид документа с кодом """ + blankCodeText + """");
						КонецЕсли;
						ДокументПоставки.ТипБСО = ТипБСО;
					КонецЕсли;
					
					seriaColl = document.ПолучитьЭлементыПоИмени("seria");
					Если seriaColl.Количество() Тогда
						seria = seriaColl[0];
						ДокументПоставки.Серия = seria.ТекстовоеСодержимое;
					КонецЕсли;
					
					numberColl = document.ПолучитьЭлементыПоИмени("number");
					Если numberColl.Количество() Тогда
						number = numberColl[0];
						ДокументПоставки.Номер = number.ТекстовоеСодержимое;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			descriptionColl = deliveryCondition.ПолучитьЭлементыПоИмени("description");
			
			Если descriptionColl.Количество() Тогда
				
				description = descriptionColl[0];
				Структура.Вставить("ДополнительныеСведения", description.ТекстовоеСодержимое);
				
			КонецЕсли;
			
		КонецЕсли;
		
		rosterColl = issuance.ПолучитьЭлементыПоИмени("roster");
		
		Структура.Вставить("ИтогиВРеквизитах", Истина);
		
		Если rosterColl.Количество() Тогда
			
			roster = rosterColl[0];
			rosterAttr = roster.Атрибуты;
			
			totalCostVat = rosterAttr.ПолучитьИменованныйЭлемент("totalCostVat");
			Если totalCostVat <> Неопределено Тогда
				Структура.Вставить("ИтогоСтоимостьСНДС", Число(totalCostVat.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ИтогоСтоимостьСНДС", 0);
			КонецЕсли;
			
			totalExcise = rosterAttr.ПолучитьИменованныйЭлемент("totalExcise");
			Если totalExcise <> Неопределено Тогда
				Структура.Вставить("ИтогоСуммаАкциза", Число(totalExcise.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ИтогоСуммаАкциза", 0);
			КонецЕсли;
			
			totalVat = rosterAttr.ПолучитьИменованныйЭлемент("totalVat");
			Если totalVat <> Неопределено Тогда
				Структура.Вставить("ИтогоСуммаНДС", Число(totalVat.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ИтогоСуммаНДС", 0);
			КонецЕсли;
			
			totalCost = rosterAttr.ПолучитьИменованныйЭлемент("totalCost");
			Если totalCost <> Неопределено Тогда
				Структура.Вставить("ИтогоСтоимость", Число(totalCost.ТекстовоеСодержимое));
			Иначе
				Структура.Вставить("ИтогоСтоимость", 0);
			КонецЕсли;
			
			СоответствиеТиповСтавокНДС = Новый Соответствие;
			Перечисления.ТипыСтавокНДСЭСЧФ.ПолучитьЗначенияДляЗаполненияУзловXML(СоответствиеТиповСтавокНДС);
			
			Для каждого rosterItem Из roster.ДочерниеУзлы Цикл
				
				СтрТовара = Товары.Добавить();
				СтрНомер = Ложь;
				ОшибкаКодаТНВЭЛТС = "";
				ОшибкаКодаОКЭД = "";
				ОшибкаЕдиницыИзмерения = "";
				
				Для каждого Узел Из rosterItem.ДочерниеУзлы Цикл
					
					Если Узел.ИмяУзла = "number" Тогда
						СтрНомер = Истина;
						СтрТовара.НомерСтроки = Число(Узел.ТекстовоеСодержимое);
					ИначеЕсли Узел.ИмяУзла = "name" Тогда
						СтрТовара.Товар = Узел.ТекстовоеСодержимое;
					ИначеЕсли Узел.ИмяУзла = "code" Тогда
						КодТНВЭДЕАЭСисх = СокрЛП(Узел.ТекстовоеСодержимое);
						Длина = СтрДлина(КодТНВЭДЕАЭСисх);
						КодТНВЭДЕАЭСпоиск = "";
						Если Длина >= 4 Тогда
							КодТНВЭДЕАЭСпоиск = Лев(КодТНВЭДЕАЭСисх, 4)
						КонецЕсли;
						Если Длина >= 6 Тогда
							КодТНВЭДЕАЭСпоиск = КодТНВЭДЕАЭСпоиск + " " + Сред(КодТНВЭДЕАЭСисх, 5, 2)
						КонецЕсли;
						Если Длина >= 9 Тогда
							КодТНВЭДЕАЭСпоиск = КодТНВЭДЕАЭСпоиск + " " + Сред(КодТНВЭДЕАЭСисх, 7, 3)
						КонецЕсли;
						Если Длина = 10 Тогда
							КодТНВЭДЕАЭСпоиск = КодТНВЭДЕАЭСпоиск + " " + Прав(КодТНВЭДЕАЭСисх, 1)
						КонецЕсли;
						СтандартнаяОбработка = Ложь;
						СтрТовара.КодТНВЭДЕАЭС = Справочники.КлассификаторТНВЭДТС.НайтиПоКоду(КодТНВЭДЕАЭСпоиск);
						Если СтрТовара.КодТНВЭДЕАЭС.Пустая() И Ошибки <> Неопределено Тогда
							ОшибкаКодаТНВЭЛТС = "Не найден код ТНВЭДТС """ + СокрЛП(Узел.ТекстовоеСодержимое) + """";
						КонецЕсли;
					ИначеЕсли Узел.ИмяУзла = "code_oced" Тогда
						СтрТовара.КодОКЭД = Справочники.КлассификаторОКЭД.НайтиПоКоду(СокрЛП(Узел.ТекстовоеСодержимое));
						Если СтрТовара.КодОКЭД.Пустая() И Ошибки <> Неопределено Тогда
							ОшибкаКодаОКЭД = "Не найден код ОКЭД """ + СокрЛП(Узел.ТекстовоеСодержимое) + """";
						КонецЕсли;
					ИначеЕсли Узел.ИмяУзла = "units" Тогда
						СтрТовара.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(СокрЛП(Узел.ТекстовоеСодержимое));
						Если СтрТовара.ЕдиницаИзмерения.Пустая() И Ошибки <> Неопределено Тогда
							ОшибкаКодаОКЭД = "Не найдена единица измерения с кодом """ + СокрЛП(Узел.ТекстовоеСодержимое) + """";
						КонецЕсли;
					ИначеЕсли Узел.ИмяУзла = "count" Тогда
						СтрТовара.Количество = Число(Узел.ТекстовоеСодержимое);
					ИначеЕсли Узел.ИмяУзла = "price" Тогда
						СтрТовара.Цена = Число(Узел.ТекстовоеСодержимое);
					ИначеЕсли Узел.ИмяУзла = "cost" Тогда
						СтрТовара.Стоимость = Число(Узел.ТекстовоеСодержимое);
					ИначеЕсли Узел.ИмяУзла = "summaExcise" Тогда
						СтрТовара.СуммаАкциза = Число(Узел.ТекстовоеСодержимое);
					ИначеЕсли Узел.ИмяУзла = "vat" Тогда
						Для каждого УзелСтавкиНДС Из Узел.Дочерниеузлы Цикл
							Если УзелСтавкиНДС.ИмяУзла = "rate" Тогда
								СтрТовара.ПроцентНДС = Число(УзелСтавкиНДС.ТекстовоеСодержимое);
							ИначеЕсли УзелСтавкиНДС.ИмяУзла = "rateType" Тогда
								УзелСтавкиНДСтекст = СокрЛП(УзелСтавкиНДС.ТекстовоеСодержимое);
								Для каждого КлючИЗначение Из СоответствиеТиповСтавокНДС Цикл
									Если КлючИЗначение.Значение = УзелСтавкиНДСтекст Тогда
										СтрТовара.ТипСтавкиНДС = КлючИЗначение.Ключ;
										Прервать;
									КонецЕсли;
								КонецЦикла;
							ИначеЕсли УзелСтавкиНДС.ИмяУзла = "summaVat" Тогда
								СтрТовара.СуммаНДС = Число(УзелСтавкиНДС.ТекстовоеСодержимое);
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Узел.ИмяУзла = "costVat" Тогда
						СтрТовара.СтоимостьСНДС = Число(Узел.ТекстовоеСодержимое);
					ИначеЕсли Узел.ИмяУзла = "descriptions" Тогда
						Для каждого УзелОписания Из Узел.Дочерниеузлы Цикл
							УзелОписанияТекст = СокрЛП(УзелОписания.ТекстовоеСодержимое);
							Если УзелОписанияТекст = "DEDUCTION_IN_FULL" Тогда
								СтрТовара.ВычетВПолномОбъеме = Истина;
							ИначеЕсли УзелОписанияТекст = "VAT_EXEMPTION" Тогда
								СтрТовара.ОсвобождениеОтНДС = Истина;
							ИначеЕсли УзелОписанияТекст = "OUTSIDE_RB" Тогда
								СтрТовара.РеализацияЗаПределамиРБ = Истина;
							ИначеЕсли УзелОписанияТекст = "IMPORT_VAT" Тогда
								СтрТовара.ПроцентНДС = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не СтрНомер Тогда
					Номера = Товары.Скопировать( , "НомерСтроки" );
					Номера.Сотрировать("НомерСтроки УБЫВ");
					СтрТовара.НомерСтроки = Номера[0].НомерСтроки + 1;
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОшибкаКодаТНВЭЛТС) Тогда
					ОтразитьОшибку(Ошибки, "Стр[" + СтрТовара.НомерСтроки + "] " + ОшибкаКодаТНВЭЛТС, "ТоварыКодТНВЭДЕАЭС");
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОшибкаКодаОКЭД) Тогда
					ОтразитьОшибку(Ошибки, "Стр[" + СтрТовара.НомерСтроки + "] " + ОшибкаКодаОКЭД, "ТоварыКодОКЭД");
				КонецЕсли;
				
				Если Не ПустаяСтрока(ОшибкаЕдиницыИзмерения) Тогда
					ОтразитьОшибку(Ошибки, "Стр[" + СтрТовара.НомерСтроки + "] " + ОшибкаЕдиницыИзмерения, "ТоварыЕдиницаИзмерения");
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
		//КонецЕсли;
		
	Иначе
		
		Структура.Вставить("ТипСодержимого", "stasut_info");
		
		stasut_info = Документ.ПервыйДочерний;
		valueColl = stasut_info.ПолучитьЭлементыПоИмени("value");
		Если valueColl.Количество() Тогда
			value = valueColl[0];
			Структура.Вставить("НомерЭСЧФ", СокрЛП(value.ТекстовоеСодержимое));
		КонецЕсли;
		
		stasutColl = stasut_info.ПолучитьЭлементыПоИмени("status");
		Если stasutColl.Количество() Тогда
			stasut = stasutColl[0];
			Структура.Вставить("Статус", СокрЛП(stasut.ТекстовоеСодержимое));
		КонецЕсли;
		
		messageColl = stasut_info.ПолучитьЭлементыПоИмени("message");
		Если messageColl.Количество() Тогда
			message = messageColl[0];
			Структура.Вставить("Сообщение", СокрЛП(message.ТекстовоеСодержимое));
		КонецЕсли;
		
		sinceColl = stasut_info.ПолучитьЭлементыПоИмени("since");
		Если sinceColl.Количество() Тогда
			since = sinceColl[0];
			Структура.Вставить("ДатаДействия", СокрЛП(since.ТекстовоеСодержимое));
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры //ВыделитьДокументДляЧтенияИзПодписанного

////////////////////////////////////////////////////////////////////////////////
//
// Функция НомерНакладной
//
// Описание:
//  преобразовывает переданную строку к формату: "ЧЦ=7; ЧДЦ=; ЧВН=; ЧГ=0"
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//
Функция НомерНакладной( ДанныеСтр ) Экспорт

	СтрДлина = СтрДлина( ДанныеСтр );
	НомерНакладной = "";
	
	Если СтрДлина Тогда
		
		Для ном = 1 По СтрДлина Цикл
			с = Сред(ДанныеСтр,ном,1);
			Если ЗначениеЗаполнено(с) Тогда
				НомерНакладной = НомерНакладной + с;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	СтрДлина = СтрДлина( НомерНакладной );
	
	Пока 7-СтрДлина > 0 Цикл
		НомерНакладной = "0" + НомерНакладной;
		СтрДлина = СтрДлина + 1;
	КонецЦикла;
	
	Возврат НомерНакладной;

КонецФункции //НомерНакладной

////////////////////////////////////////////////////////////////////////////////
//
// Функция ФлагиАвторизации
//
// Описание:
//  возвращает значение флагов вызова метода 'Login'
//
// Параметры (название, тип, дифференцированное значение)
//
// Возвращаемое значение:
//
Функция ФлагиАвторизации( НеВыводитьОкноСВыборомСертификатаЕслиНайденТолькоОдинПодходящийСертификат = Ложь ) Экспорт

	Флаги = 0;
	//{[+](фрагмент добавлен), Макей Евгений Владимирович 21.11.2016 14:42:00
	// на данные момент в документации только один флаг
	// имеет смысл, если в хранилище только один личный сертификат
	Если НеВыводитьОкноСВыборомСертификатаЕслиНайденТолькоОдинПодходящийСертификат Тогда
		Флаги = 64;
	КонецЕсли;
	//}Макей Евгений Владимирович 21.11.2016 14:42:00
	
	Возврат Флаги;

КонецФункции //ФлагиАвторизации

////////////////////////////////////////////////////////////////////////////////
//
// Функция УстановитьПараметрыПроксиСервера
//
// Описание:
//  устанавливает параметры прокси сервера используя метод 'SetProxy' компоненты
//
// Параметры (название, тип, дифференцированное значение)
//  Адрес - Строка(0) - адрес прокси сервера
//  Порт - Число(32) - порт прокси сервера
//  ИмяПользователя - Строка(0) - имя пользователя прокси сервера
//  ПарольПользователя - Строка(0) - пароль пользователя прокси сервера
//  ТипПроксиСервера - Число(1,0) - тип прокси сервера; возможные значения:
//                                  1 - HTTP прокси;
//                                  4 - Socks прокси версии 4;
//                                  5 - Socks прокси версии 5.
//  Ошибки - Массив, Строка - стек ошибок
//
// Возвращаемое значение:
//  Булево - результат выполнения (Истина - успешно выполнено)
//
Функция УстановитьПараметрыПроксиСервера( Адрес, Порт, ИмяПользователя, ПарольПользователя, ТипПроксиСервера, Ошибки = Неопределено ) Экспорт

	#Если Сервер И Не ТолстыйКлиентОбычноеПриложение Тогда
		EInvVatService = ЭСЧФсерверПовтИсп.ПолучитьКомпонентыДоступаКПорталуЭСФЧ();
		Если EInvVatService = Неопределено Тогда
			ТекстОшибки = "ЭСЧФобщий.УстановитьПараметрыПроксиСервера(): не удалось получить компоненту";
			ЗаписьЖурналаРегистрации("EInvVatService", УровеньЖурналаРегистрации.Предупреждение,,, ТекстОшибки);
			Возврат Ложь;
		КонецЕсли;
	#КонецЕсли
	
	// метод возвращает '0' в случае успеха
	Результат = EInvVatService.SetProxy( Адрес, Порт, ИмяПользователя, ПарольПользователя, ТипПроксиСервера );
	
	Если Результат Тогда
		ОтразитьОшибку( Ошибки, "ЭСЧФобщий.УстановитьПараметрыПроксиСервера(): " + EInvVatService.LastError );
	КонецЕсли;
	
	Возврат Не Результат;

КонецФункции //УстановитьПараметрыПроксиСервера
